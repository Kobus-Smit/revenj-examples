<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Revenj.Core</name>
    </assembly>
    <members>
        <member name="T:Revenj.Extensibility.Autofac.Features.Indexed.IIndex`2">
            <summary>
            Provides components by lookup operations via an index (key) type.
            </summary>
            <typeparam name="TKey">The type of the index.</typeparam>
            <typeparam name="TValue">The service provided by the indexed components.</typeparam>
            <example>
            Retrieving a value given a key:
            <code>
            IIndex&lt;AccountType, IRenderer&gt; accountRenderers = // ...
            var renderer = accountRenderers[AccountType.User];
            </code>
            </example>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.Indexed.IIndex`2.TryGetValue(`0,`1@)">
            <summary>
            Get the value associated with <paramref name="key"/> if any is available.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="value">The retrieved value.</param>
            <returns>True if a value associated with the key exists.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.Indexed.IIndex`2.Item(`0)">
            <summary>
            Get the value associated with <paramref name="key"/>.
            </summary>
            <param name="key">The value to retrieve.</param>
            <returns>The associated value.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.GeneratedFactories.ParameterMapping">
            <summary>
            Determines how the parameters of the delegate type are passed on
            to the generated Resolve() call as Parameter objects.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Features.GeneratedFactories.ParameterMapping.Adaptive">
            <summary>
            Chooses parameter mapping based on the factory type.
            For Func-based factories this is equivalent to ByType, for all
            others ByName will be used.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Features.GeneratedFactories.ParameterMapping.ByName">
            <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as NamedParameters based on the parameter
            names in the delegate type's formal argument list.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Features.GeneratedFactories.ParameterMapping.ByType">
            <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as TypedParameters based on the parameter
            types in the delegate type's formal argument list.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Features.GeneratedFactories.ParameterMapping.ByPosition">
            <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as PositionalParameters based on the parameter
            indices in the delegate type's formal argument list.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs">
            <summary>
            Raised when the completion phase of an instance lookup operation begins.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs.#ctor(Revenj.Extensibility.Autofac.Core.Resolving.IInstanceLookup)">
            <summary>
            Create an instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs"/> class.
            </summary>
            <param name="instanceLookup">The instance lookup that is beginning the completion phase.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs.InstanceLookup">
            <summary>
            The instance lookup operation that is beginning the completion phase.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException">
            <summary>
            A service was requested that cannot be provided by the container. To avoid this exception, either register a component
            to provide the required service, check for service registration using IsRegistered(), or use the ResolveOptional()
            method to resolve an optional dependency.
            </summary>
            <remarks>This exception is fatal. See <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> for more information.</remarks>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException">
            <summary>
            Base exception type thrown whenever the dependency resolution process fails. This is a fatal
            exception, as Autofac is unable to 'roll back' changes to components that may have already
            been made during the operation. For example, 'on activated' handlers may have already been
            fired, or 'single instance' components partially constructed.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.DependencyResolutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.DependencyResolutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.DependencyResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.DependencyResolutionException.Message">
            <summary>
            Gets a message that describes the current exception with dependency path.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(Revenj.Extensibility.Autofac.Core.Service,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Lifetime.CurrentScopeLifetime">
            <summary>
            Attaches the instance's lifetime to the current lifetime scope.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.IComponentLifetime">
            <summary>
            Locates the lifetime to which instances of a component should be attached.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IComponentLifetime.FindScope(Revenj.Extensibility.Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
            <param name="mostNestedVisibleScope">The most nested visible scope.</param>
            <returns>The scope for the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.CurrentScopeLifetime.FindScope(Revenj.Extensibility.Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
            <param name="mostNestedVisibleScope">The most nested visible scope.</param>
            <returns>The scope for the component.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.KeyedService">
            <summary>
            Identifies a service using a key in addition to its type.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Service">
            <summary>
            Services are the lookup keys used to locate component instances.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Service.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Service.op_Equality(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Service.op_Inequality(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Service.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Service.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Service.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.IServiceWithType">
            <summary>
            Interface supported by services that carry type information.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IServiceWithType.ChangeType(System.Type)">
            <summary>
            Return a new service of the same kind, but carrying
            <paramref name="newType"/> as the <see cref="P:Revenj.Extensibility.Autofac.Core.IServiceWithType.ServiceType"/>.
            </summary>
            <param name="newType">The new service type.</param>
            <returns>A new service with the service type.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IServiceWithType.ServiceType">
            <summary>
            Gets the type of the service.
            </summary>
            <value>The type of the service.</value>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.KeyedService.#ctor(System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.KeyedService"/> class.
            </summary>
            <param name="serviceKey">Key of the service.</param>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.KeyedService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.KeyedService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.KeyedService.ChangeType(System.Type)">
            <summary>
            Return a new service of the same kind, but carrying
            <paramref name="newType"/> as the <see cref="P:Revenj.Extensibility.Autofac.Core.KeyedService.ServiceType"/>.
            </summary>
            <param name="newType">The new service type.</param>
            <returns>A new service with the service type.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.KeyedService.ServiceKey">
            <summary>
            Gets or sets the key of the service.
            </summary>
            <value>The key of the service.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.KeyedService.ServiceType">
            <summary>
            Gets the type of the service.
            </summary>
            <value>The type of the service.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.KeyedService.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.ActivatedEventArgs`1">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.IActivatedEventArgs`1">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IActivatedEventArgs`1.Context">
            <summary>
            The context in which the activation occurred.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IActivatedEventArgs`1.Component">
            <summary>
            The component providing the instance.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IActivatedEventArgs`1.Parameters">
            <summary>
            The paramters provided when resolved.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IActivatedEventArgs`1.Instance">
            <summary>
            The instance that will be used to satisfy the request.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.ActivatedEventArgs`1.#ctor(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.ActivatedEventArgs`1"/> class.
            </summary>
            <param name="service">Service which is activated</param>
            <param name="context">The context.</param>
            <param name="component">The component.</param>
            <param name="parameters">The parameters.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ActivatedEventArgs`1.Service">
            <summary>
            The service which is activating.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ActivatedEventArgs`1.Context">
            <summary>
            The context in which the activation occurred.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ActivatedEventArgs`1.Component">
            <summary>
            The component providing the instance.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ActivatedEventArgs`1.Parameters">
            <summary>
            The paramters provided when resolved.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ActivatedEventArgs`1.Instance">
            <summary>
            The instance that will be used to satisfy the request.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.ListItemElement">
            <summary>
            Configuration for values in a list
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ListItemElement.Key">
            <summary>
            Gets the key to be set (will be converted.)
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ListItemElement.Value">
            <summary>
            Gets the value to be set (will be converted.)
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3">
            <summary>
            Data structure used to construct registrations.
            </summary>
            <typeparam name="TLimit">The most specific type to which instances of the registration
            can be cast.</typeparam>
            <typeparam name="TActivatorData">Activator builder type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style type.</typeparam>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.ExternallyOwned">
            <summary>
            Configure the component so that instances are never disposed by the container.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.OwnedByLifetimeScope">
            <summary>
            Configure the component so that instances that support IDisposable are
            disposed by the container (default.)
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.InstancePerDependency">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets a new, unique instance (default.)
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.SingleInstance">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets the same, shared instance.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.InstancePerLifetimeScope">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a single ILifetimeScope gets the same, shared instance. Dependent components in
            different lifetime scopes will get different instances.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope tagged with the provided tag value gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the tagged scope will
            share the parent's instance. If no appropriately tagged scope can be found in the
            hierarchy an <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="lifetimeScopeTag">Tag applied to matching lifetime scopes.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned``1">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned(System.Type)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="serviceType">Service type.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned``1(System.Object)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <param name="serviceKey">Key to associate with the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned(System.Object,System.Type)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="serviceKey">Key to associate with the component.</param>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.As``1">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.As``2">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService1">Service type.</typeparam>
            <typeparam name="TService2">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.As``3">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService1">Service type.</typeparam>
            <typeparam name="TService2">Service type.</typeparam>
            <typeparam name="TService3">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.As(System.Type[])">
            <summary>
            Configure the services that the component will provide.
            </summary>
            <param name="services">Service types to expose.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.As(Revenj.Extensibility.Autofac.Core.Service[])">
            <summary>
            Configure the services that the component will provide.
            </summary>
            <param name="services">Services to expose.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.Named(System.String,System.Type)">
            <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
            <param name="serviceName">Named service to associate with the component.</param>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.Named``1(System.String)">
            <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
            <param name="serviceName">Named service to associate with the component.</param>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.Keyed(System.Object,System.Type)">
            <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
            <param name="serviceKey">Key to associate with the component.</param>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.Keyed``1(System.Object)">
            <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
            <param name="serviceKey">Key to associate with the component.</param>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.OnPreparing(System.Action{Revenj.Extensibility.Autofac.Core.PreparingEventArgs})">
            <summary>
            Add a handler for the Preparing event. This event allows manipulating of the parameters
            that will be provided to the component.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.OnActivating(System.Action{Revenj.Extensibility.Autofac.Core.IActivatingEventArgs{`0}})">
            <summary>
            Add a handler for the Activating event.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.OnActivated(System.Action{Revenj.Extensibility.Autofac.Core.IActivatedEventArgs{`0}})">
            <summary>
            Add a handler for the Activated event.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.PropertiesAutowired(Revenj.Extensibility.Autofac.PropertyWiringFlags)">
            <summary>
            Configure the component so that any properties whose types are registered in the
            container will be wired to instances of the appropriate service.
            </summary>
            <param name="wiringFlags">Set wiring options such as circular dependency wiring support.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.WithMetadata(System.String,System.Object)">
            <summary>
            Associates data with the component.
            </summary>
            <param name="key">Key by which the data can be located.</param>
            <param name="value">The data value.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.WithMetadata(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Associates data with the component.
            </summary>
            <param name="properties">The extended properties to associate with the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.WithMetadata``1(System.Action{Revenj.Extensibility.Autofac.Builder.MetadataConfiguration{``0}})">
            <summary>
            Associates data with the component.
            </summary>
            <typeparam name="TMetadata">A type with properties whose names correspond to the
            property names to configure.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.ActivatorData">
            <summary>
            The activator data.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.RegistrationStyle">
            <summary>
            The registration style.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.RegistrationData">
            <summary>
            The registration data.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.IConcreteActivatorData">
            <summary>
            Activator data that can provide an IInstanceActivator instance.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.IConcreteActivatorData.Activator">
            <summary>
            The instance activator based on the provided data.
            </summary>
        </member>
        <member name="T:Remotion.Linq.UniqueIdentifierGenerator">
            <summary>
            Generates unique identifiers based on a set of known identifiers.
            An identifier is generated by appending a number to a given prefix. The identifier is considered unique when no known identifier
            exists which equals the prefix/number combination.
            </summary>
        </member>
        <member name="M:Remotion.Linq.UniqueIdentifierGenerator.AddKnownIdentifier(System.String)">
            <summary>
            Adds the given <paramref name="identifier"/> to the set of known identifiers.
            </summary>
            <param name="identifier">The identifier to add.</param>
        </member>
        <member name="M:Remotion.Linq.UniqueIdentifierGenerator.GetUniqueIdentifier(System.String)">
            <summary>
            Gets a unique identifier starting with the given <paramref name="prefix"/>. The identifier is generating by appending a number to the
            prefix so that the resulting string does not match a known identifier.
            </summary>
            <param name="prefix">The prefix to use for the identifier.</param>
            <returns>A unique identifier starting with <paramref name="prefix"/>.</returns>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.JoinExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})"/>
            or <see cref="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase">
            <summary>
            Base class for <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> implementations that represent instantiations of <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode">
            <summary>
            Interface for classes representing structural parts of an <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
            Resolves the specified <paramref name="expressionToBeResolved"/> by replacing any occurrence of <paramref name="inputParameter"/>
            by the result of the projection of this <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/>. The result is an <see cref="T:System.Linq.Expressions.Expression"/> that goes all the
            way to an <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/>.
            </summary>
            <param name="inputParameter">The parameter representing the input data streaming into an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/>. This is replaced
            by the projection data coming out of this <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/>.</param>
            <param name="expressionToBeResolved">The expression to be resolved. Any occurrence of <paramref name="inputParameter"/> in this expression
            is replaced.</param>
            <param name="clauseGenerationContext">Context information used during the current parsing process. This structure maps 
            <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode"/>s  to the clauses created from them. Implementers that also implement 
            <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode"/> (such as  <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode"/> or <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectManyExpressionNode"/>) must add 
            their clauses to the mapping in <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.Apply(Remotion.Linq.QueryModel,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/> if they want to be able to implement <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/> correctly.</param>
            <returns>An equivalent of <paramref name="expressionToBeResolved"/> with each occurrence of <paramref name="inputParameter"/> replaced by
            the projection data streaming out of this <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            This node does not support this operation because it does not stream any data to subsequent nodes.
            </exception>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.Apply(Remotion.Linq.QueryModel,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
            Applies this <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> to the specified query model. Nodes can add or replace clauses, add or replace expressions, 
            add or replace <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/> objects, or even create a completely new <see cref="T:Remotion.Linq.QueryModel"/>, depending on their semantics.
            </summary>
            <param name="queryModel">The query model this node should be applied to.</param>
            <param name="clauseGenerationContext">Context information used during the current parsing process. This structure maps 
            <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode"/>s to the clauses created from them. Implementers that 
            also implement <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode"/> (such as 
            <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode"/> or <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectManyExpressionNode"/>) must add their clauses to the mapping in 
            <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.Apply(Remotion.Linq.QueryModel,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/> in order to be able to implement <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/> correctly.</param>
            <returns>The modified <paramref name="queryModel"/> or a new <see cref="T:Remotion.Linq.QueryModel"/> that reflects the changes made by this node.</returns>
            <remarks>
            For <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode"/> objects, which mark the end of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain, this method must not be called.
            Instead, use <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode.CreateMainFromClause(Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/> to generate a <see cref="T:Remotion.Linq.Clauses.MainFromClause"/> and instantiate a new 
            <see cref="T:Remotion.Linq.QueryModel"/> with that clause.
            </remarks>
        </member>
        <member name="P:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.Source">
            <summary>
            Gets the source <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> that streams data into this node.
            </summary>
            <value>The source <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/>, or <see langword="null"/> if this node is the end of the chain.</value>
        </member>
        <member name="P:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.AssociatedIdentifier">
            <summary>
            Gets the identifier associated with this <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/>. <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> tries to find the identifier
            that was originally associated with this node in the query written by the user by analyzing the parameter names of the next expression in the 
            method call chain.
            </summary>
            <value>The associated identifier.</value>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.GetSupportedMethod``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> from a given <see cref="T:System.Linq.Expressions.LambdaExpression"/> that has to wrap a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            If the method is a generic method, its open generic method definition is returned.
            This method can be used for registration of the node type with an <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry"/>.
            </summary>
            <typeparam name="T">The return type of the <paramref name="methodCall"/>.</typeparam>
            <param name="methodCall">The method call.</param>
            <returns>The normalized <see cref="T:System.Reflection.MethodInfo"/> that corresponds to the method call.</returns>
            <exception cref="T:System.NotSupportedException">
            Thrown if the <paramref name="methodCall"/> cannot be resolved to a normalized <see cref="T:System.Reflection.MethodInfo"/>. This can happen if the method if part of
            a generic type, uses type parameters from the generic type, and has an overload that is only distinguishable via the type parameters from the generic type.
            </exception>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.WrapQueryModelAfterEndOfQuery(Remotion.Linq.QueryModel,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
            Wraps the <paramref name="queryModel"/> into a subquery after a node that indicates the end of the query (
            <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ResultOperatorExpressionNodeBase"/> or <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.GroupByExpressionNode"/>). Override this method
            when implementing a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> that does not need a subquery to be created if it occurs after the query end.
            </summary>
            <remarks>
            <para>
            When an ordinary node follows a result operator or group node, it cannot simply append its clauses to the <paramref name="queryModel"/> 
            because semantically, the result operator (or grouping) must be executed _before_ the clause. Therefore, in such scenarios, we wrap 
            the current query model into a <see cref="T:Remotion.Linq.Clauses.Expressions.SubQueryExpression"/> that we put into the <see cref="T:Remotion.Linq.Clauses.MainFromClause"/> of a new 
            <see cref="T:Remotion.Linq.QueryModel"/>.
            </para>
            <para>
            This method also changes the <see cref="P:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.Source"/> of this node because logically, all <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/> operations must be handled
            by the new <see cref="T:Remotion.Linq.Clauses.MainFromClause"/> holding the <see cref="T:Remotion.Linq.Clauses.Expressions.SubQueryExpression"/>. For example, consider the following call chain:
            <code>
            MainSource (...)
              .Select (x =&gt; x)
              .Distinct ()
              .Select (x =&gt; x)
            </code>
            
            Naively, the last Select node would resolve (via Distinct and Select) to the <see cref="T:Remotion.Linq.Clauses.MainFromClause"/> created by the initial MainSource.
            After this method is executed, however, that <see cref="T:Remotion.Linq.Clauses.MainFromClause"/> is part of the sub query, and a new <see cref="T:Remotion.Linq.Clauses.MainFromClause"/> 
            has been created to hold it. Therefore, we replace the chain as follows:
            <code>
            MainSource (MainSource (...).Select (x =&gt; x).Distinct ())
              .Select (x =&gt; x)
            </code>
            
            Now, the last Select node resolves to the new <see cref="T:Remotion.Linq.Clauses.MainFromClause"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.SetResultTypeOverride(Remotion.Linq.QueryModel)">
            <summary>
            Sets the result type override of the given <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
            <param name="queryModel">The query model to set the <see cref="P:Remotion.Linq.QueryModel.ResultTypeOverride"/> of.</param>
            <remarks>
            By default, the result type override is set to <see cref="P:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.NodeResultType"/> in the <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase.Apply(Remotion.Linq.QueryModel,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/> method. This ensures that the query
            model represents the type of the query correctly. Specific node parsers can override this method to set the 
            <see cref="P:Remotion.Linq.QueryModel.ResultTypeOverride"/> to another value, or to clear it (set it to <see langword="null"/>). Do not leave the
            <see cref="P:Remotion.Linq.QueryModel.ResultTypeOverride"/> unchanged when overriding this method, as a source node might have set it to a value that doesn't 
            fit this node.
            </remarks>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IntersectExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it usually follows (or replaces) a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectExpressionNode"/> of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that 
            represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ResultOperatorExpressionNodeBase">
            <summary>
            Acts as a base class for <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/>s standing for <see cref="T:System.Linq.Expressions.MethodCallExpression"/>s that operate on the result of the query
            rather than representing actual clauses, such as <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.CountExpressionNode"/> or <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.DistinctExpressionNode"/>.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo">
            <summary>
            Contains metadata about a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> that is parsed into a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeBase"/>.
            </summary>
        </member>
        <member name="P:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo.AssociatedIdentifier">
            <summary>
            Gets the associated identifier, i.e. the name the user gave the data streaming out of this expression. For example, the 
            <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectManyExpressionNode"/> corresponding to a <c>from c in C</c> clause should get the identifier "c".
            If there is no user-defined identifier (or the identifier is impossible to infer from the expression tree), a generated identifier
            is given instead.
            </summary>
        </member>
        <member name="P:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo.Source">
            <summary>
            Gets the source expression node, i.e. the node streaming data into the parsed node.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo.ParsedExpression">
            <summary>
            Gets the <see cref="T:System.Linq.Expressions.MethodCallExpression"/> being parsed.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.AggregateExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for the 
            <see cref="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})"/> and <see cref="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})"/> methods.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.ReplacingExpressionTreeVisitor">
            <summary>
            Replaces all nodes that equal a given <see cref="T:System.Linq.Expressions.Expression"/> with a replacement node. Expressions are also replaced within subqueries; the 
            <see cref="T:Remotion.Linq.QueryModel"/> is changed by the replacement operations, it is not copied. The replacement node is not recursively searched for 
            occurrences of the <see cref="T:System.Linq.Expressions.Expression"/> to be replaced.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitor">
            <summary>
            Provides a base class that can be used for visiting and optionally transforming each node of an <see cref="T:System.Linq.Expressions.Expression"/> tree in a 
            strongly typed fashion.
            This is the base class of many transformation classes.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.IsSupportedStandardExpression(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the given <see cref="T:System.Linq.Expressions.Expression"/> is one of the expressions defined by <see cref="T:System.Linq.Expressions.ExpressionType"/> for which
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitor"/> has a Visit method. <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.VisitExpression(System.Linq.Expressions.Expression)"/> handles those by calling the respective Visit method.
            </summary>
            <param name="expression">The expression to check. Must not be <see langword="null"/>.</param>
            <returns>
            	<see langword="true"/> if <paramref name="expression"/> is one of the expressions defined by <see cref="T:System.Linq.Expressions.ExpressionType"/> and 
              <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitor"/> has a Visit method for it; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.IsRelinqExpression(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the given <see cref="T:System.Linq.Expressions.Expression"/> is one of the base expressions defined by re-linq. 
            <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.VisitExpression(System.Linq.Expressions.Expression)"/> handles those by calling the respective Visit method.
            </summary>
            <param name="expression">The expression to check.</param>
            <returns>
            	<see langword="true"/> if <paramref name="expression"/> is a re-linq base expression (<see cref="T:Remotion.Linq.Clauses.Expressions.SubQueryExpression"/>, 
              <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/>) for which <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitor"/> has dedicated Visit methods;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.IsExtensionExpression(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the given <see cref="T:System.Linq.Expressions.Expression"/> is an <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/>. <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.VisitExpression(System.Linq.Expressions.Expression)"/> handles such
            expressions by calling <see cref="M:Remotion.Linq.Clauses.Expressions.ExtensionExpression.Accept(Remotion.Linq.Parsing.ExpressionTreeVisitor)"/>.
            </summary>
            <param name="expression">The expression to check.</param>
            <returns>
            	<see langword="true"/> if <paramref name="expression"/> is an <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.IsUnknownNonExtensionExpression(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the given <see cref="T:System.Linq.Expressions.Expression"/> is an unknown expression not derived from <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/>. 
            <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.VisitExpression(System.Linq.Expressions.Expression)"/> cannot handle such expressions at all and will call <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.VisitUnknownNonExtensionExpression(System.Linq.Expressions.Expression)"/> for them.
            </summary>
            <param name="expression">The expression to check.</param>
            <returns>
            	<see langword="true"/> if <paramref name="expression"/> is an unknown expression not derived from <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/>; 
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})">
            <summary>
            Adjusts the arguments for a <see cref="T:System.Linq.Expressions.NewExpression"/> so that they match the given members.
            </summary>
            <param name="arguments">The arguments to adjust.</param>
            <param name="members">The members defining the required argument types.</param>
            <returns>
            A sequence of expressions that are equivalent to <paramref name="arguments"/>, but converted to the associated member's
            result type if needed.
            </returns>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.SumResultOperator">
            <summary>
            Represents calculating the sum of the items returned by a query. 
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Sum" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.SumResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s.ID).Sum();
            </code>
            </example>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.ValueFromSequenceResultOperatorBase">
            <summary>
            Represents a <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/> that is executed on a sequence, returning a scalar value or single item as its result.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperatorBase">
            <summary>
            Represents an operation that is executed on the result set of the query, aggregating, filtering, or restricting the number of result items
            before the query result is returned.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperatorBase.ExecuteInMemory(Remotion.Linq.Clauses.StreamedData.IStreamedData)">
            <summary>
            Executes this result operator in memory, on a given input. Executing result operators in memory should only be 
            performed if the target query system does not support the operator.
            </summary>
            <param name="input">The input for the result operator. This must match the type of <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedData"/> expected by the operator.</param>
            <returns>The result of the operator.</returns>
            <seealso cref="M:Remotion.Linq.Clauses.ResultOperatorBase.InvokeGenericExecuteMethod``2(Remotion.Linq.Clauses.StreamedData.IStreamedData,System.Func{``0,``1})"/>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperatorBase.GetOutputDataInfo(Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo)">
            <summary>
            Gets information about the data streamed out of this <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/>. This contains the result type a query would have if 
            it ended with this <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/>, and it optionally includes an <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.ItemExpression"/> describing
            the streamed sequence's items.
            </summary>
            <param name="inputInfo">Information about the data produced by the preceding <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/>, or the <see cref="T:Remotion.Linq.Clauses.SelectClause"/>
            of the query if no previous <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/> exists.</param>
            <returns>Gets information about the data streamed out of this <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/>.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperatorBase.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
            Clones this item, registering its clone with the <paramref name="cloneContext"/> if it is a query source clause.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Remotion.Linq.Clauses.CloneContext"/>.</param>
            <returns>A clone of this item.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperatorBase.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
            Accepts the specified visitor by calling its <see cref="M:Remotion.Linq.IQueryModelVisitor.VisitResultOperator(Remotion.Linq.Clauses.ResultOperatorBase,Remotion.Linq.QueryModel,System.Int32)"/> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">The index of this item in the <paramref name="queryModel"/>'s <see cref="P:Remotion.Linq.QueryModel.ResultOperators"/> collection.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperatorBase.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Transforms all the expressions in this item via the given <paramref name="transformation"/> delegate. Subclasses must apply the 
            <paramref name="transformation"/> to any expressions they hold. If a subclass does not hold any expressions, it shouldn't do anything
            in the implementation of this method.
            </summary>
            <param name="transformation">The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression"/> within this
            item, and those expressions will be replaced with what the delegate returns.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperatorBase.InvokeGenericExecuteMethod``2(Remotion.Linq.Clauses.StreamedData.IStreamedData,System.Func{``0,``1})">
             <summary>
             Invokes a given generic method on an <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedData"/> input via Reflection. Use this to implement 
             <see cref="M:Remotion.Linq.Clauses.ResultOperatorBase.ExecuteInMemory(Remotion.Linq.Clauses.StreamedData.IStreamedData)"/> by defining a strongly typed, generic variant 
             of <see cref="M:Remotion.Linq.Clauses.ResultOperatorBase.ExecuteInMemory(Remotion.Linq.Clauses.StreamedData.IStreamedData)"/>; then invoke that strongly typed 
             variant via  <see cref="M:Remotion.Linq.Clauses.ResultOperatorBase.InvokeGenericExecuteMethod``2(Remotion.Linq.Clauses.StreamedData.IStreamedData,System.Func{``0,``1})"/>.
             </summary>
             <typeparam name="TInput">The type of <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedData"/> expected as an input to <paramref name="genericExecuteCaller"/>.</typeparam>
             <typeparam name="TResult">The type of <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedData"/> expected as the output of <paramref name="genericExecuteCaller"/>.</typeparam>
             <param name="input">The input <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedData"/> object to invoke the method on..</param>
             <param name="genericExecuteCaller">A delegate holding exactly one public generic method with exactly one generic argument. This method is
             called via Reflection on the given <paramref name="input"/> argument.</param>
             <returns>The result of invoking the method in <paramref name="genericExecuteCaller"/> on <paramref name="input"/>.</returns>
             <example>
             The <see cref="T:Remotion.Linq.Clauses.ResultOperators.CountResultOperator"/> uses this method as follows:
             <code>
             public IStreamedData ExecuteInMemory (IStreamedData input)
             {
               ArgumentUtility.CheckNotNull ("input", input);
               return InvokeGenericExecuteMethod&lt;StreamedSequence, StreamedValue&gt; (input, ExecuteInMemory&lt;object&gt;);
             }
            
             public StreamedValue ExecuteInMemory&lt;T&gt; (StreamedSequence input)
             {
               var sequence = input.GetTypedSequence&lt;T&gt; ();
               var result = sequence.Sequence.Count ();
               return new StreamedValue (result);
             }
             </code>
             </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperatorBase.InvokeExecuteMethod(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Invokes the given <paramref name="method"/> via reflection on the given <paramref name="input"/>.
            </summary>
            <param name="input">The input to invoke the method with.</param>
            <param name="method">The method to be invoked.</param>
            <returns>The result of the invocation</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperatorBase.GetConstantValueFromExpression``1(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Gets the constant value of the given expression, assuming it is a <see cref="T:System.Linq.Expressions.ConstantExpression"/>. If it is
            not, an <see cref="T:System.InvalidOperationException"/> is thrown.
            </summary>
            <typeparam name="T">The expected value type. If the value is not of this type, an <see cref="T:System.InvalidOperationException"/> is thrown.</typeparam>
            <param name="expressionName">A string describing the value; this will be included in the exception message if an exception is thrown.</param>
            <param name="expression">The expression whose value to get.</param>
            <returns>
            The constant value of the given <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.SumResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.SkipResultOperator">
            <summary>
            Represents skipping a number of the items returned by a query.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Skip" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.SkipResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).Skip (3);
            </code>
            </example>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.SequenceTypePreservingResultOperatorBase">
            <summary>
            Represents a <see cref="T:Remotion.Linq.Clauses.ResultOperators.SequenceFromSequenceResultOperatorBase"/> that is executed on a sequence, returning a new sequence with the same
            item type as its result.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.SequenceFromSequenceResultOperatorBase">
            <summary>
            Represents a <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/> that is executed on a sequence, returning a new sequence as its result.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.SkipResultOperator.GetConstantCount">
            <summary>
            Gets the constant <see cref="T:System.Int32"/> value of the <see cref="P:Remotion.Linq.Clauses.ResultOperators.SkipResultOperator.Count"/> property, assuming it is a <see cref="T:System.Linq.Expressions.ConstantExpression"/>. If it is
            not, an expression is thrown.
            </summary>
            <returns>The constant <see cref="T:System.Int32"/> value of the <see cref="P:Remotion.Linq.Clauses.ResultOperators.SkipResultOperator.Count"/> property.</returns>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.LongCountResultOperator">
            <summary>
            Represents counting the number of items returned by a query as a 64-bit number.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
            "LongCount" query methods taking a predicate are represented as a combination of a <see cref="T:Remotion.Linq.Clauses.WhereClause"/> and a 
            <see cref="T:Remotion.Linq.Clauses.ResultOperators.LongCountResultOperator"/>.
            </remarks>
            <example>
            In C#, the "LongCount" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.LongCountResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).LongCount();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.LongCountResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.AverageResultOperator">
            <summary>
            Represents a calculation of an average value from the items returned by a query.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Average" call in the following example corresponds to an <see cref="T:Remotion.Linq.Clauses.ResultOperators.AverageResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s.ID).Average();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AverageResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Remotion.Linq.Clauses.IClause">
            <summary>
            Represents a clause within the <see cref="T:Remotion.Linq.QueryModel"/>. Implemented by <see cref="T:Remotion.Linq.Clauses.MainFromClause"/>, <see cref="T:Remotion.Linq.Clauses.SelectClause"/>, 
            <see cref="T:Remotion.Linq.Clauses.IBodyClause"/>, and <see cref="T:Remotion.Linq.Clauses.JoinClause"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.IClause.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Transforms all the expressions in this clause and its child objects via the given <paramref name="transformation"/> delegate.
            </summary>
            <param name="transformation">The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression"/> within this 
            clause, and those expressions will be replaced with what the delegate returns.</param>
        </member>
        <member name="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression">
            <summary>
            Represents an expression tree node that points to a query source represented by a <see cref="T:Remotion.Linq.Clauses.FromClauseBase"/>. These expressions should always
            point back, to a clause defined prior to the clause holding a <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/>. Otherwise, exceptions might be 
            thrown at runtime.
            </summary>
            <remarks>
            This particular expression overrides <see cref="M:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression.Equals(System.Object)"/>, i.e. it can be compared to another <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> based
            on the <see cref="P:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> by 
            comparing the <see cref="P:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource"/> properties for reference equality.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is a <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> that points to the 
            same <see cref="P:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource">
            <summary>
            Gets the query source referenced by this expression.
            </summary>
            <value>The referenced query source.</value>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutState">
            <summary>
            Represents an ongoing COPY TO STDOUT operation.
            Provides methods to read data from server or end the operation.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlState">
            <summary> This class represents the base class for the state pattern design pattern
             implementation.
             </summary>
            
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlState.ChangeState(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlState)">
            <summary>
            This method is used by the states to change the state of the context.
             </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlState.ProcessBackendResponses(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector)">
            <summary>
             This method is responsible to handle all protocol messages sent from the backend.
             It holds all the logic to do it.
             To exchange data, it uses a Mediator object from which it reads/writes information
             to handle backend requests.
             </summary>
            
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlState.ProcessBackendResponsesEnum(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector,System.Boolean)">
            <summary>
             This method is responsible to handle all protocol messages sent from the backend.
             It holds all the logic to do it.
             To exchange data, it uses a Mediator object from which it reads/writes information
             to handle backend requests.
             </summary>
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlState.CheckForContextSocketAvailability(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector)" -->
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutState.StartCopy(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyFormat)">
            <summary>
            Called from NpgsqlState.ProcessBackendResponses upon CopyOutResponse.
            If CopyStream is already set, it is used to write data received from server, after which the copy ends.
            Otherwise CopyStream is set to a readable NpgsqlCopyOutStream that receives data from server.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutState.GetCopyData(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector)">
            <summary>
            Called from NpgsqlOutStream.Read to read copy data from server.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutState.CopyFormat">
            <summary>
            Copy format information returned from server.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.MD5CryptoServiceProvider">
            <summary>
            C# implementation of the MD5 cryptographic hash function.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.MD5">
            <summary>
            Common base class for all derived MD5 implementations.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.#ctor">
            <summary>
            Called from constructor of derived class.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.Finalize">
            <summary>
            Finalizer for HashAlgorithm
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.ComputeHash(System.Byte[])">
            <summary>
            Computes the entire hash of all the bytes in the byte array.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, drives the hashing function.
            </summary>
            <param name="rgb"></param>
            <param name="start"></param>
            <param name="size"></param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.HashFinal">
            <summary>
            When overridden in a derived class, this pads and hashes whatever data might be left in the buffers and then returns the hash created.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.Initialize">
            <summary>
            When overridden in a derived class, initializes the object to prepare for hashing.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Used for stream chaining.  Computes hash as data passes through it.
            </summary>
            <param name="inputBuffer">The buffer from which to grab the data to be copied.</param>
            <param name="inputOffset">The offset into the input buffer to start reading at.</param>
            <param name="inputCount">The number of bytes to be copied.</param>
            <param name="outputBuffer">The buffer to write the copied data to.</param>
            <param name="outputOffset">At what point in the outputBuffer to write the data at.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Used for stream chaining.  Computes hash as data passes through it.  Finishes off the hash.
            </summary>
            <param name="inputBuffer">The buffer from which to grab the data to be copied.</param>
            <param name="inputOffset">The offset into the input buffer to start reading at.</param>
            <param name="inputCount">The number of bytes to be copied.</param>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.CanTransformMultipleBlocks">
            <summary>
            Get whether or not the hash can transform multiple blocks at a time.
            Note: MUST be overriden if descendant can transform multiple block
            on a single call!
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.Hash">
            <summary>
            Gets the previously computed hash.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.HashSize">
            <summary>
            Returns the size in bits of the hash.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.InputBlockSize">
            <summary>
            Must be overriden if not 1
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.HashAlgorithm.OutputBlockSize">
            <summary>
            Must be overriden if not 1
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.MD5.#ctor">
            <summary>
            Called from constructor of derived class.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.MD5.Create">
            <summary>
            Creates the default derived class.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.MD5CryptoServiceProvider.#ctor">
            <summary>
            Creates a new MD5CryptoServiceProvider.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.MD5CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Drives the hashing function.
            </summary>
            <param name="rgb">Byte array containing the data to hash.</param>
            <param name="start">Where in the input buffer to start.</param>
            <param name="size">Size in bytes of the data in the buffer to hash.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.MD5CryptoServiceProvider.HashFinal">
            <summary>
            This finalizes the hash.  Takes the data from the chaining variables and returns it.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.MD5CryptoServiceProvider.Initialize">
            <summary>
            Resets the class after use.  Called automatically after hashing is done.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.MD5CryptoServiceProvider.ProcessBlock(System.Byte[],System.Int32)">
            <summary>
            This is the meat of the hash function.  It is what processes each block one at a time.
            </summary>
            <param name="inputBuffer">Byte array to process data from.</param>
            <param name="inputOffset">Where in the byte array to start processing.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.MD5CryptoServiceProvider.ProcessFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pads and then processes the final block.
            </summary>
            <param name="inputBuffer">Buffer to grab data from.</param>
            <param name="inputOffset">Position in buffer in bytes to get data from.</param>
            <param name="inputCount">How much data in bytes in the buffer to use.</param>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlPasswordPacket">
            <summary>
            This class represents a PasswordPacket message sent to backend
            PostgreSQL.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.ClientMessage">
            <summary>
            For classes representing messages sent from the client to the server.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut">
            <summary>
            Represents a PostgreSQL COPY TO STDOUT operation with a corresponding SQL statement
            to execute against a PostgreSQL database
            and an associated stream used to write results to (if provided by user)
            or for reading the results (when generated by driver).
            Eg. new NpgsqlCopyOut("COPY (SELECT * FROM mytable) TO STDOUT", connection, streamToWrite).Start();
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut.#ctor(System.String,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection)">
            <summary>
            Creates NpgsqlCommand to run given query upon Start(), after which CopyStream provides data from database as requested in the query.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut.#ctor(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection)">
            <summary>
            Given command is run upon Start(), after which CopyStream provides data from database as requested in the query.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut.#ctor(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection,System.IO.Stream)">
            <summary>
            Given command is executed upon Start() and all requested copy data is written to toStream immediately.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut.FieldIsBinary(System.Int32)">
            <summary>
            Returns true if this operation is currently active and field at given location is in binary format.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut.Start">
            <summary>
            Command specified upon creation is executed as a non-query.
            If CopyStream is set upon creation, all copy data from server will be written to it, and operation will be finished immediately.
            Otherwise the CopyStream member can be used for reading copy data from server until no more data is available.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut.End">
            <summary>
            Flush generated CopyStream at once. Effectively reads and discard all the rest of copy data from server.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut.IsActive">
            <summary>
            Returns true if the connection is currently reserved for this operation.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut.CopyStream">
            <summary>
            The stream provided by user or generated upon Start()
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut.NpgsqlCommand">
            <summary>
            The Command used to execute this copy operation.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut.IsBinary">
            <summary>
            Returns true if this operation is currently active and in binary format.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut.FieldCount">
            <summary>
            Returns number of fields if this operation is currently active, otherwise -1
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOut.Read">
            <summary>
            Faster alternative to using the generated CopyStream.
            </summary>
        </member>
        <member name="T:Mono.Security.Cryptography.DHParameters">
            <summary>
            Represents the parameters of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:Mono.Security.Cryptography.DHParameters.P">
            <summary>
            Represents the public <b>P</b> parameter of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:Mono.Security.Cryptography.DHParameters.G">
            <summary>
            Represents the public <b>G</b> parameter of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:Mono.Security.Cryptography.DHParameters.X">
            <summary>
            Represents the private <b>X</b> parameter of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry">
            <summary>
            Maps services onto the components that provide them.
            </summary>
            <remarks>
            The component registry provides services directly from components,
            and also uses <see cref="T:Revenj.Extensibility.Autofac.Core.IRegistrationSource"/> to generate components
            on-the-fly or as adapters for other components. A component registry
            is normally used through a <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>, and not
            directly by application code.
            </remarks>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Util.Disposable">
            <summary>
            Base class for disposable objects.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.Disposable.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Util.Disposable.IsDisposed">
            <summary>
            Returns true if the current instance has been disposed; otherwise false;
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.IComponentRegistry">
            <summary>
            Provides component registrations according to the services they provide.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IComponentRegistry.TryGetRegistration(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Core.IComponentRegistration@)">
            <summary>
            Attempts to find a default registration for the specified service.
            </summary>
            <param name="service">The service to look up.</param>
            <param name="registration">The default registration for the service.</param>
            <returns>True if a registration exists.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IComponentRegistry.IsRegistered(Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Determines whether the specified service is registered.
            </summary>
            <param name="service">The service to test.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IComponentRegistry.Register(Revenj.Extensibility.Autofac.Core.IComponentRegistration)">
            <summary>
            Register a component.
            </summary>
            <param name="registration">The component registration.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IComponentRegistry.Register(Revenj.Extensibility.Autofac.Core.IComponentRegistration,System.Boolean)">
            <summary>
            Register a component.
            </summary>
            <param name="registration">The component registration.</param>
            <param name="preserveDefaults">If true, existing defaults for the services provided by the
            component will not be changed.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IComponentRegistry.RegistrationsFor(Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Selects from the available registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service"/>
            have been invoked.
            </summary>
            <param name="service">The service for which registrations are sought.</param>
            <returns>Registrations supporting <paramref name="service"/>.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IComponentRegistry.AddRegistrationSource(Revenj.Extensibility.Autofac.Core.IRegistrationSource)">
            <summary>
            Add a registration source that will provide registrations on-the-fly.
            </summary>
            <param name="source">The source to register.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IComponentRegistry.Registrations">
            <summary>
            Enumerate the registered components.
            </summary>
        </member>
        <member name="E:Revenj.Extensibility.Autofac.Core.IComponentRegistry.Registered">
            <summary>
            Fired whenever a component is registered - either explicitly or via a
            <see cref="T:Revenj.Extensibility.Autofac.Core.IRegistrationSource"/>.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IComponentRegistry.Sources">
            <summary>
            Gets the registration sources that are used by the registry.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IComponentRegistry.HasLocalComponents">
            <summary>
            True if the registry contains its own components; false if it is forwarding
            registrations from another external registry.
            </summary>
            <remarks>This property is used when walking up the scope tree looking for
            registrations for a new customised scope. (See issue 336.)</remarks>
        </member>
        <member name="E:Revenj.Extensibility.Autofac.Core.IComponentRegistry.RegistrationSourceAdded">
            <summary>
            Fired when an <see cref="T:Revenj.Extensibility.Autofac.Core.IRegistrationSource"/> is added to the registry.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry._synchRoot">
            <summary>
            Protects instance variables from concurrent access.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry._dynamicRegistrationSources">
            <summary>
            External registration sources.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry._registrations">
            <summary>
            All registrations.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry._serviceInfo">
            <summary>
            Keeps track of the status of registered services.
            TODO: this should be populated on build
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry.TryGetRegistration(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Core.IComponentRegistration@)">
            <summary>
            Attempts to find a default registration for the specified service.
            </summary>
            <param name="service">The service to look up.</param>
            <param name="registration">The default registration for the service.</param>
            <returns>True if a registration exists.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry.IsRegistered(Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Determines whether the specified service is registered.
            </summary>
            <param name="service">The service to test.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry.Register(Revenj.Extensibility.Autofac.Core.IComponentRegistration)">
            <summary>
            Register a component.
            </summary>
            <param name="registration">The component registration.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry.Register(Revenj.Extensibility.Autofac.Core.IComponentRegistration,System.Boolean)">
            <summary>
            Register a component.
            </summary>
            <param name="registration">The component registration.</param>
            <param name="preserveDefaults">If true, existing defaults for the services provided by the
            component will not be changed.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry.RegistrationsFor(Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Selects from the available registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service"/>
            have been invoked.
            </summary>
            <param name="service">The service for which registrations are sought.</param>
            <returns>Registrations supporting <paramref name="service"/>.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry.AddRegistrationSource(Revenj.Extensibility.Autofac.Core.IRegistrationSource)">
            <summary>
            Add a registration source that will provide registrations on-the-fly.
            </summary>
            <param name="source">The source to register.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry.Registrations">
            <summary>
            Enumerate the registered components.
            </summary>
        </member>
        <member name="E:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry.Registered">
            <summary>
            Fired whenever a component is registered - either explicitly or via a
            <see cref="T:Revenj.Extensibility.Autofac.Core.IRegistrationSource"/>.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry.Sources">
            <summary>
            Gets the registration sources that are used by the registry.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry.HasLocalComponents">
            <summary>
            True if the registry contains its own components; false if it is forwarding
            registrations from another external registry.
            </summary>
            <remarks>This property is used when walking up the scope tree looking for
            registrations for a new customised scope. (See issue 336.)</remarks>
        </member>
        <member name="E:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistry.RegistrationSourceAdded">
            <summary>
            Fired when an <see cref="T:Revenj.Extensibility.Autofac.Core.IRegistrationSource"/> is added to the registry.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.IActivatingEventArgs`1">
            <summary>
            Fired after the construction of an instance but before that instance
            is shared with any other or any members are invoked on it.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IActivatingEventArgs`1.ReplaceInstance(System.Object)">
            <summary>
            The instance can be replaced if needed, e.g. by an interface proxy.
            </summary>
            <param name="instance">The object to use instead of the activated instance.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IActivatingEventArgs`1.Context">
            <summary>
            The context in which the activation occurred.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IActivatingEventArgs`1.Component">
            <summary>
            The component providing the instance.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IActivatingEventArgs`1.Instance">
            <summary>
            The instance that will be used to satisfy the request.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IActivatingEventArgs`1.Parameters">
            <summary>
            The parameters supplied to the activator.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Activators.Reflection.AutowiringParameter">
            <summary>
            Supplies values based on the target parameter type.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Parameter">
            <summary>
            Used in order to provide a value to a constructor parameter or property on an instance
            being created by the container.
            </summary>
            <remarks>
            Not all parameters can be applied to all sites.
            </remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Parameter.CanSupplyValue(System.Reflection.ParameterInfo,Revenj.Extensibility.Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.AutowiringParameter.CanSupplyValue(System.Reflection.ParameterInfo,Revenj.Extensibility.Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.MetadataElementCollection">
            <summary>
            Collection of extended property elements.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.NamedConfigurationElementCollection`1">
            <summary>
            Base for multi-valued configuration elements.
            </summary>
            <typeparam name="TElementType"></typeparam>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.NamedConfigurationElementCollection`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Configuration.NamedConfigurationElementCollection`1"/> class.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementKey">The element key.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.NamedConfigurationElementCollection`1.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            true if the element exists in the collection; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.NamedConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.NamedConfigurationElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.NamedConfigurationElementCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.NamedConfigurationElementCollection`1.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <value></value>
            <returns>The name of the collection; otherwise, an empty string. The default is an empty string.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.NamedConfigurationElementCollection`1.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.NamedConfigurationElementCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the TElementType at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.MetadataElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Configuration.PropertyElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry">
            <summary>
            Maps the <see cref="T:System.Reflection.MethodInfo"/> objects used in <see cref="T:System.Linq.Expressions.MethodCallExpression"/> objects to the respective <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/>
            types based on the method names and a filter (as defined by <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.NameBasedRegistrationInfo"/>). 
            This is used by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> is encountered to instantiate the right 
            <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> for the given method.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider">
            <summary>
            Provides a common interface for classes mapping a <see cref="T:System.Reflection.MethodInfo"/> to the respective <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/>
            type. Implementations are used by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> is encountered to 
            instantiate the right <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> for the given method.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.INodeTypeProvider.IsRegistered(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a node type for the given <see cref="T:System.Reflection.MethodInfo"/> can be returned by this 
            <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.INodeTypeProvider.GetNodeType(System.Reflection.MethodInfo)">
            <summary>
            Gets the type of <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> that matches the given <paramref name="method"/>, returning <see langword="null"/> 
            if none can be found.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry.CreateFromTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry"/> and automatically registers all types implementing <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> 
            from a given type sequence that offer a public static <c>SupportedMethodNames</c> field.
            </summary>
            <returns>A <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry"/> with all <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> types with a <c>SupportedMethodNames</c>
            field registered.</returns>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry.Register(System.Collections.Generic.IEnumerable{Remotion.Linq.Parsing.Structure.NodeTypeProviders.NameBasedRegistrationInfo},System.Type)">
            <summary>
            Registers the given <paramref name="nodeType"/> for the query operator methods defined by the given <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.NameBasedRegistrationInfo"/>
            objects.
            </summary>
            <param name="registrationInfo">A sequence of objects defining the methods to register the node type for.</param>
            <param name="nodeType">The type of the <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> to register.</param>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry.IsRegistered(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method was registered with this <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry.GetNodeType(System.Reflection.MethodInfo)">
            <summary>
            Gets the type of <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> registered with this <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry"/> instance that
            matches the given <paramref name="method"/>, returning <see langword="null"/> if none can be found.
            </summary>
        </member>
        <member name="P:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry.RegisteredNamesCount">
            <summary>
            Returns the count of the registered method names.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.WhereExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.OfTypeExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)"/> and <see cref="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ContainsExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)"/> and
            <see cref="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)"/>. 
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.PartialEvaluatingExpressionTreeProcessor">
            <summary>
            Analyzes an <see cref="T:System.Linq.Expressions.Expression"/> tree for sub-trees that are evaluatable in-memory, and evaluates those sub-trees.
            </summary>
            <remarks>
            The <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.PartialEvaluatingExpressionTreeProcessor"/> uses the <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.PartialEvaluatingExpressionTreeVisitor"/> for partial evaluation.
            It performs two visiting runs over the <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </remarks>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor">
            <summary>
            <see cref="T:Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor"/> is implemented by classes that represent steps in the process of parsing the structure
            of an <see cref="T:System.Linq.Expressions.Expression"/> tree. <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> applies a series of these steps to the <see cref="T:System.Linq.Expressions.Expression"/>
            tree before analyzing the query operators and creating a <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
            <remarks>
            <para>
            There are predefined implementations of <see cref="T:Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor"/> that should only be left out when parsing an 
            <see cref="T:System.Linq.Expressions.Expression"/> tree when there are very good reasons to do so.
            </para>
            <para>
            <see cref="T:Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor"/> can be implemented to provide custom, complex transformations on an <see cref="T:System.Linq.Expressions.Expression"/>
            tree. For performance reasons, avoid adding too many steps each of which visits the whole tree. For
            simple transformations, consider using <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> and <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor"/> - which can
            batch several transformations into a single expression tree visiting run - rather than implementing a dedicated 
            <see cref="T:Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.MultiReplacingExpressionTreeVisitor">
            <summary>
            Replaces <see cref="T:System.Linq.Expressions.Expression"/> nodes according to a given mapping specification. Expressions are also replaced within subqueries; the 
            <see cref="T:Remotion.Linq.QueryModel"/> is changed by the replacement operations, it is not copied. The replacement node is not recursively searched for 
            occurrences of <see cref="T:System.Linq.Expressions.Expression"/> nodes to be replaced.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.MemberBindings.FieldInfoBinding">
            <summary>
            Represents a <see cref="T:System.Reflection.FieldInfo"/> being bound to an associated <see cref="T:System.Linq.Expressions.Expression"/> instance. This binding's 
            <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.MemberBindings.FieldInfoBinding.MatchesReadAccess(System.Reflection.MemberInfo)"/> method returns <see langword="true"/> only for the same <see cref="T:System.Reflection.FieldInfo"/> the expression is bound to.
            <seealso cref="T:System.Linq.Expressions.MemberBinding"/>
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.MemberBindings.MemberBinding">
            <summary>
            Represents a <see cref="T:System.Reflection.MemberInfo"/> being bound to an associated <see cref="T:System.Linq.Expressions.Expression"/> instance. This is used by the 
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.TransparentIdentifierRemovingExpressionTreeVisitor"/> to represent assignments in constructor calls such as <c>new AnonymousType (a = 5)</c>, 
            where <c>a</c> is the member of <c>AnonymousType</c> and <c>5</c> is the associated expression.
            The <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.MemberBindings.MemberBinding.MatchesReadAccess(System.Reflection.MemberInfo)"/> method can be used to check whether the member bound to an expression matches a given <see cref="T:System.Reflection.MemberInfo"/>
            (considering read access). See the subclasses for details.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.StreamedData.IStreamedData">
            <summary>
            Holds the data needed to represent the output or input of a part of a query in memory. This is mainly used for 
            <see cref="M:Remotion.Linq.Clauses.ResultOperatorBase.ExecuteInMemory(Remotion.Linq.Clauses.StreamedData.IStreamedData)"/>. The data held by implementations of this interface can be either a value or a sequence.
            </summary>
        </member>
        <member name="P:Remotion.Linq.Clauses.StreamedData.IStreamedData.DataInfo">
            <summary>
            Gets an object describing the data held by this <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedData"/> instance.
            </summary>
            <value>An <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo"/> object describing the data held by this <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedData"/> instance.</value>
        </member>
        <member name="P:Remotion.Linq.Clauses.StreamedData.IStreamedData.Value">
            <summary>
            Gets the value held by this <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedData"/> instance.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Remotion.Linq.Clauses.OrderByClause">
            <summary>
            Represents the orderby part of a query, ordering data items according to some <see cref="P:Remotion.Linq.Clauses.OrderByClause.Orderings"/>.
            </summary>
            <example>
            In C#, the whole "orderby" clause in the following sample (including two orderings) corresponds to an <see cref="T:Remotion.Linq.Clauses.OrderByClause"/>:
            <ode>
            var query = from s in Students
                        orderby s.Last, s.First
                        select s;
            </ode>
            </example>
        </member>
        <member name="T:Remotion.Linq.Clauses.IBodyClause">
            <summary>
            Represents a clause in a <see cref="T:Remotion.Linq.QueryModel"/>'s <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/> collection. Body clauses take the items generated by 
            the <see cref="P:Remotion.Linq.QueryModel.MainFromClause"/>, filtering (<see cref="T:Remotion.Linq.Clauses.WhereClause"/>), ordering (<see cref="T:Remotion.Linq.Clauses.OrderByClause"/>), augmenting 
            (<see cref="T:Remotion.Linq.Clauses.AdditionalFromClause"/>), or otherwise processing them before they are passed to the <see cref="P:Remotion.Linq.QueryModel.SelectClause"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.IBodyClause.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
            Accepts the specified visitor by calling one of its Visit... methods.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">The index of this clause in the <paramref name="queryModel"/>'s <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/> collection.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.IBodyClause.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
            Clones this clause, registering its clone with the <paramref name="cloneContext"/> if it is a query source clause.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Remotion.Linq.Clauses.CloneContext"/>.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.OrderByClause.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.OrderByClause"/> class.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.OrderByClause.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
            Accepts the specified visitor by calling its <see cref="M:Remotion.Linq.IQueryModelVisitor.VisitOrderByClause(Remotion.Linq.Clauses.OrderByClause,Remotion.Linq.QueryModel,System.Int32)"/> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">The index of this clause in the <paramref name="queryModel"/>'s <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/> collection.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.OrderByClause.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Transforms all the expressions in this clause and its child objects via the given <paramref name="transformation"/> delegate.
            </summary>
            <param name="transformation">The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression"/> within this
            clause, and those expressions will be replaced with what the delegate returns.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.OrderByClause.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
            Clones this clause.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Remotion.Linq.Clauses.CloneContext"/>.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="P:Remotion.Linq.Clauses.OrderByClause.Orderings">
            <summary>
            Gets the <see cref="T:Remotion.Linq.Clauses.Ordering"/> instances that define how to sort the items coming from previous clauses. The order of the 
            <see cref="P:Remotion.Linq.Clauses.OrderByClause.Orderings"/> in the collection defines their priorities. For example, { LastName, FirstName } would sort all items by
            LastName, and only those items that have equal LastName values would be sorted by FirstName.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterStatus">
             <summary>
             This class represents the ParameterStatus message sent from PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException">
            <summary>
            The exception that is thrown when the PostgreSQL backend reports errors.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.#ctor(System.Collections.IList)">
            <summary>
            Construct a backend error exception based on a list of one or more
            backend errors.  The basic Exception.Message will be built from the
            first (usually the only) error in the list.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.ToString">
            <summary>
            Format a .NET style exception string.
            Include all errors in the list, including any hints.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.AppendString(System.IO.StringWriter,System.String,System.String)">
            <summary>
            Append a line to the given Stream, first checking for zero-length.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.Item(System.Int32)">
            <summary>
            Provide access to the entire list of errors provided by the PostgreSQL backend.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.Severity">
            <summary>
            Severity code.  All versions.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.Code">
            <summary>
            Error code.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.BaseMessage">
            <summary>
            Basic error message.  All versions.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.Detail">
            <summary>
            Detailed error message.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.Hint">
            <summary>
            Suggestion to help resolve the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.Position">
            <summary>
            Position (one based) within the query string where the error was encounterd.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.Where">
            <summary>
            Trace back information.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.File">
            <summary>
            Source file (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.Line">
            <summary>
            Source file line number (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.Routine">
            <summary>
            Source routine (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.SchemaName">
            <summary>
            Schema name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.TableName">
            <summary>
            Table name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.ColumnName">
            <summary>
            Column name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.DataTypeName">
            <summary>
            Data type of column which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.ConstraintName">
            <summary>
            Constraint name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.ErrorSql">
            <summary>
            String containing the sql sent which produced this error.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlException.Errors">
            <summary>
            Returns the entire list of errors provided by the PostgreSQL backend.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlRowUpdatedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataAdapter.RowUpdated">RowUpdated</see> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlRowUpdatedEventArgs">NpgsqlRowUpdatedEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlRowUpdatingEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataAdapter.RowUpdating">RowUpdating</see> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlRowUpdatingEventArgs">NpgsqlRowUpdatingEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataAdapter">
            <summary>
            This class represents an adapter from many commands: select, update, insert and delete to fill <see cref="T:System.Data.DataSet">Datasets.</see>
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.LargeObjectManager">
            <summary>
            Summary description for LargeObjectManager.
            </summary>
        </member>
        <member name="T:Mono.Math.Prime.Generator.NextPrimeFinder">
            <summary>
            Finds the next prime after a given number.
            </summary>
        </member>
        <member name="M:Mono.Math.Prime.Generator.PrimeGeneratorBase.PostTrialDivisionTests(Mono.Math.BigInteger)">
            <summary>
            Performs primality tests on bi, assumes trial division has been done.
            </summary>
            <param name="bi">A BigInteger that has been subjected to and passed trial division</param>
            <returns>False if bi is composite, true if it may be prime.</returns>
            <remarks>The speed of this method is dependent on Confidence</remarks>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Util.Enforce">
            <summary>
            Helper methods used throughout the codebase.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.Enforce.ArgumentNotNull``1(``0,System.String)">
            <summary>
            Enforce that an argument is not null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="name"></param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.Enforce.ArgumentElementNotNull``1(``0,System.String)">
            <summary>
            Enforce that sequence does not contain null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.Enforce.NotNull``1(``0)">
            <summary>
            Enforces that the provided object is non-null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.Enforce.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Enforce that an argument is not null or empty. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
            <param name="value">The value.</param>
            <param name="description">The description.</param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.Enforce.ArgumentTypeIsFunction(System.Type)">
            <summary>
            Enforce that the argument is a delegate type.
            </summary>
            <param name="delegateType">The type to test.</param>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.PropertyWiringFlags">
            <summary>
            Options that can be applied when autowiring properties on a component. (Multiple options can
            be specified using bitwise 'or' - e.g. AllowCircularDependencies | PreserveSetValues.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.PropertyWiringFlags.Default">
            <summary>
            Default behavior. Circular dependencies are not allowed; existing non-default
            property values are overwritten.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.PropertyWiringFlags.AllowCircularDependencies">
            <summary>
            Allows property-property and property-constructor circular dependency wiring.
            This flag moves property wiring from the Activating to the Activated event.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.PropertyWiringFlags.PreserveSetValues">
            <summary>
            If specified, properties that already have a non-default value will be left
            unchanged in the wiring operation.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.GeneratedFactories.FactoryGenerator">
            <summary>
            Generates context-bound closures that represent factories from
            a set of heuristics based on delegate type signatures.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.GeneratedFactories.FactoryGenerator.#ctor(System.Type,Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Features.GeneratedFactories.ParameterMapping)">
            <summary>
            Create a factory generator.
            </summary>
            <param name="service">The service that will be activated in
            order to create the products of the factory.</param>
            <param name="delegateType">The delegate to provide as a factory.</param>
            <param name="parameterMapping">The parameter mapping mode to use.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.GeneratedFactories.FactoryGenerator.#ctor(System.Type,Revenj.Extensibility.Autofac.Features.GeneratedFactories.ParameterMapping)">
            <summary>
            Create a factory generator.
            </summary>
            <param name="delegateType">The delegate to provide as a factory.</param>
            <param name="parameterMapping">The parameter mapping mode to use.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.GeneratedFactories.FactoryGenerator.GenerateFactory(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Core.IComponentRegistration,Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
            <param name="service">Service which is resolving</param>
            <param name="context">The context in which the factory will be used.</param>
            <param name="registration">Component registration</param>
            <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
            <returns>A factory delegate that will work within the context.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.GeneratedFactories.FactoryGenerator.GenerateFactory``1(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Core.IComponentRegistration,Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
            <param name="service">Service which is resolving</param>
            <param name="registration">Component registration</param>
            <param name="context">The context in which the factory will be used.</param>
            <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
            <returns>A factory delegate that will work within the context.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupBeginningEventArgs">
            <summary>
            Fired when instance lookup is complete.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupBeginningEventArgs.#ctor(Revenj.Extensibility.Autofac.Core.Resolving.IInstanceLookup)">
            <param name="instanceLookup">The instance lookup that is ending.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupBeginningEventArgs.InstanceLookup">
            <summary>
            The instance lookup operation that is beginning.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Resolving.IInstanceLookup">
            <summary>
            Represents the process of finding a component during a resolve operation.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Resolving.IInstanceLookup.ComponentRegistration">
            <summary>
            The component for which an instance is to be looked up.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Resolving.IInstanceLookup.ActivationScope">
            <summary>
            The scope in which the instance will be looked up.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Resolving.IInstanceLookup.Parameters">
            <summary>
            The parameters provided for new instance creation.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Resolving.IInstanceLookup.Factory">
            <summary>
            Factory to create an instance
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Resolving.IInstanceLookup.Preparing">
            <summary>
            Preparing instance
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Resolving.IInstanceLookup.Activating">
            <summary>
            Activating instance
            </summary>
        </member>
        <member name="E:Revenj.Extensibility.Autofac.Core.Resolving.IInstanceLookup.SharedInstanceActivation">
            <summary>
            When shared instance is activated
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Activators.Delegate.DelegateActivator">
            <summary>
            Activate instances using a delegate.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Activators.InstanceActivator">
            <summary>
            Base class for instance activators.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.InstanceActivator.#ctor(System.Type)">
            <summary>
            Create an instance activator that will return instances compatible
            with <paramref name="limitType"/>.
            </summary>
            <param name="limitType">Most derived type to which instances can be cast.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.InstanceActivator.ToString">
            <summary>
            Gets a string representation of the activator.
            </summary>
            <returns>A string describing the activator.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Activators.InstanceActivator.LimitType">
            <summary>
            The most specific type that the component instances are known to be castable to.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.IInstanceActivator">
            <summary>
            Activates component instances.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IInstanceActivator.GetFactory(Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Activate an instance in the provided context.
            </summary>
            <param name="context">Context in which to activate instances.</param>
            <param name="parameters">Parameters to the instance.</param>
            <returns>The activated instance.</returns>
            <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IInstanceActivator.LimitType">
            <summary>
            The most specific type that the component instances are known to be castable to.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Delegate.DelegateActivator.#ctor(System.Type,System.Func{Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.Object})">
            <summary>
            Create a delegate activator.
            </summary>
            <param name="limitType">The most specific type to which activated instances can be cast.</param>
            <param name="activationFunction">Activation delegate.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Delegate.DelegateActivator.GetFactory(Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Activate an instance in the provided context.
            </summary>
            <param name="context">Context in which to activate instances.</param>
            <param name="parameters">Parameters to the instance.</param>
            <returns>The activated instance.</returns>
            <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.PropertyElementCollection">
            <summary>
            Collection of property elements.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.PropertyElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Configuration.PropertyElementCollection"/> class.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.PropertyElementCollection.ToParameters">
            <summary>
            Convert to the Autofac parameter type.
            </summary>
            <returns>The parameters represented by this collection.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.IHideObjectMembers">
            <summary>
            Hides standard Object members to make fluent interfaces
            easier to read.
            Based on blog post by @kzu here:
            http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IHideObjectMembers.GetType">
            <summary>
            Standard System.Object member.
            </summary>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IHideObjectMembers.GetHashCode">
            <summary>
            Standard System.Object member.
            </summary>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IHideObjectMembers.ToString">
            <summary>
            Standard System.Object member.
            </summary>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.IHideObjectMembers.Equals(System.Object)">
            <summary>
            Standard System.Object member.
            </summary>
            <param name="other">The other.</param>
            <returns>Standard result.</returns>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SumExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for the different overloads of <see cref="O:System.Linq.Queryable.Sum"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.LongCountExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})"/>,
            <see cref="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/>,
            and for the <see cref="P:System.Array.Length"/> property of arrays.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.GroupByExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for the different <see cref="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> 
            overloads that do not take a result selector. The overloads with a result selector are represented by 
            <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.GroupByWithResultSelectorExpressionNode"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.DistinctExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it usually follows (or replaces) a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectExpressionNode"/> of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that 
            represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.NullExpressionTreeProcessor">
            <summary>
            Implements the <see cref="T:Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor"/> interface by doing nothing in the <see cref="M:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.NullExpressionTreeProcessor.Process(System.Linq.Expressions.Expression)"/> method. This is an
            implementation of the Null Object Pattern.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser">
            <summary>
            Parses an expression tree into a chain of <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> objects after executing a sequence of 
            <see cref="T:Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor"/> objects.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.CreateDefaultNodeTypeProvider">
            <summary>
            Creates a default <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider"/> that already has all expression node parser defined by the re-linq assembly 
            registered. Users can add inner providers to register their own expression node parsers.
            </summary>
            <returns>A default <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider"/> that already has all expression node parser defined by the re-linq assembly 
            registered.</returns>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.CreateDefaultProcessor(Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTranformationProvider)">
            <summary>
            Creates a default <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor"/> that already has the expression tree processing steps defined by the re-linq assembly
            registered. Users can insert additional processing steps.
            </summary>
            <param name="tranformationProvider">The tranformation provider to be used by the <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor"/> included
            in the result set. Use <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry.CreateDefault"/> to create a default provider.</param>
            <returns>
            A default <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor"/> that already has all expression tree processing steps defined by the re-linq assembly
            registered.
            </returns>
            <remarks>
            The following steps are included:
            <list type="bullet">
            		<item><see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.PartialEvaluatingExpressionTreeProcessor"/></item>
            		<item><see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor"/> (parameterized with <paramref name="tranformationProvider"/>)</item>
            	</list>
            </remarks>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.#ctor(Remotion.Linq.Parsing.Structure.INodeTypeProvider,Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> class with a custom <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider"/> and 
            <see cref="T:Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor"/> implementation.
            </summary>
            <param name="nodeTypeProvider">The <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider"/> to use when parsing <see cref="T:System.Linq.Expressions.Expression"/> trees. Use 
            <see cref="M:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.CreateDefaultNodeTypeProvider"/> to create an instance of <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider"/> that already includes all
            default node types. (The <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider"/> can be customized as needed by adding or removing 
            <see cref="P:Remotion.Linq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider.InnerProviders"/>).</param>
            <param name="processor">The <see cref="T:Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor"/> to apply to <see cref="T:System.Linq.Expressions.Expression"/> trees before parsing their nodes. Use
            <see cref="M:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.CreateDefaultProcessor(Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTranformationProvider)"/> to create an instance of <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor"/> that already includes
            the default steps. (The <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor"/> can be customized as needed by adding or removing 
            <see cref="P:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor.InnerProcessors"/>).</param>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.ParseTree(System.Linq.Expressions.Expression)">
            <summary>
            Parses the given <paramref name="expressionTree"/> into a chain of <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> instances, using 
            <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry"/> to convert expressions to nodes.
            </summary>
            <param name="expressionTree">The expression tree to parse.</param>
            <returns>A chain of <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> instances representing the <paramref name="expressionTree"/>.</returns>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.GetQueryOperatorExpression(System.Linq.Expressions.Expression)">
            <summary>
            Gets the query operator <see cref="T:System.Linq.Expressions.MethodCallExpression"/> represented by <paramref name="expression"/>. If <paramref name="expression"/>
            is already a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>, that is the assumed query operator. If <paramref name="expression"/> is a 
            <see cref="T:System.Linq.Expressions.MemberExpression"/> and the member's getter is registered with <see cref="P:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.NodeTypeProvider"/>, a corresponding 
            <see cref="T:System.Linq.Expressions.MethodCallExpression"/> is constructed and returned. Otherwise, <see langword="null"/> is returned.
            </summary>
            <param name="expression">The expression to get a query operator expression for.</param>
            <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"/> to be parsed as a query operator, or <see langword="null"/> if the expression does not represent
            a query operator.</returns>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.InferAssociatedIdentifierForSource(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Infers the associated identifier for the source expression node contained in methodCallExpression.Arguments[0]. For example, for the
            call chain "<c>source.Where (i => i > 5)</c>" (which actually reads "<c>Where (source, i => i > 5</c>"), the identifier "i" is associated
            with the node generated for "source". If no identifier can be inferred, <see langword="null"/> is returned.
            </summary>
        </member>
        <member name="P:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.NodeTypeProvider">
            <summary>
            Gets the node type provider used to parse <see cref="T:System.Linq.Expressions.MethodCallExpression"/> instances in <see cref="M:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.ParseTree(System.Linq.Expressions.Expression)"/>.
            </summary>
            <value>The node type provider.</value>
        </member>
        <member name="P:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.Processor">
            <summary>
            Gets the processing steps used by <see cref="M:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.ParseTree(System.Linq.Expressions.Expression)"/> to process the <see cref="T:System.Linq.Expressions.Expression"/> tree before analyzing its structure.
            </summary>
            <value>The processing steps.</value>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.InvocationOfLambdaExpressionTransformer">
            <summary>
            Detects expressions invoking a <see cref="T:System.Linq.Expressions.LambdaExpression"/> and replaces them with the body of that 
            <see cref="T:System.Linq.Expressions.LambdaExpression"/> (with the parameter references replaced with the invocation arguments).
            Providers use this transformation to be able to handle queries with <see cref="T:System.Linq.Expressions.InvocationExpression"/> instances.
            </summary>
            <remarks>
            When the <see cref="T:System.Linq.Expressions.InvocationExpression"/> is applied to a delegate instance (rather than a 
            <see cref="T:System.Linq.Expressions.LambdaExpression"/>), the <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.InvocationOfLambdaExpressionTransformer"/> ignores it.
            </remarks>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1">
            <summary>
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> is implemented by classes that transform <see cref="T:System.Linq.Expressions.Expression"/> instances. The 
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry"/> manages registration of <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> instances, and the 
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.TransformingExpressionTreeVisitor"/> applies the transformations.
            </summary>
            <typeparam name="T">The type of expressions handled by this <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> implementation.</typeparam>
            <remarks>
            <para>
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> is a convenience interface that provides strong typing, whereas 
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformation"/> only operates on <see cref="T:System.Linq.Expressions.Expression"/> instances. 
            </para>
            <para>
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> can be used together with the <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.TransformingExpressionTreeVisitor"/> class by using the 
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry"/> class as the transformation provider. <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry"/> converts 
            strongly typed <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> instances to weakly typed <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformation"/> delegate instances.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1.Transform(`0)">
            <summary>
            Transforms a given <see cref="T:System.Linq.Expressions.Expression"/>. If the implementation can handle the <see cref="T:System.Linq.Expressions.Expression"/>,
            it should return a new, transformed <see cref="T:System.Linq.Expressions.Expression"/> instance. Otherwise, it should return the input
            <paramref name="expression"/> instance.
            </summary>
            <param name="expression">The expression to be transformed.</param>
            <returns>The result of the transformation, or <paramref name="expression"/> if no transformation was applied.</returns>
        </member>
        <member name="P:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1.SupportedExpressionTypes">
            <summary>
            Gets the expression types supported by this <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/>.
            </summary>
            <value>The supported expression types. Return <see langword="null"/> to support all expression types. (This is only sensible when
            <typeparamref name="T"/> is <see cref="T:System.Linq.Expressions.Expression"/>.)
            </value>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTranformationProvider">
            <summary>
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTranformationProvider"/> defines an API for classes returning <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformation"/> instances for specific 
            <see cref="T:System.Linq.Expressions.Expression"/> objects. Usually, the <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry"/> will be used when an implementation of this
            interface is needed.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTranformationProvider.GetTransformations(System.Linq.Expressions.Expression)">
            <summary>
            Gets the transformers for the given <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression"/> to be transformed.</param>
            <returns>
            A sequence containing <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformation"/> objects that should be applied to the <paramref name="expression"/>. Must not
            be <see langword="null"/>.
            </returns>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.SubQueryFindingExpressionTreeVisitor">
            <summary>
            Preprocesses an expression tree for parsing. The preprocessing involves detection of sub-queries and VB-specific expressions.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.UnionResultOperator">
            <summary>
            Represents forming the mathematical union of  a given set of items and the items returned by a query. 
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Union" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.UnionResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).Union(students2);
            </code>
            </example>
        </member>
        <member name="T:Remotion.Linq.Clauses.IQuerySource">
            <summary>
            Represents a clause or result operator that generates items which are streamed to the following clauses or operators.
            </summary>
        </member>
        <member name="P:Remotion.Linq.Clauses.IQuerySource.ItemName">
            <summary>
            Gets the name of the items generated by this <see cref="T:Remotion.Linq.Clauses.IQuerySource"/>.
            </summary>
            <remarks>
            Item names are inferred when a query expression is parsed, and they usually correspond to the variable names present in that expression. 
            However, note that names are not necessarily unique within a <see cref="T:Remotion.Linq.QueryModel"/>. Use names only for readability and debugging, not for 
            uniquely identifying <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> objects. To match an <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> with its references, use the 
            <see cref="P:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource"/> property rather than the <see cref="P:Remotion.Linq.Clauses.IQuerySource.ItemName"/>.
            </remarks>
        </member>
        <member name="P:Remotion.Linq.Clauses.IQuerySource.ItemType">
            <summary>
            Gets the type of the items generated by this <see cref="T:Remotion.Linq.Clauses.IQuerySource"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.UnionResultOperator.GetConstantSource2">
            <summary>
            Gets the value of <see cref="P:Remotion.Linq.Clauses.ResultOperators.UnionResultOperator.Source2"/>, assuming <see cref="P:Remotion.Linq.Clauses.ResultOperators.UnionResultOperator.Source2"/> holds a <see cref="T:System.Linq.Expressions.ConstantExpression"/>. If it doesn't,
            an Exception is thrown.
            </summary>
            <returns>The constant value of <see cref="P:Remotion.Linq.Clauses.ResultOperators.UnionResultOperator.Source2"/>.</returns>
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.UnionResultOperator.Source2">
            <summary>
            Gets or sets the second source of this result operator, that is, an enumerable containing the items united with the input sequence.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.TakeResultOperator">
            <summary>
            Represents taking only a specific number of items returned by a query. 
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Take" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.TakeResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).Take(3);
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.TakeResultOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.ResultOperators.TakeResultOperator"/>.
            </summary>
            <param name="count">The number of elements which should be returned.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.TakeResultOperator.GetConstantCount">
            <summary>
            Gets the constant <see cref="T:System.Int32"/> value of the <see cref="P:Remotion.Linq.Clauses.ResultOperators.TakeResultOperator.Count"/> property, assuming it is a <see cref="T:System.Linq.Expressions.ConstantExpression"/>. If it is
            not, an expression is thrown.
            </summary>
            <returns>The constant <see cref="T:System.Int32"/> value of the <see cref="P:Remotion.Linq.Clauses.ResultOperators.TakeResultOperator.Count"/> property.</returns>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.ChoiceResultOperatorBase">
            <summary>
            Represents a <see cref="T:Remotion.Linq.Clauses.ResultOperators.ValueFromSequenceResultOperatorBase"/> that is executed on a sequence, choosing a single item for its result.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator">
            <summary>
            Represents aggregating the items returned by a query into a single value with an initial seeding value.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Aggregate" call in the following example corresponds to an <see cref="T:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator"/>.
            <code>
            var result = (from s in Students
                         select s).Aggregate(0, (totalAge, s) =&gt; totalAge + s.Age);
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator"/> class.
            </summary>
            <param name="seed">The seed expression.</param>
            <param name="func">The aggregating function. This is a <see cref="T:System.Linq.Expressions.LambdaExpression"/> taking a parameter that represents the value accumulated so 
            far and returns a new accumulated value. This is a resolved expression, i.e. items streaming in from prior clauses and result operators
            are represented as expressions containing <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> nodes.</param>
            <param name="optionalResultSelector">The result selector, can be <see langword="null"/>.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator.GetConstantSeed``1">
            <summary>
            Gets the constant value of the <see cref="P:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator.Seed"/> property, assuming it is a <see cref="T:System.Linq.Expressions.ConstantExpression"/>. If it is
            not, an <see cref="T:System.InvalidOperationException"/> is thrown.
            </summary>
            <typeparam name="T">The expected seed type. If the item is not of this type, an <see cref="T:System.InvalidOperationException"/> is thrown.</typeparam>
            <returns>The constant value of the <see cref="P:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator.Seed"/> property.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator.ExecuteInMemory``1(Remotion.Linq.Clauses.StreamedData.StreamedSequence)">
            <inheritdoc cref="M:Remotion.Linq.Clauses.ResultOperatorBase.ExecuteInMemory(Remotion.Linq.Clauses.StreamedData.IStreamedData)"/>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator.ExecuteAggregateInMemory``3(Remotion.Linq.Clauses.StreamedData.StreamedSequence)">
            <summary>
            Executes the aggregating operation in memory.
            </summary>
            <typeparam name="TInput">The type of the source items.</typeparam>
            <typeparam name="TAggregate">The type of the aggregated items.</typeparam>
            <typeparam name="TResult">The type of the result items.</typeparam>
            <param name="input">The input sequence.</param>
            <returns>A <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedValue"/> object holding the aggregated value.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator.Clone(Remotion.Linq.Clauses.CloneContext)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator.GetOutputDataInfo(Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator.ToString">
            <inheritdoc />
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator.Func">
            <summary>
            Gets or sets the aggregating function. This is a <see cref="T:System.Linq.Expressions.LambdaExpression"/> taking a parameter that represents the value accumulated so 
            far and returns a new accumulated value. This is a resolved expression, i.e. items streaming in from prior clauses and result operators
            are represented as expressions containing <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> nodes.
            </summary>
            <value>The aggregating function.</value>
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator.Seed">
            <summary>
            Gets or sets the seed of the accumulation. This is an <see cref="T:System.Linq.Expressions.Expression"/> denoting the starting value of the aggregation.
            </summary>
            <value>The seed of the accumulation.</value>
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.AggregateFromSeedResultOperator.OptionalResultSelector">
            <summary>
            Gets or sets the result selector. This is a <see cref="T:System.Linq.Expressions.LambdaExpression"/> applied after the aggregation to select the final value.
            Can be <see langword="null"/>.
            </summary>
            <value>The result selector.</value>
        </member>
        <member name="T:Remotion.Linq.Clauses.ExpressionTreeVisitors.AccessorFindingExpressionTreeVisitor">
            <summary>
            Constructs a <see cref="T:System.Linq.Expressions.LambdaExpression"/> that is able to extract a specific simple expression from a complex <see cref="T:System.Linq.Expressions.NewExpression"/>
            or <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
            <example>
            <para>
            For example, consider the task of determining the value of a specific query source [s] from an input value corresponding to a complex 
            expression. This <see cref="T:Remotion.Linq.Clauses.ExpressionTreeVisitors.AccessorFindingExpressionTreeVisitor"/> will return a <see cref="T:System.Linq.Expressions.LambdaExpression"/> able to perform this task.
            </para>
            <para>
            <list type="bullet">
            <item>If the complex expression is [s], it will simply return input =&gt; input.</item>
            <item>If the complex expression is new { a = [s], b = "..." }, it will return input =&gt; input.a.</item>
            <item>If the complex expression is new { a = new { b = [s], c = "..." }, d = "..." }, it will return input =&gt; input.a.b.</item>
            </list>
            </para>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ExpressionTreeVisitors.AccessorFindingExpressionTreeVisitor.FindAccessorLambda(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Constructs a <see cref="T:System.Linq.Expressions.LambdaExpression"/> that is able to extract a specific simple <paramref name="searchedExpression"/> from a 
            complex <paramref name="fullExpression"/>.
            </summary>
            <param name="searchedExpression">The expression an accessor to which should be created.</param>
            <param name="fullExpression">The full expression containing the <paramref name="searchedExpression"/>.</param>
            <param name="inputParameter">The input parameter to be used by the resulting lambda. Its type must match the type of <paramref name="fullExpression"/>.</param>
            <remarks>The <see cref="T:Remotion.Linq.Clauses.ExpressionTreeVisitors.AccessorFindingExpressionTreeVisitor"/> compares the <paramref name="searchedExpression"/> via reference equality,
            which means that exactly the same expression reference must be contained by <paramref name="fullExpression"/> for the visitor to return the
            expected result. In addition, the visitor can only provide accessors for expressions nested in <see cref="T:System.Linq.Expressions.NewExpression"/> or 
            <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.</remarks>
            <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"/> acting as an accessor for the <paramref name="searchedExpression"/> when an input matching 
            <paramref name="fullExpression"/> is given.
            </returns>
        </member>
        <member name="T:Remotion.Linq.Clauses.CloneContext">
            <summary>
            Aggregates all objects needed in the process of cloning a <see cref="T:Remotion.Linq.QueryModel"/> and its clauses.
            </summary>
        </member>
        <member name="P:Remotion.Linq.Clauses.CloneContext.QuerySourceMapping">
            <summary>
            Gets the clause mapping used during the cloning process. This is used to adjust the <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> instances
            of clauses to point to clauses in the cloned <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ThrowingExpressionTreeVisitor">
            <summary>
            Implements an <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitor"/> that throws an exception for every expression type that is not explicitly supported.
            Inherit from this class to ensure that an exception is thrown when an expression is passed 
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.ThrowingExpressionTreeVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})">
            <summary>
            Called when an unhandled item is visited. This method provides the item the visitor cannot handle (<paramref name="unhandledItem"/>), 
            the <paramref name="visitMethod"/> that is not implemented in the visitor, and a delegate that can be used to invoke the 
            <paramref name="baseBehavior"/> of the <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitor"/> class. The default behavior of this method is to call the
            <see cref="M:Remotion.Linq.Parsing.ThrowingExpressionTreeVisitor.CreateUnhandledItemException``1(``0,System.String)"/> method, but it can be overridden to do something else.
            </summary>
            <typeparam name="TItem">The type of the item that could not be handled. Either an <see cref="T:System.Linq.Expressions.Expression"/> type, a <see cref="T:System.Linq.Expressions.MemberBinding"/> 
            type, or <see cref="T:System.Linq.Expressions.ElementInit"/>.</typeparam>
            <typeparam name="TResult">The result type expected for the visited <paramref name="unhandledItem"/>.</typeparam>
            <param name="unhandledItem">The unhandled item.</param>
            <param name="visitMethod">The visit method that is not implemented.</param>
            <param name="baseBehavior">The behavior exposed by <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitor"/> for this item type.</param>
            <returns>An object to replace <paramref name="unhandledItem"/> in the expression tree. Alternatively, the method can throw any exception.</returns>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction">
            <summary>
            Represents a transaction to be made in a PostgreSQL database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction.Commit">
            <summary>
            Commits the database transaction.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction.Rollback">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction.Rollback(System.String)">
            <summary>
            Rolls back a transaction from a pending savepoint state.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction.Save(System.String)">
            <summary>
            Creates a transaction save point.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction.Cancel">
            <summary>
            Cancel the transaction without telling the backend about it.  This is
            used to make the transaction go away when closing a connection.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction.Connection">
            <summary>
            Gets the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">NpgsqlConnection</see>
            object associated with the transaction, or a null reference if the
            transaction is no longer valid.
            </summary>
            <value>The <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">NpgsqlConnection</see>
            object associated with the transaction.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction.IsolationLevel">
            <summary>
            Specifies the <see cref="T:System.Data.IsolationLevel">IsolationLevel</see> for this transaction.
            </summary>
            <value>The <see cref="T:System.Data.IsolationLevel">IsolationLevel</see> for this transaction.
            The default is <b>ReadCommitted</b>.</value>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader">
            <summary>
            Provides a means of reading a forward-only stream of rows from a PostgreSQL backend.  This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Return the data type name of the column at index <param name="Index"></param>.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetFieldType(System.Int32)">
            <summary>
            Return the data type of the column at index <param name="Index"></param>.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetProviderSpecificFieldType(System.Int32)">
            <summary>
            Return the Npgsql specific data type of the column at requested ordinal.
            </summary>
            <param name="ordinal">column position</param>
            <returns>Appropriate Npgsql type for column.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetName(System.Int32)">
            <summary>
            Return the column name of the column at index <param name="Index"></param>.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetDataTypeOID(System.Int32)">
            <summary>
            Return the data type OID of the column at index <param name="Index"></param>.
            </summary>
            FIXME: Why this method returns String?
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetOrdinal(System.String)">
            <summary>
            Return the column name of the column named <param name="Name"></param>.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetFieldDbType(System.Int32)">
            <summary>
            Return the data DbType of the column at index <param name="Index"></param>.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetFieldNpgsqlDbType(System.Int32)">
            <summary>
            Return the data NpgsqlDbType of the column at index <param name="Index"></param>.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetInterval(System.Int32)">
            <summary>
            Get the value of a column as a <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>.
            <remarks>If the differences between <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> and <see cref="!:System.Timespan"/>
            in handling of days and months is not important to your application, use <see cref="!:GetTimeSpan()"/>
            instead.</remarks>
            </summary>
            <param name="i">Index of the field to find.</param>
            <returns><see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> value of the field.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of a column converted to a Guid.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of a column as Int16.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of a column as Int32.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of a column as Int64.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of a column as Single.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of a column as Double.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of a column as String.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of a column as Decimal.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetTimeSpan(System.Int32)">
            <summary>
            Gets the value of a column as TimeSpan.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetValues(System.Object[])">
            <summary>
            Copy values from each column in the current row into <param name="Values"></param>.
            </summary>
            <returns>The number of column values copied.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetProviderSpecificValues(System.Object[])">
            <summary>
            Copy values from each column in the current row into <param name="Values"></param>.
            </summary>
            <param name="values">An array appropriately sized to store values from all columns.</param>
            <returns>The number of column values copied.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of a column as Boolean.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of a column as Byte.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of a column as Char.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of a column as DateTime.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetSchemaTable">
            <summary>
            Returns a System.Data.DataTable that describes the column metadata of the DataReader.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetTableNameFromQuery">
            <summary>
             This methods parses the command text and tries to get the tablename
             from it.
            </summary>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.ReaderClosed">
            <summary>
            Is raised whenever Close() is called.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.Item(System.Int32)">
            <summary>
            Gets the value of a column in its native format.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.Item(System.String)">
            <summary>
            Gets the value of a column in its native format.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.  Always returns zero.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.KeyLookup.primaryKey">
            <summary>
            Contains the column names as the keys
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.KeyLookup.uniqueColumns">
            <summary>
            Contains all unique columns
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader">
            <summary>
            This is the primary implementation of NpgsqlDataReader. It is the one used in normal cases (where the 
            preload-reader option is not set in the connection string to resolve some potential backwards-compatibility
            issues), the only implementation used internally, and in cases where CachingDataReader is used, it is still
            used to do the actual "leg-work" of turning a response stream from the server into a datareader-style
            object - with CachingDataReader then filling it's cache from here.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.IStreamOwner">
            <summary>
            Marker interface which identifies a class which may take possession of a stream for the duration of
            it's lifetime (possibly temporarily giving that possession to another class for part of that time.
            
            It inherits from IDisposable, since any such class must make sure it leaves the stream in a valid state.
            
            The most important such class is that compiler-generated from ProcessBackendResponsesEnum. Of course
            we can't make that inherit from this interface, alas.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Revenj.DatabasePersistence.Postgres.Npgsql.IServerResponseObject" -->
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader.GetNextResponseObject">
            <summary>
            Iterate through the objects returned through from the server.
            If it's a CompletedResponse the rowsaffected count is updated appropriately,
            and we iterate again, otherwise we return it (perhaps updating our cache of pending
            rows if appropriate).
            </summary>
            <returns>The next <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.IServerResponseObject"/> we will deal with.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader.GetNextRowDescription">
            <summary>
            Advances the data reader to the next result, when multiple result sets were returned by the PostgreSQL backend.
            </summary>
            <returns>True if the reader was advanced, otherwise false.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">NpgsqlCommand</see>.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader.Close">
            <summary>
            Closes the data reader object.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when multiple result sets were returned by the PostgreSQL backend.
            </summary>
            <returns>True if the reader was advanced, otherwise false.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader.Read">
            <summary>
            Advances the data reader to the next row.
            </summary>
            <returns>True if the reader was advanced, otherwise false.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader.GetValue(System.Int32)">
            <summary>
            Return the value of the column at index <param name="Index"></param>.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets raw data from a column.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets raw data from a column.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader.IsDBNull(System.Int32)">
            <summary>
            Report whether the value in a column is DBNull.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.ForwardsOnlyDataReader.HasRows">
            <summary>
            Indicates if NpgsqlDatareader has rows to be read.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.CachingDataReader">
            <summary>
            <para>Provides an implementation of NpgsqlDataReader in which all data is pre-loaded into memory.
            This operates by first creating a ForwardsOnlyDataReader as usual, and then loading all of it's
            Rows into memory. There is a general principle that when there is a trade-off between a class design that
            is more efficient and/or scalable on the one hand and one that is less efficient but has more functionality
            (in this case the internal-only functionality of caching results) that one can build the less efficent class
            from the most efficient without significant extra loss in efficiency, but not the other way around. The relationship
            between ForwardsOnlyDataReader and CachingDataReader is an example of this).</para>
            <para>Since the interface presented to the user is still forwards-only, queues are used to
            store this information, so that dequeueing as we go we give the garbage collector the best opportunity
            possible to reclaim any memory that is no longer in use.</para>
            <para>ForwardsOnlyDataReader being used to actually
            obtain the information from the server means that the "leg-work" is still only done (and need only be
            maintained) in one place.</para>
            <para>This class exists to allow for certain potential backwards-compatibility issues to be resolved
            with little effort on the part of affected users. It is considerably less efficient than ForwardsOnlyDataReader
            and hence never used internally.</para>
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlStartupPacket">
             <summary>
             This class represents a StartupPacket message of PostgreSQL
             protocol.
             </summary>
            
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlFlush">
             <summary>
             This class represents the Parse message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Revenj.TreePath">
            <summary>
            Structure for hierarchical modeling.
            Supports labels separated by dots. Only alphanumeric values allowed for labels.
            eg: Level1.Level2.Level3
            </summary>
        </member>
        <member name="F:Revenj.TreePath.Empty">
            <summary>
            Empty path
            </summary>
        </member>
        <member name="M:Revenj.TreePath.#ctor(System.String)">
            <summary>
            Construct path from string value, eg: top.middle.bottom
            </summary>
            <param name="path">string representation</param>
        </member>
        <member name="M:Revenj.TreePath.Create(System.String)">
            <summary>
            Create path from string value, eg: top.middle.bottom
            </summary>
            <param name="path">string representation</param>
            <returns>TreePath instance</returns>
        </member>
        <member name="M:Revenj.TreePath.GetHashCode">
            <summary>
            Hash code is calculated of string representation
            </summary>
            <returns>string value hash code</returns>
        </member>
        <member name="M:Revenj.TreePath.Equals(System.Object)">
            <summary>
            Check for equality. Same as checking for string representation equality.
            </summary>
            <param name="obj">string or TreePath</param>
            <returns>is string representation equal</returns>
        </member>
        <member name="M:Revenj.TreePath.ToString">
            <summary>
            Return string representation of the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revenj.TreePath.op_Implicit(Revenj.TreePath)~System.String">
            <summary>
            Implicit conversion to string. Same as calling .ToString()
            </summary>
            <param name="path">TreePath structure</param>
            <returns>string representation.</returns>
        </member>
        <member name="M:Revenj.TreePath.op_Implicit(System.String)~Revenj.TreePath">
            <summary>
            Implicit conversion to TreePath. Same as calling new TreePath(string)
            </summary>
            <param name="path">string value</param>
            <returns>TreePath structure</returns>
        </member>
        <member name="M:Revenj.TreePath.op_Addition(Revenj.TreePath,Revenj.TreePath)">
            <summary>
            Concatenate two paths
            </summary>
            <param name="left">parent path</param>
            <param name="right">child path</param>
            <returns>combined path</returns>
        </member>
        <member name="M:Mono.Math.Prime.PrimalityTests.RabinMillerTest(Mono.Math.BigInteger,Mono.Math.Prime.ConfidenceFactor)">
            <summary>
                Probabilistic prime test based on Rabin-Miller's test
            </summary>
            <param name="n" type="BigInteger.BigInteger">
                <para>
                    The number to test.
                </para>
            </param>
            <param name="confidence" type="int">
                <para>
            The number of chosen bases. The test has at least a
            1/4^confidence chance of falsely returning True.
                </para>
            </param>
            <returns>
            <para>
            	True if "this" is a strong pseudoprime to randomly chosen bases.
            </para>
            <para>
            	False if "this" is definitely NOT prime.
            </para>
            </returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.SequenceExtensions.JoinWith(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins the strings into one single string interspersing the elements with the separator (a-la
            System.String.Join()).
            </summary>
            <param name="elements">The elements.</param>
            <param name="separator">The separator.</param>
            <returns>The joined string.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.SequenceExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the item to the specified sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">The sequence.</param>
            <param name="trailingItem">The trailing item.</param>
            <returns></returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.SequenceExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends the item to the specified sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">The sequence.</param>
            <param name="leadingItem">The leading item.</param>
            <returns></returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.ILifetimeScope">
            <summary>
            An <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/> tracks the instantiation of component instances.
            It defines a boundary in which instances are shared and configured.
            Disposing an <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/> will dispose the components that were
            resolved through it.
            </summary>
            <example>
            <code>
            // See IContainer for definition of the container variable
            using (var requestScope = container.BeginLifetimeScope())
            {
                // Note that handler is resolved from requestScope, not
                // from the container:
                
                var handler = requestScope.Resolve&lt;IRequestHandler&gt;();
                handler.Handle(request);
                
                // When requestScope is disposed, all resources used in processing
                // the request will be released.
            }
            </code>
            </example>
            <remarks>
            All long-running applications should resolve components via an
            <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>. Choosing the duration of the lifetime is application-
            specific. The standard Autofac WCF and ASP.NET/MVC integrations are already configured
            to create and release <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>s as appropriate. For example, the
            ASP.NET integration will create and release an <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/> per HTTP
            request.
            Most <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/> functionality is provided by extension methods
            on the inherited <see cref="T:Revenj.Extensibility.Autofac.IComponentContext"/> interface.
            </remarks>
            <seealso cref="T:Revenj.Extensibility.Autofac.IContainer"/>
            <seealso cref="T:Revenj.Extensibility.Autofac.IComponentContext"/>
            <seealso cref="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object)"/>
            <seealso cref="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.InstancePerLifetimeScope"/>
            <seealso cref="T:Revenj.Extensibility.Autofac.Core.InstanceSharing"/>
            <seealso cref="T:Revenj.Extensibility.Autofac.Core.IComponentLifetime"/>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.IComponentContext">
            <summary>
            The context in which a service can be accessed or a component's
            dependencies resolved. Disposal of a context will dispose any owned
            components.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.IComponentContext.ResolveLookup(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Resolve an factory of the provided registration within the context.
            </summary>
            <param name="service">Service which is trying to be resolved</param>
            <param name="registration">The registration.</param>
            <param name="parameters">Parameters for the instance.</param>
            <returns>
            The component factory.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.IComponentContext.ComponentRegistry">
            <summary>
            Associates services with the components that provide them.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ILifetimeScope.BeginLifetimeScope">
            <summary>
            Begin a new nested scope. Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ILifetimeScope.BeginLifetimeScope(System.Object)">
            <summary>
            Begin a new nested scope. Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ILifetimeScope.BeginLifetimeScope(System.Action{Revenj.Extensibility.Autofac.ContainerBuilder})">
            <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <remarks>
            The components registered in the sub-scope will be treated as though they were
            registered in the root scope, i.e., SingleInstance() components will live as long
            as the root scope.
            </remarks>
            <param name="configurationAction">Action on a <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>
            that adds component registations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ILifetimeScope.BeginLifetimeScope(System.Object,System.Action{Revenj.Extensibility.Autofac.ContainerBuilder})">
            <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <remarks>
            The components registered in the sub-scope will be treated as though they were
            registered in the root scope, i.e., SingleInstance() components will live as long
            as the root scope.
            </remarks>
            <param name="tag">The tag applied to the <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>.</param>
            <param name="configurationAction">Action on a <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>
            that adds component registations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.ILifetimeScope.Disposer">
            <summary>
            The disposer associated with this <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>.
            Component instances can be associated with it manually if required.
            </summary>
            <remarks>Typical usage does not require interaction with this member- it
            is used when extending the container.</remarks>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.ILifetimeScope.Tag">
            <summary>
            The tag applied to the <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>.
            </summary>
            <remarks>Tags allow a level in the lifetime hierarchy to be identified.
            In most applications, tags are not necessary.</remarks>
            <seealso cref="M:Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object)"/>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource">
            <summary>
            Provides registrations on-the-fly for any concrete type not already registered with
            the container.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.IRegistrationSource">
            <summary>
            Allows registrations to be made on-the-fly when unregistered
            services are requested (lazy registrations.)
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IRegistrationSource.RegistrationsFor(Revenj.Extensibility.Autofac.Core.Service,System.Func{Revenj.Extensibility.Autofac.Core.Service,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.IComponentRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
            <remarks>
            If the source is queried for service s, and it returns a component that implements both s and s', then it
            will not be queried again for either s or s'. This means that if the source can return other implementations
            of s', it should return these, plus the transitive closure of other components implementing their 
            additional services, along with the implementation of s. It is not an error to return components
            that do not implement <paramref name="service"/>.
            </remarks>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IRegistrationSource.IsAdapterForIndividualComponents">
            <summary>
            Gets whether the registrations provided by this source are 1:1 adapters on top
            of other components (I.e. like Meta, Func or Owned.)
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource"/> class.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.#ctor(System.Func{System.Type,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource"/> class.
            </summary>
            <param name="predicate">A predicate that selects types the source will register.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.RegistrationsFor(Revenj.Extensibility.Autofac.Core.Service,System.Func{Revenj.Extensibility.Autofac.Core.Service,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.IComponentRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.IsAdapterForIndividualComponents">
            <summary>
            Gets whether the registrations provided by this source are 1:1 adapters on top
            of other components (I.e. like Meta, Func or Owned.)
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.OwnedInstances.Owned`1">
            <summary>
            Represents a dependency that can be released by the dependent component.
            </summary>
            <typeparam name="T">The service provided by the dependency.</typeparam>
            <remarks>
            <para>
            Autofac automatically provides instances of <see cref="T:Revenj.Extensibility.Autofac.Features.OwnedInstances.Owned`1"/> whenever the
            service <typeparamref name="T"/> is registered.
            </para>
            <para>
            It is not necessary for <typeparamref name="T"/>, or the underlying component, to implement <see cref="T:System.IDisposable"/>.
            Disposing of the <see cref="T:Revenj.Extensibility.Autofac.Features.OwnedInstances.Owned`1"/> object is the correct way to handle cleanup of the dependency,
            as this will dispose of any other components created indirectly as well.
            </para>
            <para>
            When <see cref="T:Revenj.Extensibility.Autofac.Features.OwnedInstances.Owned`1"/> is resolved, a new <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/> is created for the
            underlying <typeparamref name="T"/>, and tagged with the service matching <typeparamref name="T"/>,
            generally a <see cref="T:Revenj.Extensibility.Autofac.Core.TypedService"/>. This means that shared instances can be tied to this
            scope by registering them as InstancePerMatchingLifetimeScope(new TypedService(typeof(T))).
            </para>
            </remarks>
            <example>
            The component D below is disposable and implements IService:
            <code>
            public class D : IService, IDisposable
            {
              // ...
            }
            </code>
            The dependent component C can dispose of the D instance whenever required by taking a dependency on
            <see cref="T:Revenj.Extensibility.Autofac.Features.OwnedInstances.Owned`1"/>:
            <code>
            public class C
            {
              IService _service;
              
              public C(Owned&lt;IService&gt; service)
              {
                _service = service;
              }
              
              void DoWork()
              {
                _service.Value.DoSomething();
              }
              
              void OnFinished()
              {
                _service.Dispose();
              }
            }
            </code>
            In general, rather than depending on <see cref="T:Revenj.Extensibility.Autofac.Features.OwnedInstances.Owned`1"/> directly, components will depend on
            System.Func&lt;Owned&lt;T&gt;&gt; in order to create and dispose of other components as required.
            </example>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.OwnedInstances.Owned`1.#ctor(`0,System.IDisposable)">
            <summary>
            Create an instance of <see cref="T:Revenj.Extensibility.Autofac.Features.OwnedInstances.Owned`1"/>.
            </summary>
            <param name="value">The value representing the instance.</param>
            <param name="lifetime">An IDisposable interface through which ownership can be released.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.OwnedInstances.Owned`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.OwnedInstances.Owned`1.Value">
            <summary>
            The owned value.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.OpenGenerics.OpenGenericRegistrationSource">
            <summary>
            Generates activators for open generic types.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator">
            <summary>
            Wraps a component registration, switching its lifetime.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.IComponentRegistration">
            <summary>
            Describes a logical component within the container.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IComponentRegistration.RaisePreparing(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter}@)">
            <summary>
            Called by the container when an instance is required.
            </summary>
            <param name="service">Service chich is preparing</param>
            <param name="context">The context in which the instance will be activated.</param>
            <param name="parameters">Parameters for activation. These may be modified by the event handler.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IComponentRegistration.RaiseActivating(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.Object@)">
            <summary>
            Called by the container once an instance has been constructed.
            </summary>
            <param name="service">Service chich is activating</param>
            <param name="context">The context in which the instance was activated.</param>
            <param name="parameters">The parameters supplied to the activator.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IComponentRegistration.RaiseActivated(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.Object)">
            <summary>
            Called by the container once an instance has been fully constructed, including
            any requested objects that depend on the instance.
            </summary>
            <param name="service">Service which is activated</param>
            <param name="context">The context in which the instance was activated.</param>
            <param name="parameters">The parameters supplied to the activator.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IComponentRegistration.Id">
            <summary>
            A unique identifier for this component (shared in all sub-contexts.)
            This value also appears in Services.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IComponentRegistration.Activator">
            <summary>
            The activator used to create instances.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IComponentRegistration.Lifetime">
            <summary>
            The lifetime associated with the component.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IComponentRegistration.Sharing">
            <summary>
            Whether the component instances are shared or not.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IComponentRegistration.Ownership">
            <summary>
            Whether the instances of the component should be disposed by the container.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IComponentRegistration.Services">
            <summary>
            The services provided by the component.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IComponentRegistration.Metadata">
            <summary>
            Additional data associated with the component.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.IComponentRegistration.Target">
            <summary>
            The component registration upon which this registration is based.
            </summary>
        </member>
        <member name="E:Revenj.Extensibility.Autofac.Core.IComponentRegistration.Preparing">
            <summary>
            Fired when a new instance is required. The instance can be
            provided in order to skip the regular activator, by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Revenj.Extensibility.Autofac.Core.IComponentRegistration.Activating">
            <summary>
            Fired when a new instance is being activated. The instance can be
            wrapped or switched at this time by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Revenj.Extensibility.Autofac.Core.IComponentRegistration.Activated">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration">
            <summary>
            Describes a logical component within the container.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.#ctor(System.Guid,Revenj.Extensibility.Autofac.Core.IInstanceActivator,Revenj.Extensibility.Autofac.Core.IComponentLifetime,Revenj.Extensibility.Autofac.Core.InstanceSharing,Revenj.Extensibility.Autofac.Core.InstanceOwnership,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new component registration.
            </summary>
            <param name="id">Unique identifier for the component.</param>
            <param name="activator">Activator used to activate instances.</param>
            <param name="lifetime">Determines how the component will be associated with its lifetime.</param>
            <param name="sharing">Whether the component is shared within its lifetime scope.</param>
            <param name="ownership">Whether the component instances are disposed at the end of their lifetimes.</param>
            <param name="services">Services the component provides.</param>
            <param name="metadata">Data associated with the component.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.#ctor(System.Guid,Revenj.Extensibility.Autofac.Core.IInstanceActivator,Revenj.Extensibility.Autofac.Core.IComponentLifetime,Revenj.Extensibility.Autofac.Core.InstanceSharing,Revenj.Extensibility.Autofac.Core.InstanceOwnership,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object},Revenj.Extensibility.Autofac.Core.IComponentRegistration)">
            <summary>
            Create a new component registration.
            </summary>
            <param name="id">Unique identifier for the component.</param>
            <param name="activator">Activator used to activate instances.</param>
            <param name="lifetime">Determines how the component will be associated with its lifetime.</param>
            <param name="sharing">Whether the component is shared within its lifetime scope.</param>
            <param name="ownership">Whether the component instances are disposed at the end of their lifetimes.</param>
            <param name="services">Services the component provides.</param>
            <param name="metadata">Data associated with the component.</param>
            <param name="target">The component registration upon which this registration is based.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.RaisePreparing(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter}@)">
            <summary>
            Called by the container when an instance is required.
            </summary>
            <param name="service">Service which is preparing</param>
            <param name="context">The context in which the instance will be activated.</param>
            <param name="parameters">Parameters for activation.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.RaiseActivating(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.Object@)">
            <summary>
            Called by the container once an instance has been constructed.
            </summary>
            <param name="service">Service which is activating</param>
            <param name="context">The context in which the instance was activated.</param>
            <param name="parameters">The parameters supplied to the activator.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.RaiseActivated(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.Object)">
            <summary>
            Called by the container once an instance has been fully constructed, including
            any requested objects that depend on the instance.
            </summary>
            <param name="service">Service which is activated</param>
            <param name="context">The context in which the instance was activated.</param>
            <param name="parameters">The parameters supplied to the activator.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.ToString">
            <summary>
            Describes the component in a human-readable form.
            </summary>
            <returns>A description of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.Target">
            <summary>
            The component registration upon which this registration is based.
            If this registration was created directly by the user, returns this.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.Id">
            <summary>
            A unique identifier for this component (shared in all sub-contexts.)
            This value also appears in Services.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.Activator">
            <summary>
            The activator used to create instances.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.Lifetime">
            <summary>
            The lifetime associated with the component.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.Sharing">
            <summary>
            Whether the component instances are shared or not.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.Ownership">
            <summary>
            Whether the instances of the component should be disposed by the container.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.Services">
            <summary>
            The services provided by the component.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.Metadata">
            <summary>
            Additional data associated with the component.
            </summary>
        </member>
        <member name="E:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.Preparing">
            <summary>
            Fired when a new instance is required. The instance can be
            provided in order to skip the regular activator, by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.Activating">
            <summary>
            Fired when a new instance is being activated. The instance can be
            wrapped or switched at this time by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Revenj.Extensibility.Autofac.Core.Registration.ComponentRegistration.Activated">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Container">
            <summary>
            Standard container implementation.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.IContainer">
            <summary>
            Creates, wires dependencies and manages lifetime for a set of components.
            Most instances of <see cref="T:Revenj.Extensibility.Autofac.IContainer"/> are created 
            by a <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>.
            </summary>
            <example>
            <code>
            // See ContainerBuilder for the definition of the builder variable
            using (var container = builder.Build())
            {
                var program = container.Resolve&lt;Program&gt;();
                program.Run();
            }
            </code>
            </example>
            <remarks>
            Most <see cref="T:Revenj.Extensibility.Autofac.IContainer"/> functionality is provided by extension methods
            on the inherited <see cref="T:Revenj.Extensibility.Autofac.IComponentContext"/> interface.
            </remarks>
            <seealso cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>
            <seealso cref="T:Revenj.Extensibility.Autofac.IComponentContext"/>
            <seealso cref="T:Revenj.Extensibility.Autofac.ResolutionExtensions"/>
            <seealso cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Container.#ctor">
            <summary>
            Create a new container.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Container.BeginLifetimeScope">
            <summary>
            Begin a new sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Container.BeginLifetimeScope(System.Object)">
            <summary>
            Begin a new sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Container.BeginLifetimeScope(System.Action{Revenj.Extensibility.Autofac.ContainerBuilder})">
            <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <param name="configurationAction">Action on a <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>
            that adds component registations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Container.BeginLifetimeScope(System.Object,System.Action{Revenj.Extensibility.Autofac.ContainerBuilder})">
            <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>.</param>
            <param name="configurationAction">Action on a <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>
            that adds component registations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Container.ResolveLookup(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
            <param name="service">Service which is trying to be resolved</param>
            <param name="registration">The registration.</param>
            <param name="parameters">Parameters for the instance.</param>
            <returns>
            The component instance.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Container.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Container.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object 
            to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is 
            no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Container.Empty">
            <summary>
            An empty container.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Container.Disposer">
            <summary>
            The disposer associated with this container. Instances can be associated
            with it manually if required.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Container.Tag">
            <summary>
            Tag applied to the lifetime scope.
            </summary>
            <remarks>The tag applied to this scope and the contexts generated when
            it resolves component dependencies.</remarks>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Container.ComponentRegistry">
            <summary>
            Associates services with the components that provide them.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Activators.Reflection.ConstructorParameterBinding">
            <summary>
            Binds a constructor to the parameters that will be used when it is invoked.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.ConstructorParameterBinding.#ctor(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},Revenj.Extensibility.Autofac.IComponentContext)">
            <summary>
            Construct a new ConstructorParameterBinding.
            </summary>
            <param name="ci">ConstructorInfo to bind.</param>
            <param name="availableParameters">Available parameters.</param>
            <param name="context">Context in which to construct instance.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.ConstructorParameterBinding.Instantiate">
            <summary>
            Invoke the constructor with the parameter bindings.
            </summary>
            <returns>The constructed instance.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.ConstructorParameterBinding.ToString">
            <summary>Returns a System.String that represents the current System.Object.</summary>
            <returns>A System.String that represents the current System.Object.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Activators.Reflection.ConstructorParameterBinding.TargetConstructor">
            <summary>
            The constructor on the target type. The actual constructor used
            might differ, e.g. if using a dynamic proxy.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Activators.Reflection.ConstructorParameterBinding.CanInstantiate">
            <summary>
            True if the binding is valid.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Activators.Reflection.ConstructorParameterBinding.Description">
            <summary>
            Describes the constructor parameter binding.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.SimpleActivatorData">
            <summary>
            An activator builder with no parameters.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.SimpleActivatorData.#ctor(Revenj.Extensibility.Autofac.Core.IInstanceActivator)">
            <summary>
            Return the provided activator.
            </summary>
            <param name="activator">The activator to return.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.SimpleActivatorData.Activator">
            <summary>
            Gets the activator.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.RegistrationData">
            <summary>
            Data common to all registrations made in the container, both direct (IComponentRegistration)
            and dynamic (IRegistrationSource.)
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationData.#ctor(Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Construct a RegistrationData instance.
            </summary>
            <param name="defaultService">The default service that will be used if no others
            are added.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationData.AddServices(System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Service})">
            <summary>
            Add multiple services for the registration, overriding the default.
            </summary>
            <param name="services">The services to add.</param>
            <remarks>If an empty collection is specified, this will still
            clear the default service.</remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationData.AddService(Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Add a service to the registration, overriding the default.
            </summary>
            <param name="service">The service to add.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationData.CopyFrom(Revenj.Extensibility.Autofac.Builder.RegistrationData,System.Boolean)">
            <summary>
            Copies the contents of another RegistrationData object into this one.
            </summary>
            <param name="that">The data to copy.</param>
            <param name="includeDefaultService">When true, the default service
            will be changed to that of the other.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationData.ClearServices">
            <summary>
            Empties the configured services.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.RegistrationData.Services">
            <summary>
            The services explicitly assigned to the component.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.RegistrationData.Ownership">
            <summary>
            The instance ownership assigned to the component.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.RegistrationData.Lifetime">
            <summary>
            The lifetime assigned to the component.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.RegistrationData.Sharing">
            <summary>
            The sharing mode assigned to the component.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.RegistrationData.Metadata">
            <summary>
            Extended properties assigned to the component.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.RegistrationData.PreparingHandlers">
            <summary>
            Handlers for the Preparing event.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.RegistrationData.ActivatingHandlers">
            <summary>
            Handlers for the Activating event.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.RegistrationData.ActivatedHandlers">
            <summary>
            Handlers for the Activated event.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.ContainerBuildOptions">
            <summary>
            Parameterises the construction of a container by a <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Builder.ContainerBuildOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Builder.ContainerBuildOptions.Default">
            <summary>
            Standard container construction.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Builder.ContainerBuildOptions.ExcludeDefaultModules">
            <summary>
            Prevents inclusion of standard modules like support for
            relationship types including <see cref="T:System.Collections.Generic.IEnumerable`1"/> etc.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Builder.ContainerBuildOptions.IgnoreStartableComponents">
            <summary>
            Does not call <see cref="M:Revenj.Extensibility.Autofac.IStartable.Start"/> on components implementing
            this interface (useful for module testing.)
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.TupleExpressionBuilder">
            <summary>
            <see cref="T:Remotion.Linq.Parsing.TupleExpressionBuilder"/> can be used to build tuples incorporating a sequence of <see cref="T:System.Linq.Expressions.Expression"/>s. 
            For example, given three expressions, exp1, exp2, and exp3, it will build nested <see cref="T:System.Linq.Expressions.NewExpression"/>s that are equivalent to the 
            following: new KeyValuePair(exp1, new KeyValuePair(exp2, exp3)).
            Given an <see cref="T:System.Linq.Expressions.Expression"/> whose type matches that of a tuple built by <see cref="T:Remotion.Linq.Parsing.TupleExpressionBuilder"/>, the builder can also return 
            an enumeration of accessor expressions that can be used to access the tuple elements in the same order as they were put into the nested tuple 
            expression. In above example, this would yield tupleExpression.Key, tupleExpression.Value.Key, and tupleExpression.Value.Value.
            This class can be handy whenever a set of <see cref="T:System.Linq.Expressions.Expression"/> needs to be put into a single <see cref="T:System.Linq.Expressions.Expression"/> 
            (eg., a select projection), especially if each sub-expression needs to be explicitly accessed at a later point of time (eg., to retrieve the 
            items from a statement surrounding a sub-statement yielding the tuple in its select projection).
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectManyExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            This node represents an additional query source introduced to the query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.QuerySourceExpressionNodeUtility">
            <summary>
            Provides common functionality used by implementors of <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.IntermediateModel.QuerySourceExpressionNodeUtility.ReplaceParameterWithReference(Remotion.Linq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
            Replaces the given parameter with a back-reference to the <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> corresponding to <paramref name="referencedNode"/>.
            </summary>
            <param name="referencedNode">The referenced node.</param>
            <param name="parameterToReplace">The parameter to replace with a <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/>.</param>
            <param name="expression">The expression in which to replace the parameter.</param>
            <param name="context">The clause generation context.</param>
            <returns><paramref name="expression"/>, with <paramref name="parameterToReplace"/> replaced with a <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/>
            pointing to the clause corresponding to <paramref name="referencedNode"/>.</returns>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.IntermediateModel.QuerySourceExpressionNodeUtility.GetQuerySourceForNode(Remotion.Linq.Parsing.Structure.IntermediateModel.IQuerySourceExpressionNode,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
            Gets the <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> corresponding to the given <paramref name="node"/>, throwing an <see cref="T:System.InvalidOperationException"/>
            if no such clause has been registered in the given <paramref name="context"/>.
            </summary>
            <param name="node">The node for which the <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> should be returned.</param>
            <param name="context">The clause generation context.</param>
            <returns>The <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> corresponding to <paramref name="node"/>.</returns>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ExpressionNodeInstantiationException">
            <summary>
            Thrown whan an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> parser cannot be instantiated for a query. Note that this <see cref="T:System.Exception"/> is not serializable
            and intended to be caught in the call-site where it will then replaced by a different (serializable) exception.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.AverageExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for the different overloads of <see cref="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Collections.ObservableCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            </summary>
        </member>
        <member name="M:Remotion.Linq.Collections.ObservableCollectionExtensions.AsChangeResistantEnumerable``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Returns an instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> that represents this collection and can be enumerated even while the collection changes;
            the enumerator will adapt to the changes (see <see cref="T:Remotion.Linq.Collections.ChangeResistantObservableCollectionEnumerator`1"/>).
            </summary>
        </member>
        <member name="M:Remotion.Linq.Collections.ObservableCollectionExtensions.AsChangeResistantEnumerableWithIndex``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Returns an instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> that represents this collection and can be enumerated even while the collection changes;
            the enumerator will adapt to the changes (see <see cref="T:Remotion.Linq.Collections.ChangeResistantObservableCollectionEnumerator`1"/>). The enumerable will yield
            instances of type <see cref="T:Remotion.Linq.Collections.IndexValuePair`1"/>, which hold both the index and the value of the current item. If this collection changes
            while enumerating, <see cref="P:Remotion.Linq.Collections.IndexValuePair`1.Index"/> will reflect those changes.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.OrderingDirection">
            <summary>
            Specifies the direction used to sort the result items in a query using an <see cref="T:Remotion.Linq.Clauses.OrderByClause"/>.
            </summary>
        </member>
        <member name="F:Remotion.Linq.Clauses.OrderingDirection.Asc">
            <summary>
            Sorts the items in an ascending way, from smallest to largest.
            </summary>
        </member>
        <member name="F:Remotion.Linq.Clauses.OrderingDirection.Desc">
            <summary>
            Sorts the items in an descending way, from largest to smallest.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ExpressionTreeVisitors.ReverseResolvingExpressionTreeVisitor">
            <summary>
            Performs a reverse <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/> operation, i.e. creates a <see cref="T:System.Linq.Expressions.LambdaExpression"/> from a given resolved expression, 
            substituting all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> objects by getting the referenced objects from the lambda's input parameter.
            </summary>
            <example>
            Given the following input:
            <list type="bullet">
            <item>ItemExpression: <c>new AnonymousType ( a = [s1], b = [s2] )</c></item>
            <item>ResolvedExpression: <c>[s1].ID + [s2].ID</c></item>
            </list> 
            The visitor generates the following <see cref="T:System.Linq.Expressions.LambdaExpression"/>: <c>input =&gt; input.a.ID + input.b.ID</c>
            The lambda's input parameter has the same type as the ItemExpression.
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ExpressionTreeVisitors.ReverseResolvingExpressionTreeVisitor.ReverseResolve(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Performs a reverse <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/> operation, i.e. creates a <see cref="T:System.Linq.Expressions.LambdaExpression"/> from a given resolved expression, 
            substituting all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> objects by getting the referenced objects from the lambda's input parameter.
            </summary>
            <param name="itemExpression">The item expression representing the items passed to the generated <see cref="T:System.Linq.Expressions.LambdaExpression"/> via its input 
            parameter.</param>
            <param name="resolvedExpression">The resolved expression for which to generate a reverse resolved <see cref="T:System.Linq.Expressions.LambdaExpression"/>.</param>
            <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"/> from the given resolved expression, substituting all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> 
            objects by getting the referenced objects from the lambda's input parameter. The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/> has exactly one 
            parameter which is of the type defined by <paramref name="itemExpression"/>.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.ExpressionTreeVisitors.ReverseResolvingExpressionTreeVisitor.ReverseResolveLambda(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Int32)">
            <summary>
            Performs a reverse <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/> operation on a <see cref="T:System.Linq.Expressions.LambdaExpression"/>, i.e. creates a new 
            <see cref="T:System.Linq.Expressions.LambdaExpression"/> with an additional parameter from a given resolved <see cref="T:System.Linq.Expressions.LambdaExpression"/>, 
            substituting all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> objects by getting the referenced objects from the new input parameter.
            </summary>
            <param name="itemExpression">The item expression representing the items passed to the generated <see cref="T:System.Linq.Expressions.LambdaExpression"/> via its new
            input parameter.</param>
            <param name="resolvedExpression">The resolved <see cref="T:System.Linq.Expressions.LambdaExpression"/> for which to generate a reverse resolved <see cref="T:System.Linq.Expressions.LambdaExpression"/>.</param>
            <param name="parameterInsertionPosition">The position at which to insert the new parameter.</param>
            <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"/> similar to the given resolved expression, substituting all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> 
            objects by getting the referenced objects from an additional input parameter. The new input parameter is of the type defined by 
            <paramref name="itemExpression"/>.</returns>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">
            <summary>
            Represents a SQL statement or function (stored procedure) to execute
            against a PostgreSQL database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">NpgsqlCommand</see> class.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">NpgsqlCommand</see> class with the text of the query.
            </summary>
            <param name="cmdText">The text of the query.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.#ctor(System.String,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">NpgsqlCommand</see> class with the text of the query and a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">NpgsqlConnection</see>.
            </summary>
            <param name="cmdText">The text of the query.</param>
            <param name="connection">A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">NpgsqlConnection</see> that represents the connection to a PostgreSQL server.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.#ctor(System.String,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">NpgsqlCommand</see> class with the text of the query, a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">NpgsqlConnection</see>, and the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>.
            </summary>
            <param name="cmdText">The text of the query.</param>
            <param name="connection">A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">NpgsqlConnection</see> that represents the connection to a PostgreSQL server.</param>
            <param name="transaction">The <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction">NpgsqlTransaction</see> in which the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">NpgsqlCommand</see> executes.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.#ctor(System.String,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector)">
            <summary>
            Used to execute internal commands.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.Cancel">
            <summary>
            Attempts to cancel the execution of a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">NpgsqlCommand</see>.
            </summary>
            <remarks>This Method isn't implemented yet.</remarks>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.System#ICloneable#Clone">
            <summary>
            Create a new command based on this one.
            </summary>
            <returns>A new NpgsqlCommand object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.Clone">
            <summary>
            Create a new command based on this one.
            </summary>
            <returns>A new NpgsqlCommand object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.CreateDbParameter">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.Common.DbParameter">DbParameter</see> object.
            </summary>
            <returns>An <see cref="T:System.Data.Common.DbParameter">DbParameter</see> object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.CreateParameter">
            <summary>
            Creates a new instance of a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.
            </summary>
            <returns>A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.ExecuteBlind">
            <summary>
            Slightly optimised version of ExecuteNonQuery() for internal ues in cases where the number
            of affected rows is of no interest.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.ExecuteNonQuery">
            <summary>
            Executes a SQL statement against the connection and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            Sends the <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.CommandText">CommandText</see> to
            the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">Connection</see> and builds a
            <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader">NpgsqlDataReader</see>
            using one of the <see cref="T:System.Data.CommandBehavior">CommandBehavior</see> values.
            </summary>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior">CommandBehavior</see> values.</param>
            <returns>A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader">NpgsqlDataReader</see> object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.ExecuteReader">
            <summary>
            Sends the <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.CommandText">CommandText</see> to
            the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">Connection</see> and builds a
            <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader">NpgsqlDataReader</see>.
            </summary>
            <returns>A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader">NpgsqlDataReader</see> object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Sends the <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.CommandText">CommandText</see> to
            the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">Connection</see> and builds a
            <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader">NpgsqlDataReader</see>
            using one of the <see cref="T:System.Data.CommandBehavior">CommandBehavior</see> values.
            </summary>
            <param name="cb">One of the <see cref="T:System.Data.CommandBehavior">CommandBehavior</see> values.</param>
            <returns>A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader">NpgsqlDataReader</see> object.</returns>
            <remarks>Currently the CommandBehavior parameter is ignored.</remarks>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.BindParameters">
            <summary>
             This method binds the parameters from parameters collection to the bind
             message.
             </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row
            in the result set returned by the query. Extra columns or rows are ignored.
            </summary>
            <returns>The first column of the first row in the result set,
            or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.Prepare">
            <summary>
            Creates a prepared version of the command on a PostgreSQL server.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.CheckConnectionState">
            <summary>
             This method checks the connection state to see if the connection
             is set or it is open. If one of this conditions is not met, throws
             an InvalidOperationException
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.GetCommandStream">
            <summary>
            This method substitutes the <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.Parameters">Parameters</see>, if exist, in the command
            to their actual values.
            The parameter name format is <b>:ParameterName</b>.
            </summary>
            <returns>A version of <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.CommandText">CommandText</see> with the <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.Parameters">Parameters</see> inserted.</returns>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.CommandText">
            <summary>
            Gets or sets the SQL statement or function (stored procedure) to execute at the data source.
            </summary>
            <value>The Transact-SQL statement or stored procedure to execute. The default is an empty string.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt
            to execute a command and generating an error.
            </summary>
            <value>The time (in seconds) to wait for the command to execute.
            The default is 20 seconds.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.CommandType">
            <summary>
            Gets or sets a value indicating how the
            <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.CommandText">CommandText</see> property is to be interpreted.
            </summary>
            <value>One of the <see cref="T:System.Data.CommandType">CommandType</see> values. The default is <see cref="T:System.Data.CommandType">CommandType.Text</see>.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.Connection">
            <summary>
            Gets or sets the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">NpgsqlConnection</see>
            used by this instance of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">NpgsqlCommand</see>.
            </summary>
            <value>The connection to a data source. The default value is a null reference.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.Parameters">
            <summary>
            Gets the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see>.
            </summary>
            <value>The parameters of the SQL statement or function (stored procedure). The default is an empty collection.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.Transaction">
            <summary>
            Gets or sets the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>
            within which the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">NpgsqlCommand</see> executes.
            </summary>
            <value>The <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>.
            The default value is a null reference.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow">DataRow</see>
            when used by the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)">Update</see>
            method of the <see cref="T:System.Data.Common.DbDataAdapter">DbDataAdapter</see>.
            </summary>
            <value>One of the <see cref="T:System.Data.UpdateRowSource">UpdateRowSource</see> values.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand.LastInsertedOID">
            <summary>
            Returns oid of inserted row. This is only updated when using executenonQuery and when command inserts just a single row. If table is created without oids, this will always be 0.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream">
            <summary>
            Stream for reading data from a table or select on a PostgreSQL version 7.4 or newer database during an active COPY TO STDOUT operation.
            <b>Passes data exactly as provided by the server.</b>
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.#ctor(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector)">
            <summary>
            Created only by NpgsqlCopyOutState.StartCopy()
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.Close">
            <summary>
            Discards copy data as long as server pushes it. Returns after operation is finished.
            Does nothing if this stream is not the active copy operation reader.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not writable.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.Flush">
            <summary>
            Not flushable.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies data read from server to given byte buffer.
            Since server returns data row by row, length will differ each time, but it is only zero once the operation ends.
            Can be mixed with calls to the more efficient NpgsqlCopyOutStream.Read() : byte[] though that would not make much sense.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not seekable
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.SetLength(System.Int64)">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.Read">
            <summary>
            Returns a whole row of data from server without extra work.
            If standard Stream.Read(...) has been called before, it's internal buffers remains are returned.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.IsActive">
            <summary>
            True while this stream can be used to read copy data from server
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.CanRead">
            <summary>
            True
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.CanWrite">
            <summary>
            False
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.CanSeek">
            <summary>
            False
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.Length">
            <summary>
            Number of bytes read so far
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyOutStream.Position">
            <summary>
            Number of bytes read so far; can not be set.
            </summary>
        </member>
        <member name="T:Revenj.Utility.TypeUtility">
            <summary>
            Utility for working with reflection
            </summary>
        </member>
        <member name="M:Revenj.Utility.TypeUtility.GetTypeHierarchy(System.Type)">
            <summary>
            Get type hierarchy for specified type.
            All interfaces and base types will be returned.
            Result will be cached.
            </summary>
            <param name="startType">specified type</param>
            <returns>all implemented interfaces and base types</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Module">
            <summary>
            Base class for user-defined modules. Modules can add a set of releated components
            to a container (<see cref="M:Revenj.Extensibility.Autofac.Module.Load(Revenj.Extensibility.Autofac.ContainerBuilder)"/>) or attach cross-cutting functionality
            to other components (<see cref="M:Revenj.Extensibility.Autofac.Module.AttachToComponentRegistration(Revenj.Extensibility.Autofac.Core.IComponentRegistry,Revenj.Extensibility.Autofac.Core.IComponentRegistration)"/>.
            Modules are given special support in the XML configuration feature - see
            http://code.google.com/p/autofac/wiki/StructuringWithModules.
            </summary>
            <remarks>Provides a user-friendly way to implement <see cref="T:Revenj.Extensibility.Autofac.Core.IModule"/>
            via <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>.</remarks>
            <example>
            Defining a module:
            <code>
            public class DataAccessModule : Module
            {
                public string ConnectionString { get; set; }
                
                public override void Load(ContainerBuilder moduleBuilder)
                {
                    moduleBuilder.RegisterGeneric(typeof(MyRepository&lt;&gt;))
                        .As(typeof(IRepository&lt;&gt;))
                        .InstancePerMatchingLifetimeScope(WebLifetime.Request);
                    
                    moduleBuilder.Register(c =&gt; new MyDbConnection(ConnectionString))
                        .As&lt;IDbConnection&gt;()
                        .InstancePerMatchingLifetimeScope(WebLifetime.Request);
                }
            }
            </code>
            Using the module:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterModule(new DataAccessModule { ConnectionString = "..." });
            var container = builder.Build();
            var customers = container.Resolve&lt;IRepository&lt;Customer&gt;&gt;();
            </code>
            </example>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.IModule">
            <summary>
            Represents a set of components and related functionality
            packaged together.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IModule.Configure(Revenj.Extensibility.Autofac.Core.IComponentRegistry)">
            <summary>
            Apply the module to the component registry.
            </summary>
            <param name="componentRegistry">Component registry to apply configuration to.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Module.Configure(Revenj.Extensibility.Autofac.Core.IComponentRegistry)">
            <summary>
            Apply the module to the component registry.
            </summary>
            <param name="componentRegistry">Component registry to apply configuration to.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Module.Load(Revenj.Extensibility.Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
            <param name="builder">The builder through which components can be
            registered.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Module.AttachToComponentRegistration(Revenj.Extensibility.Autofac.Core.IComponentRegistry,Revenj.Extensibility.Autofac.Core.IComponentRegistration)">
            <summary>
            Override to attach module-specific functionality to a
            component registration.
            </summary>
            <remarks>This method will be called for all existing <i>and future</i> component
            registrations - ordering is not important.</remarks>
            <param name="componentRegistry">The component registry.</param>
            <param name="registration">The registration to attach functionality to.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Module.AttachToRegistrationSource(Revenj.Extensibility.Autofac.Core.IComponentRegistry,Revenj.Extensibility.Autofac.Core.IRegistrationSource)">
            <summary>
            Override to perform module-specific processing on a registration source.
            </summary>
            <remarks>This method will be called for all existing <i>and future</i> sources
            - ordering is not important.</remarks>
            <param name="componentRegistry">The component registry into which the source was added.</param>
            <param name="registrationSource">The registration source.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Module.ThisAssembly">
            <summary>
            The assembly in which the concrete module type is located. To avoid bugs whereby deriving from a module will
            change the target assembly, this property can only be used by modules that inherit directly from
            <see cref="T:Revenj.Extensibility.Autofac.Module"/>.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.ResolutionExtensions">
            <summary>
            Adds syntactic convenience methods to the <see cref="T:Revenj.Extensibility.Autofac.IComponentContext"/> interface.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.InjectProperties``1(Revenj.Extensibility.Autofac.IComponentContext,``0)">
            <summary>
            Set any properties on <paramref name="instance"/> that can be
            resolved in the context.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.InjectUnsetProperties``1(Revenj.Extensibility.Autofac.IComponentContext,``0)">
            <summary>
            Set any null-valued properties on <paramref name="instance"/> that can be
            resolved by the container.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveNamed``1(Revenj.Extensibility.Autofac.IComponentContext,System.String)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">Name of the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveNamed``1(Revenj.Extensibility.Autofac.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveNamed``1(Revenj.Extensibility.Autofac.IComponentContext,System.String,Revenj.Extensibility.Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveKeyed``1(Revenj.Extensibility.Autofac.IComponentContext,System.Object)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">Key of the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveKeyed``1(Revenj.Extensibility.Autofac.IComponentContext,System.Object,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">Key of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveKeyed``1(Revenj.Extensibility.Autofac.IComponentContext,System.Object,Revenj.Extensibility.Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">Key of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.Resolve``1(Revenj.Extensibility.Autofac.IComponentContext)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <returns>The component instance that provides the service.</returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.Resolve``1(Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.Resolve``1(Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.Resolve(Revenj.Extensibility.Autofac.IComponentContext,System.Type)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceType">The service type.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.Resolve(Revenj.Extensibility.Autofac.IComponentContext,System.Type,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceType">The service type.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.Resolve(Revenj.Extensibility.Autofac.IComponentContext,System.Type,Revenj.Extensibility.Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceType">The service type.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveNamed(Revenj.Extensibility.Autofac.IComponentContext,System.String,System.Type)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The service name.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveNamed(Revenj.Extensibility.Autofac.IComponentContext,System.String,System.Type,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The service name.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveNamed(Revenj.Extensibility.Autofac.IComponentContext,System.String,System.Type,Revenj.Extensibility.Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The service name.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveService(Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service to resolve.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveService(Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.Service,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="service">The service to resolve.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveService(Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="service">The service to resolve.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptional``1(Revenj.Extensibility.Autofac.IComponentContext)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptional``1(Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptional``1(Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptionalNamed``1(Revenj.Extensibility.Autofac.IComponentContext,System.String)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptionalNamed``1(Revenj.Extensibility.Autofac.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptionalNamed``1(Revenj.Extensibility.Autofac.IComponentContext,System.String,Revenj.Extensibility.Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptionalKeyed``1(Revenj.Extensibility.Autofac.IComponentContext,System.Object)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptionalKeyed``1(Revenj.Extensibility.Autofac.IComponentContext,System.Object,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceKey">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptionalKeyed``1(Revenj.Extensibility.Autofac.IComponentContext,System.Object,Revenj.Extensibility.Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceKey">The key of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptional(Revenj.Extensibility.Autofac.IComponentContext,System.Type)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceType">The type of the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptional(Revenj.Extensibility.Autofac.IComponentContext,System.Type,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceType">The type of the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptional(Revenj.Extensibility.Autofac.IComponentContext,System.Type,Revenj.Extensibility.Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceType">The type of the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptionalService(Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptionalService(Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.Service,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service.</param>
            <param name="parameters">Parameters for the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.ResolveOptionalService(Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service.</param>
            <param name="parameters">Parameters for the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.IsRegistered``1(Revenj.Extensibility.Autofac.IComponentContext)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <typeparam name="TService">The service to test for the registration of.</typeparam>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.IsRegistered(Revenj.Extensibility.Autofac.IComponentContext,System.Type)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceType">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.IsRegisteredWithName(Revenj.Extensibility.Autofac.IComponentContext,System.String,System.Type)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The name of the service to test for the registration of.</param>
            <param name="serviceType">Type type of the service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.IsRegisteredWithName``1(Revenj.Extensibility.Autofac.IComponentContext,System.String)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The name of the service to test for the registration of.</param>
            <typeparam name="TService">Type type of the service to test for the registration of.</typeparam>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.IsRegisteredWithKey(Revenj.Extensibility.Autofac.IComponentContext,System.Object,System.Type)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">The key of the service to test for the registration of.</param>
            <param name="serviceType">Type type of the service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.IsRegisteredWithKey``1(Revenj.Extensibility.Autofac.IComponentContext,System.Object)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">The key of the service to test for the registration of.</param>
            <typeparam name="TService">Type type of the service to test for the registration of.</typeparam>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.IsRegisteredService(Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.TryResolveService(Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.Service,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.TryResolveService(Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.Service,System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.TryResolve(Revenj.Extensibility.Autofac.IComponentContext,System.Type,System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceType">The service type to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.TryResolve``1(Revenj.Extensibility.Autofac.IComponentContext,``0@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <typeparam name="T">The service type to resolve.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The resulting component instance providing the service, or default(T).</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.TryResolveNamed(Revenj.Extensibility.Autofac.IComponentContext,System.String,System.Type,System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The name of the service to resolve.</param>
            <param name="serviceType">The type of the service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ResolutionExtensions.TryResolveKeyed(Revenj.Extensibility.Autofac.IComponentContext,System.Object,System.Type,System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">The key of the service to resolve.</param>
            <param name="serviceType">The type of the service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Integration.Mef.RegistrationExtensions">
            <summary>
            Extension methods that add MEF hosting capabilities to the container building classes.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.RegistrationExtensions.Exported``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Action{Revenj.Extensibility.Autofac.Integration.Mef.ExportConfigurationBuilder})">
            <summary>
            Expose the registered service to MEF parts as an export.
            </summary>
            <param name="registration">The component being registered.</param>
            <param name="configurationAction">Action on an object that configures the export.</param>
            <returns>A registration allowing registration to continue.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.RegistrationExtensions.RegisterComposablePartType(Revenj.Extensibility.Autofac.ContainerBuilder,System.Type)">
            <summary>
            Register a MEF-attributed type as a component.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="partType">The attributed type to register.</param>
            <remarks>
            A simple heuristic/type scanning technique will be used to determine which MEF exports
            are exposed to other components in the Autofac container.
            </remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.RegistrationExtensions.RegisterComposablePartType(Revenj.Extensibility.Autofac.ContainerBuilder,System.Type,System.Func{System.ComponentModel.Composition.Primitives.ExportDefinition,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Service}})">
            <summary>
            Register a MEF-attributed type as a component.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="partType">The attributed type to register.</param>
            <param name="exposedServicesMapper">A mapping function to transform ExportDefinitions into Services.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.RegistrationExtensions.RegisterComposablePartCatalog(Revenj.Extensibility.Autofac.ContainerBuilder,System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
            <summary>
            Register a MEF catalog.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="catalog">The catalog to register.</param>
            <remarks>
            A simple heuristic/type scanning technique will be used to determine which MEF exports
            are exposed to other components in the Autofac container.
            </remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.RegistrationExtensions.RegisterComposablePartCatalog(Revenj.Extensibility.Autofac.ContainerBuilder,System.ComponentModel.Composition.Primitives.ComposablePartCatalog,Revenj.Extensibility.Autofac.Core.Service[])">
            <summary>
            Register a MEF catalog.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="catalog">The catalog to register.</param>
            <param name="interchangeServices">The services that will be exposed to other components in the container.</param>
            <remarks>
            Named and typed services only can be matched in the <paramref name="interchangeServices"/> collection.
            </remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.RegistrationExtensions.RegisterComposablePartCatalog(Revenj.Extensibility.Autofac.ContainerBuilder,System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ExportDefinition,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Service}})">
            <summary>
            Register a MEF catalog.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="catalog">The catalog to register.</param>
            <param name="exposedServicesMapper">A mapping function to transform ExportDefinitions into Services.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.RegistrationExtensions.RegisterComposablePartDefinition(Revenj.Extensibility.Autofac.ContainerBuilder,System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Func{System.ComponentModel.Composition.Primitives.ExportDefinition,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Service}})">
            <summary>
            Register a MEF part definition.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="partDefinition">The part definition to register.</param>
            <param name="exposedServicesMapper">A mapping function to transform ExportDefinitions into Services.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.RegistrationExtensions.ResolveExports``1(Revenj.Extensibility.Autofac.IComponentContext)">
            <summary>
            Locate all of the MEF exports registered as supplying contract type T.
            </summary>
            <typeparam name="T">The contract type.</typeparam>
            <param name="context">The context to resolve exports from.</param>
            <returns>A list of exports.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.RegistrationExtensions.ResolveExports``1(Revenj.Extensibility.Autofac.IComponentContext,System.String)">
            <summary>
            Locate all of the MEF exports registered as supplying contract type T.
            </summary>
            <param name="contractName">The contract name.</param>
            <param name="context">The context to resolve exports from.</param>
            <returns>A list of exports.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource">
            <summary>
            Generates registrations for services of type <see cref="T:Revenj.Extensibility.Autofac.Features.OwnedInstances.Owned`1"/> whenever the service
            T is available.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource.RegistrationsFor(Revenj.Extensibility.Autofac.Core.Service,System.Func{Revenj.Extensibility.Autofac.Core.Service,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.IComponentRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Activators.Reflection.IConstructorFinder">
            <summary>
            Find suitable constructors from which to select.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.IConstructorFinder.FindConstructors(System.Type)">
            <summary>
            Finds suitable constructors on the target type.
            </summary>
            <param name="targetType">Type to search for constructors.</param>
            <returns>Suitable constructors.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.SingleRegistrationStyle">
            <summary>
            Registration style for individual components.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.SingleRegistrationStyle.Id">
            <summary>
            The id used for the registration.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.SingleRegistrationStyle.RegisteredHandlers">
            <summary>
            Handlers to notify of the component registration event.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.SingleRegistrationStyle.PreserveDefaults">
            <summary>
            By default, new registrations override existing registrations as defaults.
            If set to true, new registrations will not change existing defaults.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.SingleRegistrationStyle.Target">
            <summary>
            The component upon which this registration is based.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ThenByDescendingExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it follows an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.OrderByExpressionNode"/>, an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.OrderByDescendingExpressionNode"/>, 
            a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ThenByExpressionNode"/>, or a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ThenByDescendingExpressionNode"/>.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ConcatExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it usually follows (or replaces) a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectExpressionNode"/> of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that 
            represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.QuerySourceSetOperationExpressionNodeBase">
            <summary>
            Acts as a base class for <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.UnionExpressionNode"/> and <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ConcatExpressionNode"/>, i.e., for node parsers for set operations
            acting as an <see cref="T:Remotion.Linq.Clauses.IQuerySource"/>.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext">
            <summary>
            Encapsulates contextual information used while generating clauses from <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.CastExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.MemberAddingNewExpressionTransformerBase">
            <summary>
            Provides a base class for transformers detecting <see cref="T:System.Linq.Expressions.NewExpression"/> nodes for tuple types and adding <see cref="T:System.Reflection.MemberInfo"/> metadata 
            to those nodes. This allows LINQ providers to match member access and constructor arguments more easily.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.StreamedData.StreamedSequence">
            <summary>
            Holds the data needed to represent the output or input of a part of a query in memory. This is mainly used for 
            <see cref="M:Remotion.Linq.Clauses.ResultOperatorBase.ExecuteInMemory(Remotion.Linq.Clauses.StreamedData.IStreamedData)"/>.  The data consists of a sequence of items.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.StreamedSequence.#ctor(System.Collections.IEnumerable,Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedSequence"/> class, setting the <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedSequence.Sequence"/> and 
            <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedSequence.DataInfo"/> properties.
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="streamedSequenceInfo">An instance of <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo"/> describing the sequence.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.StreamedSequence.GetTypedSequence``1">
            <summary>
            Gets the current sequence held by this object as well as an <see cref="T:System.Linq.Expressions.Expression"/> describing the
            sequence's items, throwing an exception if the object does not hold a sequence of items of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected item type of the sequence.</typeparam>
            <returns>
            The sequence and an <see cref="T:System.Linq.Expressions.Expression"/> describing its items.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the item type is not the expected type <typeparamref name="T"/>.</exception>
        </member>
        <member name="P:Remotion.Linq.Clauses.StreamedData.StreamedSequence.Sequence">
            <summary>
            Gets the current sequence for the <see cref="M:Remotion.Linq.Clauses.ResultOperatorBase.ExecuteInMemory(Remotion.Linq.Clauses.StreamedData.IStreamedData)"/> operation. If the object is used as input, this 
            holds the input sequence for the operation. If the object is used as output, this holds the result of the operation.
            </summary>
            <value>The current sequence.</value>
        </member>
        <member name="T:Remotion.Linq.QueryModelVisitorBase">
            <summary>
            Provides a default implementation of <see cref="T:Remotion.Linq.IQueryModelVisitor"/> which automatically visits child items. That is, the default 
            implementation of <see cref="M:Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(Remotion.Linq.QueryModel)"/> automatically calls <c>Accept</c> on all clauses in the <see cref="T:Remotion.Linq.QueryModel"/>
            and the default implementation of <see cref="M:Remotion.Linq.QueryModelVisitorBase.VisitOrderByClause(Remotion.Linq.Clauses.OrderByClause,Remotion.Linq.QueryModel,System.Int32)"/> automatically calls <see cref="M:Remotion.Linq.Clauses.Ordering.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,Remotion.Linq.Clauses.OrderByClause,System.Int32)"/> on the 
            <see cref="T:Remotion.Linq.Clauses.Ordering"/> instances in its <see cref="P:Remotion.Linq.Clauses.OrderByClause.Orderings"/> collection, and so on.
            </summary>
            <remarks>
            This visitor is hardened against modifications performed on the visited <see cref="T:Remotion.Linq.QueryModel"/> while the model is currently being visited.
            That is, if a the <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/> collection changes while a body clause (or a child item of a body clause) is currently 
            being processed, the visitor will handle that gracefully. The same applies to <see cref="P:Remotion.Linq.QueryModel.ResultOperators"/> and
            <see cref="P:Remotion.Linq.Clauses.OrderByClause.Orderings"/>.
            </remarks>
        </member>
        <member name="T:Remotion.Linq.IQueryModelVisitor">
            <summary>
            Defines an interface for visiting the clauses of a <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
            <remarks>
            <para>
            When implement this interface, implement <see cref="M:Remotion.Linq.IQueryModelVisitor.VisitQueryModel(Remotion.Linq.QueryModel)"/>, then call <c>Accept</c> on every clause that should
            be visited. Child clauses, joins, orderings, and result operators are not visited automatically; they always need to be explicitly visited 
            via <see cref="M:Remotion.Linq.Clauses.IBodyClause.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,System.Int32)"/>, <see cref="M:Remotion.Linq.Clauses.JoinClause.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,System.Int32)"/>, <see cref="M:Remotion.Linq.Clauses.Ordering.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,Remotion.Linq.Clauses.OrderByClause,System.Int32)"/>, 
            <see cref="M:Remotion.Linq.Clauses.ResultOperatorBase.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,System.Int32)"/>, and so on.
            </para>
            <para>
            <see cref="T:Remotion.Linq.QueryModelVisitorBase"/> provides a robust default implementation of this interface that can be used as a base for other visitors.
            </para>
            </remarks>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInState">
            <summary>
            Represents an ongoing COPY FROM STDIN operation.
            Provides methods to push data to server and end or cancel the operation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInState.StartCopy(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyFormat)">
            <summary>
            Called from NpgsqlState.ProcessBackendResponses upon CopyInResponse.
            If CopyStream is already set, it is used to read data to push to server, after which the copy is completed.
            Otherwise CopyStream is set to a writable NpgsqlCopyInStream that calls SendCopyData each time it is written to.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInState.SendCopyData(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends given packet to server as a CopyData message.
            Does not check for notifications! Use another thread for that.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInState.SendCopyDone(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector)">
            <summary>
            Sends CopyDone message to server. Handles responses, ie. may throw an exception.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInState.SendCopyFail(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector,System.String)">
            <summary>
            Sends CopyFail message to server. Handles responses, ie. should always throw an exception:
            in CopyIn state the server responds to CopyFail with an error response;
            outside of a CopyIn state the server responds to CopyFail with an error response;
            without network connection or whatever, there's going to eventually be a failure, timeout or user intervention.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInState.CopyFormat">
            <summary>
            Copy format information returned from server.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlPromotableSinglePhaseNotification.Prepare">
            <summary>
            Used when a connection is closed
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlNoticeEventArgs">
            <summary>
            EventArgs class to send Notice parameters, which are just NpgsqlError's in a lighter context.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlNoticeEventArgs.Notice">
            <summary>
            Notice information.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError">
            <summary>
            This class represents the ErrorResponse and NoticeResponse
            message sent from PostgreSQL server.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.ToString">
            <summary>
            Return a string representation of this error object.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.Severity">
            <summary>
            Severity code.  All versions.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.Code">
            <summary>
            Error code.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.Message">
            <summary>
            Terse error message.  All versions.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.Detail">
            <summary>
            Detailed error message.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.Hint">
            <summary>
            Suggestion to help resolve the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.Position">
            <summary>
            Position (one based) within the query string where the error was encounterd.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.InternalPosition">
            <summary>
            Position (one based) within the query string where the error was encounterd.  This position refers to an internal command executed for example inside a PL/pgSQL function. PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.InternalQuery">
            <summary>
            Internal query string where the error was encounterd.  This position refers to an internal command executed for example inside a PL/pgSQL function. PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.Where">
            <summary>
            Trace back information.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.File">
            <summary>
            Source file (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.Line">
            <summary>
            Source file line number (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.Routine">
            <summary>
            Source routine (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.SchemaName">
            <summary>
            Schema name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.TableName">
            <summary>
            Table name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.ColumnName">
            <summary>
            Column name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.DataTypeName">
            <summary>
            Data type of column which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.ConstraintName">
            <summary>
            Constraint name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlError.ErrorSql">
            <summary>
            String containing the sql sent which produced this error.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlBackEndKeyData">
            <summary>
            This class represents a BackEndKeyData message received
            from PostgreSQL
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyFormat">
            <summary>
            Represents information about COPY operation data transfer format as returned by server.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyFormat.#ctor(System.Byte,System.Int16[])">
            <summary>
            Only created when a CopyInResponse or CopyOutResponse is received by NpgsqlState.ProcessBackendResponses()
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyFormat.FieldIsBinary(System.Int32)">
            <summary>
            Returns true if this operation is currently active and field at given location is in binary format.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyFormat.IsBinary">
            <summary>
            Returns true if this operation is currently active and in binary format.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyFormat.FieldCount">
            <summary>
            Returns number of fields if this operation is currently active, otherwise -1
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Util.WindowsPhone.Wp7FactoryGenerator">
            <summary>
            Generates context-bound closures that represent factories from
            a set of heuristics based on delegate type signatures.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.WindowsPhone.Wp7FactoryGenerator.#ctor(System.Type,Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Features.GeneratedFactories.ParameterMapping)">
            <summary />
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.WindowsPhone.Wp7FactoryGenerator.#ctor(System.Type,Revenj.Extensibility.Autofac.Core.IComponentRegistration,Revenj.Extensibility.Autofac.Features.GeneratedFactories.ParameterMapping)">
            <summary />
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.WindowsPhone.Wp7FactoryGenerator.GenerateFactory(Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
            <param name="context">The context in which the factory will be used.</param>
            <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
            <returns>A factory delegate that will work within the context.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.WindowsPhone.Wp7FactoryGenerator.GenerateFactory``1(Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
            <param name="context">The context in which the factory will be used.</param>
            <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
            <returns>A factory delegate that will work within the context.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.ComponentContextHelper">
            <summary>
            Helper for ResolveComponent
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ComponentContextHelper.ResolveComponent(Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
            <param name="context">provided context</param>
            <param name="service">Service which is trying to be resolved</param>
            <param name="registration">The registration.</param>
            <param name="parameters">Parameters for the instance.</param>
            <returns>
            The component instance.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.TypedService">
            <summary>
            Identifies a service according to a type to which it can be assigned.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.TypedService.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.TypedService"/> class.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.TypedService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.TypedService.Equals(Revenj.Extensibility.Autofac.Core.TypedService)">
            <summary>
            Equality comparision for use in Dictionary
            </summary>
            <param name="service">service</param>
            <returns>equals</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.TypedService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.TypedService.ChangeType(System.Type)">
            <summary>
            Return a new service of the same kind, but carrying
            <paramref name="newType"/> as the <see cref="P:Revenj.Extensibility.Autofac.Core.TypedService.ServiceType"/>.
            </summary>
            <param name="newType">The new service type.</param>
            <returns>A new service with the service type.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.TypedService.ServiceType">
            <summary>
            Gets the type of the service.
            </summary>
            <value>The type of the service.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.TypedService.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs">
            <summary>
            Raised when the completion phase of an instance lookup operation ends.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs.#ctor(Revenj.Extensibility.Autofac.Core.Resolving.IInstanceLookup)">
            <summary>
            Create an instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs"/> class.
            </summary>
            <param name="instanceLookup">The instance lookup that is ending the completion phase.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs.InstanceLookup">
            <summary>
            The instance lookup operation that is ending the completion phase.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Lifetime.MatchingScopeLifetime">
            <summary>
            Attaches the component's lifetime to scopes matching a supplied expression.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.MatchingScopeLifetime.#ctor(System.Linq.Expressions.Expression{System.Func{Revenj.Extensibility.Autofac.ILifetimeScope,System.Boolean}})">
            <summary>
            Match scopes based on the provided expression.
            </summary>
            <param name="matchExpression">Expression describing scopes that will match.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.MatchingScopeLifetime.#ctor(System.Object)">
            <summary>
            Match scopes by comparing tags for equality.
            </summary>
            <param name="lifetimeScopeTagToMatch">The tag applied to matching scopes.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.MatchingScopeLifetime.FindScope(Revenj.Extensibility.Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
            <param name="mostNestedVisibleScope">The most nested visible scope.</param>
            <returns>The scope for the component.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.ServiceElement">
            <summary>
            Element describing a service exposed by a component.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ServiceElement.Type">
            <summary>
            Gets the service type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ServiceElement.Name">
            <summary>
            Gets the service name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.MethodCallExpressionParser">
            <summary>
            Parses a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> and creates an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> from it. This is used by 
            <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> for parsing whole expression trees.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.OrderByExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ExceptExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it usually follows (or replaces) a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectExpressionNode"/> of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that 
            represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.CountExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})"/>,
            <see cref="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/>,
            for the Count properties of <see cref="T:System.Collections.Generic.List`1"/>, <see cref="T:System.Collections.ArrayList"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, 
            and <see cref="T:System.Collections.ICollection"/>, and for the <see cref="P:System.Array.Length"/> property of arrays.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Collections.IndexValuePair`1">
            <summary>
            Represents an item enumerated by <see cref="M:Remotion.Linq.Collections.ObservableCollectionExtensions.AsChangeResistantEnumerableWithIndex``1(System.Collections.ObjectModel.ObservableCollection{``0})"/>. This provides access
            to the <see cref="P:Remotion.Linq.Collections.IndexValuePair`1.Index"/> as well as the <see cref="P:Remotion.Linq.Collections.IndexValuePair`1.Value"/> of the enumerated item.
            </summary>
        </member>
        <member name="P:Remotion.Linq.Collections.IndexValuePair`1.Index">
            <summary>
            Gets the index of the current enumerated item. Can only be called while enumerating, afterwards, it will throw an 
            <see cref="T:System.ObjectDisposedException"/>. If an item is inserted into or removed from the collection before the current item, this
            index will change.
            </summary>
        </member>
        <member name="P:Remotion.Linq.Collections.IndexValuePair`1.Value">
            <summary>
            Gets the value of the current enumerated item. Can only be called while enumerating, afterwards, it will throw an 
            <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.AllResultOperator">
            <summary>
            Represents a check whether all items returned by a query satisfy a predicate.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "All" call in the following example corresponds to an <see cref="T:Remotion.Linq.Clauses.ResultOperators.AllResultOperator"/>.
            <code>
            var result = (from s in Students
                         select s).All();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AllResultOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.ResultOperators.AllResultOperator"/> class.
            </summary>
            <param name="predicate">The predicate to evaluate. This is a resolved version of the body of the <see cref="T:System.Linq.Expressions.LambdaExpression"/> that would be 
            passed to <see cref="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/>.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AllResultOperator.ExecuteInMemory``1(Remotion.Linq.Clauses.StreamedData.StreamedSequence)">
            <inheritdoc cref="M:Remotion.Linq.Clauses.ResultOperatorBase.ExecuteInMemory(Remotion.Linq.Clauses.StreamedData.IStreamedData)"/>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AllResultOperator.Clone(Remotion.Linq.Clauses.CloneContext)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AllResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AllResultOperator.GetOutputDataInfo(Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AllResultOperator.ToString">
            <inheritdoc />
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.AllResultOperator.Predicate">
            <summary>
            Gets or sets the predicate to evaluate on all items in the sequence.
            This is a resolved version of the body of the <see cref="T:System.Linq.Expressions.LambdaExpression"/> that would be 
            passed to <see cref="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/>.
            </summary>
            <value>The predicate.</value>
        </member>
        <member name="T:Remotion.Linq.Clauses.Expressions.PartialEvaluationExceptionExpression">
            <summary>
            Wraps an exception whose partial evaluation caused an exception.
            </summary>
            <remarks>
            <para>
            When <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.PartialEvaluatingExpressionTreeVisitor"/> encounters an exception while evaluating an independent expression subtree, it
            will wrap the subtree within a <see cref="T:Remotion.Linq.Clauses.Expressions.PartialEvaluationExceptionExpression"/>. The wrapper contains both the <see cref="P:Remotion.Linq.Clauses.Expressions.PartialEvaluationExceptionExpression.Exception"/> 
            instance and the <see cref="P:Remotion.Linq.Clauses.Expressions.PartialEvaluationExceptionExpression.EvaluatedExpression"/> that caused the exception.
            </para>
            <para>
            To explicitly support this expression type, implement  <see cref="T:Remotion.Linq.Clauses.Expressions.IPartialEvaluationExceptionExpressionVisitor"/>.
            To ignore this wrapper and only handle the inner <see cref="P:Remotion.Linq.Clauses.Expressions.PartialEvaluationExceptionExpression.EvaluatedExpression"/>, call the <see cref="M:Remotion.Linq.Clauses.Expressions.PartialEvaluationExceptionExpression.Reduce"/> method and visit the result.
            </para>
            <para>
            Subclasses of <see cref="T:Remotion.Linq.Parsing.ThrowingExpressionTreeVisitor"/> that do not implement <see cref="T:Remotion.Linq.Clauses.Expressions.IPartialEvaluationExceptionExpressionVisitor"/> will, 
            by default, automatically reduce this expression type to the <see cref="P:Remotion.Linq.Clauses.Expressions.PartialEvaluationExceptionExpression.EvaluatedExpression"/> in the 
            <see cref="M:Remotion.Linq.Parsing.ThrowingExpressionTreeVisitor.VisitExtensionExpression(Remotion.Linq.Clauses.Expressions.ExtensionExpression)"/> method.
            </para>
            <para>
            Subclasses of <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitor"/> that do not implement <see cref="T:Remotion.Linq.Clauses.Expressions.IPartialEvaluationExceptionExpressionVisitor"/> will, 
            by default, ignore this expression and visit its child expressions via the <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.VisitExtensionExpression(Remotion.Linq.Clauses.Expressions.ExtensionExpression)"/> and 
            <see cref="M:Remotion.Linq.Clauses.Expressions.PartialEvaluationExceptionExpression.VisitChildren(Remotion.Linq.Parsing.ExpressionTreeVisitor)"/> methods.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression">
            <summary>
            Acts as a base class for custom extension expressions, providing advanced visitor support. Also allows extension expressions to be reduced to 
            a tree of standard expressions with equivalent semantics.
            </summary>
            <remarks>
            Custom extension expressions can specify their own <see cref="T:System.Linq.Expressions.ExpressionType"/> or use a default one. re-linq reserves 
            <see cref="T:System.Linq.Expressions.ExpressionType"/> values from 100000 to 150000 for its own expressions. Custom LINQ providers can use 150001 and above.
            </remarks>
        </member>
        <member name="F:Remotion.Linq.Clauses.Expressions.ExtensionExpression.DefaultExtensionExpressionNodeType">
            <summary>
            Defines a standard <see cref="T:System.Linq.Expressions.ExpressionType"/> value that is used by all <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/> subclasses unless they specify
            their own <see cref="T:System.Linq.Expressions.ExpressionType"/> value.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.Expressions.ExtensionExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/> class with a default <see cref="T:System.Linq.Expressions.ExpressionType"/> value.
            </summary>
            <param name="type">The type of the value represented by the <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/>.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.Expressions.ExtensionExpression.#ctor(System.Type,System.Linq.Expressions.ExpressionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/> class with a custom <see cref="T:System.Linq.Expressions.ExpressionType"/> value.
            </summary>
            <param name="type">The type of the value represented by the <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/>.</param>
            <param name="nodeType">The <see cref="T:System.Linq.Expressions.ExpressionType"/> value to use as this expression's <see cref="P:System.Linq.Expressions.Expression.NodeType"/> value.
            LINQ providers should use values starting from 150001 and above.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.Expressions.ExtensionExpression.Accept(Remotion.Linq.Parsing.ExpressionTreeVisitor)">
            <summary>
            Accepts the specified visitor, by default dispatching to <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.VisitExtensionExpression(Remotion.Linq.Clauses.Expressions.ExtensionExpression)"/>. 
            Inheritors of the <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/> class can override this method in order to dispatch to a specific Visit method.
            </summary>
            <param name="visitor">The visitor whose Visit method should be invoked.</param>
            <returns>The <see cref="T:System.Linq.Expressions.Expression"/> returned by the visitor.</returns>
            <remarks>
            Overriders can test the <paramref name="visitor"/> for a specific interface. If the visitor supports the interface, the extension expression 
            can dispatch to the respective strongly-typed Visit method declared in the interface. If it does not, the extension expression should call 
            the base implementation of <see cref="M:Remotion.Linq.Clauses.Expressions.ExtensionExpression.Accept(Remotion.Linq.Parsing.ExpressionTreeVisitor)"/>, which will dispatch to <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.VisitExtensionExpression(Remotion.Linq.Clauses.Expressions.ExtensionExpression)"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Linq.Clauses.Expressions.ExtensionExpression.VisitChildren(Remotion.Linq.Parsing.ExpressionTreeVisitor)">
            <summary>
            Must be overridden by <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/> subclasses by calling <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.VisitExpression(System.Linq.Expressions.Expression)"/> on all 
            children of this extension node. 
            </summary>
            <param name="visitor">The visitor to visit the child nodes with.</param>
            <returns>This <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/>, or an expression that should replace it in the surrounding tree.</returns>
            <remarks>
            If the visitor replaces any of the child nodes, a new <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/> instance should
            be returned holding the new child nodes. If the node has no children or the visitor does not replace any child node, the method should
            return this <see cref="T:Remotion.Linq.Clauses.Expressions.ExtensionExpression"/>. 
            </remarks>
        </member>
        <member name="T:Remotion.Linq.IQueryExecutor">
            <summary>
            Constitutes the bridge between re-linq and a concrete query provider implementation. Concrete providers implement this interface
            and <see cref="T:Remotion.Linq.QueryProviderBase"/> calls the respective method of the interface implementation when a query is to be executed.
            </summary>
        </member>
        <member name="M:Remotion.Linq.IQueryExecutor.ExecuteScalar``1(Remotion.Linq.QueryModel)">
            <summary>
            Executes the given <paramref name="queryModel"/> as a scalar query, i.e. as a query returning a scalar value of type <typeparamref name="T"/>.
            The query ends with a scalar result operator, for example a <see cref="T:Remotion.Linq.Clauses.ResultOperators.CountResultOperator"/> or a <see cref="T:Remotion.Linq.Clauses.ResultOperators.SumResultOperator"/>.
            </summary>
            <typeparam name="T">The type of the scalar value returned by the query.</typeparam>
            <param name="queryModel">The <see cref="T:Remotion.Linq.QueryModel"/> representing the query to be executed. Analyze this via an 
            <see cref="T:Remotion.Linq.IQueryModelVisitor"/>.</param>
            <returns>A scalar value of type <typeparamref name="T"/> that represents the query's result.</returns>
            <remarks>
            The difference between <see cref="M:Remotion.Linq.IQueryExecutor.ExecuteSingle``1(Remotion.Linq.QueryModel,System.Boolean)"/> and <see cref="M:Remotion.Linq.IQueryExecutor.ExecuteScalar``1(Remotion.Linq.QueryModel)"/> is in the kind of object that is returned.
            <see cref="M:Remotion.Linq.IQueryExecutor.ExecuteSingle``1(Remotion.Linq.QueryModel,System.Boolean)"/> is used when a query that would otherwise return a collection result set should pick a single value from the 
            set, for example the first, last, minimum, maximum, or only value in the set. <see cref="M:Remotion.Linq.IQueryExecutor.ExecuteScalar``1(Remotion.Linq.QueryModel)"/> is used when a value is 
            calculated or aggregated from all the values in the collection result set. This applies to, for example, item counts, average calculations,
            checks for the existence of a specific item, and so on.
            </remarks>
        </member>
        <member name="M:Remotion.Linq.IQueryExecutor.ExecuteSingle``1(Remotion.Linq.QueryModel,System.Boolean)">
            <summary>
            Executes the given <paramref name="queryModel"/> as a single object query, i.e. as a query returning a single object of type 
            <typeparamref name="T"/>.
            The query ends with a single result operator, for example a <see cref="T:Remotion.Linq.Clauses.ResultOperators.FirstResultOperator"/> or a <see cref="T:Remotion.Linq.Clauses.ResultOperators.SingleResultOperator"/>.
            </summary>
            <typeparam name="T">The type of the single value returned by the query.</typeparam>
            <param name="queryModel">The <see cref="T:Remotion.Linq.QueryModel"/> representing the query to be executed. Analyze this via an 
            <see cref="T:Remotion.Linq.IQueryModelVisitor"/>.</param>
            <param name="returnDefaultWhenEmpty">If <see langword="true"/>, the executor must return a default value when its result set is empty; 
            if <see langword="false"/>, it should throw an <see cref="T:System.InvalidOperationException"/> when its result set is empty.</param>
            <returns>A single value of type <typeparamref name="T"/> that represents the query's result.</returns>
            <remarks>
            The difference between <see cref="M:Remotion.Linq.IQueryExecutor.ExecuteSingle``1(Remotion.Linq.QueryModel,System.Boolean)"/> and <see cref="M:Remotion.Linq.IQueryExecutor.ExecuteScalar``1(Remotion.Linq.QueryModel)"/> is in the kind of object that is returned.
            <see cref="M:Remotion.Linq.IQueryExecutor.ExecuteSingle``1(Remotion.Linq.QueryModel,System.Boolean)"/> is used when a query that would otherwise return a collection result set should pick a single value from the 
            set, for example the first, last, minimum, maximum, or only value in the set. <see cref="M:Remotion.Linq.IQueryExecutor.ExecuteScalar``1(Remotion.Linq.QueryModel)"/> is used when a value is 
            calculated or aggregated from all the values in the collection result set. This applies to, for example, item counts, average calculations,
            checks for the existence of a specific item, and so on.
            </remarks>
        </member>
        <member name="M:Remotion.Linq.IQueryExecutor.ExecuteCollection``1(Remotion.Linq.QueryModel)">
            <summary>
            Executes the given <paramref name="queryModel"/> as a collection query, i.e. as a query returning objects of type <typeparamref name="T"/>. 
            The query does not end with a scalar result operator, but it can end with a single result operator, for example 
            <see cref="T:Remotion.Linq.Clauses.ResultOperators.SingleResultOperator"/> or <see cref="T:Remotion.Linq.Clauses.ResultOperators.FirstResultOperator"/>. In such a case, the returned enumerable must yield exactly 
            one object (or none if the last result operator allows empty result sets).
            </summary>
            <typeparam name="T">The type of the items returned by the query.</typeparam>
            <param name="queryModel">The <see cref="T:Remotion.Linq.QueryModel"/> representing the query to be executed. Analyze this via an 
            <see cref="T:Remotion.Linq.IQueryModelVisitor"/>.</param>
            <returns>A scalar value of type <typeparamref name="T"/> that represents the query's result.</returns>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.ProvideClientCertificatesCallback">
            <summary>
            Represents the method that allows the application to provide a certificate collection to be used for SSL clien authentication
            </summary>
            <param name="certificates">A <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection">X509CertificateCollection</see> to be filled with one or more client certificates.</param>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector">
            <summary>
            !!! Helper class, for compilation only.
            Connector implements the logic for the Connection Objects to
            access the physical connection to the database, and isolate
            the application developer from connection pooling internals.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.#ctor(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectionStringBuilder,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="Shared">Controls whether the connector can be shared.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.IsValid">
            <summary>
            This method checks if the connector is still ok.
            We try to send a simple query text, select 1 as ConnectionTest;
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.ReleaseResources">
            <summary>
            This method is responsible for releasing all resources associated with this Connector.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.ReleasePlansPortals">
            <summary>
            This method is responsible to release all portals used by this Connector.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.DefaultCertificateSelectionCallback(System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Default SSL CertificateSelectionCallback implementation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.DefaultCertificateValidationCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32[])">
            <summary>
            Default SSL CertificateValidationCallback implementation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.DefaultPrivateKeySelectionCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.String)">
            <summary>
            Default SSL PrivateKeySelectionCallback implementation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.DefaultProvideClientCertificatesCallback(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Default SSL ProvideClientCertificatesCallback implementation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.ProcessServerVersion">
            <summary>
            This method is required to set all the version dependent features flags.
            SupportsPrepare means the server can use prepared query plans (7.3+)
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.Open">
            <summary>
            Opens the physical connection to the server.
            </summary>
            <remarks>Usually called by the RequestConnector
            Method of the connection pool manager.</remarks>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.Close">
            <summary>
            Closes the physical connection to the server.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.NextPortalName">
            <summary>
             Returns next portal index.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.NextPlanName">
            <summary>
             Returns next plan index.
            </summary>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.Notice">
            <summary>
            Occurs on NoticeResponses from the PostgreSQL backend.
            </summary>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.Notification">
            <summary>
            Occurs on NotificationResponses from the PostgreSQL backend.
            </summary>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.ProvideClientCertificatesCallback">
            <summary>
            Called to provide client certificates for SSL handshake.
            </summary>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.CertificateSelectionCallback">
            <summary>
            Mono.Security.Protocol.Tls.CertificateSelectionCallback delegate.
            </summary>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.CertificateValidationCallback">
            <summary>
            Mono.Security.Protocol.Tls.CertificateValidationCallback delegate.
            </summary>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.PrivateKeySelectionCallback">
            <summary>
            Mono.Security.Protocol.Tls.PrivateKeySelectionCallback delegate.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.ConnectionString">
            <summary>
            Return Connection String.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.ServerVersion">
            <summary>
            Version of backend server this connector is connected to.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.Stream">
            <summary>
            The physical connection stream to the backend.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.Socket">
            <summary>
            The physical connection socket to the backend.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.IsInitialized">
            <summary>
            Reports if this connector is fully connected.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.Mediator">
            <summary>
            The connection mediator.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.Transaction">
            <summary>
            Report if the connection is in a transaction.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector.SupportsPrepare">
            <summary>
            Report whether the current connection can support prepare functionality.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn">
            <summary>
            Represents a PostgreSQL COPY FROM STDIN operation with a corresponding SQL statement
            to execute against a PostgreSQL database
            and an associated stream used to read data from (if provided by user)
            or for writing it (when generated by driver).
            Eg. new NpgsqlCopyIn("COPY mytable FROM STDIN", connection, streamToRead).Start();
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.#ctor(System.String,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection)">
            <summary>
            Creates NpgsqlCommand to run given query upon Start(). Data for the requested COPY IN operation can then be written to CopyData stream followed by a call to End() or Cancel().
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.#ctor(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection)">
            <summary>
            Given command is run upon Start(). Data for the requested COPY IN operation can then be written to CopyData stream followed by a call to End() or Cancel().
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.#ctor(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection,System.IO.Stream)">
            <summary>
            Given command is executed upon Start() and all data from fromStream is passed to it as copy data.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.FieldIsBinary(System.Int32)">
            <summary>
            Returns true if this operation is currently active and field at given location is in binary format.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.Start">
            <summary>
            Command specified upon creation is executed as a non-query.
            If CopyStream is set upon creation, it will be flushed to server as copy data, and operation will be finished immediately.
            Otherwise the CopyStream member can be used for writing copy data to server and operation finished with a call to End() or Cancel().
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.End">
            <summary>
            Called after writing all data to CopyStream to successfully complete this copy operation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.Cancel(System.String)">
            <summary>
            Withdraws an already started copy operation. The operation will fail with given error message.
            Will do nothing if current operation is not active.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.IsActive">
            <summary>
            Returns true if the connection is currently reserved for this operation.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.CopyStream">
            <summary>
            The stream provided by user or generated upon Start().
            User may provide a stream to constructor; it is used to pass to server all data read from it.
            Otherwise, call to Start() sets this to a writable NpgsqlCopyInStream that passes all data written to it to server.
            In latter case this is only available while the copy operation is active and null otherwise.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.IsBinary">
            <summary>
            Returns true if this operation is currently active and in binary format.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.FieldCount">
            <summary>
            Returns number of fields expected on each input row if this operation is currently active, otherwise -1
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.NpgsqlCommand">
            <summary>
            The Command used to execute this copy operation.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyIn.CopyBufferSize">
            <summary>
            Set before a COPY IN query to define size of internal buffer for reading from given CopyStream.
            </summary>
        </member>
        <member name="T:Mono.Security.Cryptography.DiffieHellmanManaged">
            <summary>
            Implements the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="T:Mono.Security.Cryptography.DiffieHellman">
            <summary>
            Defines a base class from which all Diffie-Hellman implementations inherit.
            </summary>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.Create">
            <summary>
            Creates an instance of the default implementation of the <see cref="T:Mono.Security.Cryptography.DiffieHellman"/> algorithm.
            </summary>
            <returns>A new instance of the default implementation of DiffieHellman.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of <see cref="T:Mono.Security.Cryptography.DiffieHellman"/>.
            </summary>
            <param name="algName">The name of the implementation of DiffieHellman to use.</param>
            <returns>A new instance of the specified implementation of DiffieHellman.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.CreateKeyExchange">
            <summary>
            When overridden in a derived class, creates the key exchange data. 
            </summary>
            <returns>The key exchange data to be sent to the intended recipient.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.DecryptKeyExchange(System.Byte[])">
            <summary>
            When overridden in a derived class, extracts secret information from the key exchange data.
            </summary>
            <param name="keyex">The key exchange data within which the secret information is hidden.</param>
            <returns>The secret information derived from the key exchange data.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.ExportParameters(System.Boolean)">
            <summary>
            When overridden in a derived class, exports the <see cref="T:Mono.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="includePrivate"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
            <returns>The parameters for Diffie-Hellman.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.ImportParameters(Mono.Security.Cryptography.DHParameters)">
            <summary>
            When overridden in a derived class, imports the specified <see cref="T:Mono.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="parameters">The parameters for Diffie-Hellman.</param>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.FromXmlString(System.String)">
            <summary>
            Reconstructs a <see cref="T:Mono.Security.Cryptography.DiffieHellman"/> object from an XML string.
            </summary>
            <param name="xmlString">The XML string to use to reconstruct the DiffieHellman object.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">One of the values in the XML string is invalid.</exception>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.ToXmlString(System.Boolean)">
            <summary>
            Creates and returns an XML string representation of the current <see cref="T:Mono.Security.Cryptography.DiffieHellman"/> object.
            </summary>
            <param name="includePrivateParameters"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
            <returns>An XML string encoding of the current DiffieHellman object.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.#ctor">
            <summary>
            Initializes a new <see cref="T:Mono.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <remarks>The default length of the shared secret is 1024 bits.</remarks>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Int32,System.Int32,Mono.Security.Cryptography.DHKeyGeneration)">
            <summary>
            Initializes a new <see cref="T:Mono.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <param name="bitLength">The length, in bits, of the public P parameter.</param>
            <param name="l">The length, in bits, of the secret value X. This parameter can be set to 0 to use the default size.</param>
            <param name="method">One of the <see cref="T:Mono.Security.Cryptography.DHKeyGeneration"/> values.</param>
            <remarks>The larger the bit length, the more secure the algorithm is. The default is 1024 bits. The minimum bit length is 128 bits.<br/>The size of the private value will be one fourth of the bit length specified.</remarks>
            <exception cref="T:System.ArgumentException">The specified bit length is invalid.</exception>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new <see cref="T:Mono.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <param name="p">The P parameter of the Diffie-Hellman algorithm. This is a public parameter.</param>
            <param name="g">The G parameter of the Diffie-Hellman algorithm. This is a public parameter.</param>
            <param name="x">The X parameter of the Diffie-Hellman algorithm. This is a private parameter. If this parameters is a null reference (<b>Nothing</b> in Visual Basic), a secret value of the default size will be generated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> or <paramref name="g"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="p"/> or <paramref name="g"/> is invalid.</exception>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Initializes a new <see cref="T:Mono.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <param name="p">The P parameter of the Diffie-Hellman algorithm.</param>
            <param name="g">The G parameter of the Diffie-Hellman algorithm.</param>
            <param name="l">The length, in bits, of the private value. If 0 is specified, the default value will be used.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> or <paramref name="g"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="l"/> is invalid.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="p"/> or <paramref name="g"/> is invalid.</exception>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.CreateKeyExchange">
            <summary>
            Creates the key exchange data.
            </summary>
            <returns>The key exchange data to be sent to the intended recipient.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.DecryptKeyExchange(System.Byte[])">
            <summary>
            Extracts secret information from the key exchange data.
            </summary>
            <param name="keyEx">The key exchange data within which the shared key is hidden.</param>
            <returns>The shared key derived from the key exchange data.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.ExportParameters(System.Boolean)">
            <summary>
            Exports the <see cref="T:Mono.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="includePrivateParameters"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
            <returns>The parameters for <see cref="T:Mono.Security.Cryptography.DiffieHellman"/>.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.ImportParameters(Mono.Security.Cryptography.DHParameters)">
            <summary>
            Imports the specified <see cref="T:Mono.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="parameters">The parameters for <see cref="T:Mono.Security.Cryptography.DiffieHellman"/>.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="P"/> or <paramref name="G"/> is a null reference (<b>Nothing</b> in Visual Basic) -or- <paramref name="P"/> is not a prime number.</exception>
        </member>
        <member name="P:Mono.Security.Cryptography.DiffieHellmanManaged.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm.
            </summary>
            <value>The name of the key exchange algorithm.</value>
        </member>
        <member name="P:Mono.Security.Cryptography.DiffieHellmanManaged.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm.
            </summary>
            <value>The name of the signature algorithm.</value>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.PositionalParameter">
            <summary>
            A parameter that is identified according to an integer representing its
            position in an argument list. When applied to a reflection-based
            component, <see cref="P:Revenj.Extensibility.Autofac.PositionalParameter.Position"/> will be matched against
            the indices of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Revenj.Extensibility.Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.Int32)"/>.
            </summary>
            <example>
            Component with parameter:
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            Providing the parameter:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(new PositionalParameter(0, 123));
            </code>
            </example>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.ConstantParameter">
            <summary>
            Base class for parameters that provide a constant value.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.ConstantParameter.#ctor(System.Object,System.Predicate{System.Reflection.ParameterInfo})">
            <summary>
            Create a constant parameter that will apply to parameters matching
            the supplied predicate.
            </summary>
            <param name="value"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.ConstantParameter.CanSupplyValue(System.Reflection.ParameterInfo,Revenj.Extensibility.Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ConstantParameter.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.PositionalParameter.#ctor(System.Int32,System.Object)">
            <summary>
            Construct a positional parameter with the specified constant value.
            </summary>
            <param name="position">The zero-based position of the parameter.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.PositionalParameter.Position">
            <summary>
            The zero-based position of the parameter.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Integration.Mef.ExportConfigurationBuilder">
            <summary>
            Configures an Export on an Autofac component.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.ExportConfigurationBuilder.As``1">
            <summary>
            Export the component under typed contract <typeparamref name="TContract"/>.
            </summary>
            <typeparam name="TContract">Contract type.</typeparam>
            <returns>Builder for additional configuration.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.ExportConfigurationBuilder.AsNamed``1(System.String)">
            <summary>
            Export the component under named contract <paramref name="name"/>.
            </summary>
            <typeparam name="TExportedValue">Exported value type.</typeparam>
            <param name="name">Contract name.</param>
            <returns>Builder for additional configuration.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.ExportConfigurationBuilder.WithMetadata(System.String,System.Object)">
            <summary>
            Add metadata to the export.
            </summary>
            <param name="key">Metadata key.</param>
            <param name="value">Metadata value.</param>
            <returns>Builder for additional configuration.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.ExportConfigurationBuilder.WithMetadata(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Add metadata to the export.
            </summary>
            <param name="metadata">Metadata.</param>
            <returns>Builder for additional configuration.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData">
            <summary>
            Activation data for types located by scanning assemblies.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.ReflectionActivatorData">
            <summary>
            Builder for reflection-based activators.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.ReflectionActivatorData.#ctor(System.Type)">
            <summary>
            Specify a reflection activator for the given type.
            </summary>
            <param name="implementor">Type that will be activated.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.ReflectionActivatorData.ImplementationType">
            <summary>
            Get the implementation type.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.ReflectionActivatorData.ConstructorFinder">
            <summary>
            The constructor finder for the registration.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.ReflectionActivatorData.ConstructorSelector">
            <summary>
            The constructor selector for the registration.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.ReflectionActivatorData.ConfiguredParameters">
            <summary>
            The explicitly bound constructor parameters.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.ReflectionActivatorData.ConfiguredProperties">
            <summary>
            The explicitly bound properties.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData.#ctor">
            <summary>
            Create an instance of <see cref="T:Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData"/>.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData.Filters">
            <summary>
            The filters applied to the types from the scanned assembly.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData.ConfigurationActions">
            <summary>
            Additional actions to be performed on the concrete type registrations.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData.PostScanningCallbacks">
            <summary>
            Actions to be called once the scanning operation is complete.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.LazyDependencies.LazyRegistrationSource">
            <summary>
            Support the <see cref="T:System.Lazy`1"/> 
            type automatically whenever type T is registered with the container.
            When a dependency of a lazy type is used, the instantiation of the underlying
            component will be delayed until the Value property is first accessed.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupEndingEventArgs">
            <summary>
            Fired when an instance is looked up.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupEndingEventArgs.#ctor(Revenj.Extensibility.Autofac.Core.Resolving.IInstanceLookup,System.Boolean)">
            <summary>
            Create an instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupBeginningEventArgs"/> class.
            </summary>
            <param name="instanceLookup">The instance lookup that is ending.</param>
            <param name="newInstanceActivated">True if a new instance was created as part of the operation.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupEndingEventArgs.NewInstanceActivated">
            <summary>
            True if a new instance was created as part of the operation.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Resolving.InstanceLookupEndingEventArgs.InstanceLookup">
            <summary>
            The instance lookup operation that is ending.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Registration.ServiceRegistrationInfo">
            <summary>
            Tracks the services known to the registry.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Core.Registration.ServiceRegistrationInfo._sourcesToQuery">
            <summary>
            Used for bookkeeping so that the same source is not queried twice (may be null.)
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ServiceRegistrationInfo.#ctor(Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.Registration.ServiceRegistrationInfo"/> class.
            </summary>
            <param name="service">The tracked service.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ServiceRegistrationInfo.IsInitialized">
            <summary>
            The first time a service is requested, initialization (e.g. reading from sources)
            happens. This value will then be set to true. Calling many methods on this type before
            initialisation is an error.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ServiceRegistrationInfo.Implementations">
            <summary>
            The known implementations.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ServiceRegistrationInfo.IsRegistered">
            <summary>
            True if any implementations are known.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Registration.ExternalRegistrySource">
            <summary>
            Pulls registrations from another component registry.
            Excludes most auto-generated registrations - currently has issues with
            collection registrations.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ExternalRegistrySource.#ctor(Revenj.Extensibility.Autofac.Core.IComponentRegistry)">
            <summary>
            Create an external registry source that draws components from
            <paramref name="registry"/>.
            </summary>
            <param name="registry">Component registry to pull registrations from.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Registration.ExternalRegistrySource.RegistrationsFor(Revenj.Extensibility.Autofac.Core.Service,System.Func{Revenj.Extensibility.Autofac.Core.Service,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.IComponentRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Registration.ExternalRegistrySource.IsAdapterForIndividualComponents">
            <summary>
            In this case because the components that are adapted do not come from the same
            logical scope, we must return false to avoid duplicating them.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope">
            <summary>
            Lifetime scope implementation.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.ISharingLifetimeScope">
            <summary>
            Defines a nested structure of lifetimes.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.ISharingLifetimeScope.GetOrCreateAndShare(System.Guid,System.Func{System.Object})">
            <summary>
            Try to retrieve an instance based on a GUID key. If the instance
            does not exist, invoke <paramref name="creator"/> to create it.
            </summary>
            <param name="id">instance id.</param>
            <param name="creator">Creation function.</param>
            <returns>An instance.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ISharingLifetimeScope.RootLifetimeScope">
            <summary>
            The root of the sharing hierarchy.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ISharingLifetimeScope.ParentLifetimeScope">
            <summary>
            The parent of this node of the hierarchy, or null.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope._synchRoot">
            <summary>
            Protects shared instances from concurrent access. Other members and the base class are threadsafe.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.RootTag">
            <summary>
            The tag applied to root scopes when no other tag is specified.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.#ctor(Revenj.Extensibility.Autofac.Core.IComponentRegistry,Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope,System.Object)">
            <summary>
            Create a lifetime scope for the provided components and nested beneath a parent.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>.</param>
            <param name="componentRegistry">Components used in the scope.</param>
            <param name="parent">Parent scope.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.#ctor(Revenj.Extensibility.Autofac.Core.IComponentRegistry,System.Object)">
            <summary>
            Create a root lifetime scope for the provided components.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>.</param>
            <param name="componentRegistry">Components used in the scope.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.#ctor(Revenj.Extensibility.Autofac.Core.IComponentRegistry)">
            <summary>
            Create a root lifetime scope for the provided components.
            </summary>
            <param name="componentRegistry">Components used in the scope.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope">
            <summary>
            Begin a new anonymous sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(System.Object)">
            <summary>
            Begin a new tagged sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(System.Action{Revenj.Extensibility.Autofac.ContainerBuilder})">
            <summary>
            Begin a new anonymous sub-scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <param name="configurationAction">Action on a <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>
            that adds component registations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
            <example>
            IContainer cr = // ...
            using (var lifetime = cr.BeginLifetimeScope(builder =&gt; {
                    builder.RegisterType&lt;Foo&gt;();
                    builder.RegisterType&lt;Bar&gt;().As&lt;IBar&gt;(); })
            {
                var foo = lifetime.Resolve&lt;Foo&gt;();
            }
            </example>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(System.Object,System.Action{Revenj.Extensibility.Autofac.ContainerBuilder})">
            <summary>
            Begin a new tagged sub-scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Revenj.Extensibility.Autofac.ILifetimeScope"/>.</param>
            <param name="configurationAction">Action on a <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>
            that adds component registations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
            <example>
            IContainer cr = // ...
            using (var lifetime = cr.BeginLifetimeScope("unitOfWork", builder =&gt; {
                    builder.RegisterType&lt;Foo&gt;();
                    builder.RegisterType&lt;Bar&gt;().As&lt;IBar&gt;(); })
            {
                var foo = lifetime.Resolve&lt;Foo&gt;();
            }
            </example>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.ResolveLookup(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Resolve an lookup of the provided registration within the context.
            </summary>
            <param name="service">Service which is trying to be resolved</param>
            <param name="registration">The registration.</param>
            <param name="parameters">Parameters for the instance.</param>
            <returns>
            The component lookup.
            </returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(System.Guid,System.Func{System.Object})">
            <summary>
            Try to retrieve an instance based on a GUID key. If the instance
            does not exist, invoke <paramref name="creator"/> to create it.
            </summary>
            <param name="id">Key to look up.</param>
            <param name="creator">Creation function.</param>
            <returns>An instance.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object 
            to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is 
            no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.ParentLifetimeScope">
            <summary>
            The parent of this node of the hierarchy, or null.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.RootLifetimeScope">
            <summary>
            The root of the sharing hierarchy.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.Disposer">
            <summary>
            The disposer associated with this container. Instances can be associated
            with it manually if required.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.Tag">
            <summary>
            Tag applied to the lifetime scope.
            </summary>
            <remarks>The tag applied to this scope and the contexts generated when
            it resolves component dependencies.</remarks>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScope.ComponentRegistry">
            <summary>
            Associates services with the components that provide them.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.ContainerBuilder">
            <summary>
            Used to build an <see cref="T:Revenj.Extensibility.Autofac.IContainer"/> from component registrations.
            </summary>
            <example>
            <code>
            var builder = new ContainerBuilder();
            
            builder.RegisterType&lt;Logger&gt;()
                .As&lt;ILogger&gt;()
                .SingleInstance();
            
            builder.Register(c =&gt; new MessageHandler(c.Resolve&lt;ILogger&gt;()));
            
            var container = builder.Build();
            // resolve components from container...
            </code>
            </example>
            <remarks>Most <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/> functionality is accessed
            via extension methods in <see cref="T:Revenj.Extensibility.Autofac.RegistrationExtensions"/>.</remarks>
            <seealso cref="T:Revenj.Extensibility.Autofac.IContainer"/>
            <see cref="T:Revenj.Extensibility.Autofac.RegistrationExtensions"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ContainerBuilder.RegisterCallback(System.Action{Revenj.Extensibility.Autofac.Core.IComponentRegistry})">
            <summary>
            Register a callback that will be invoked when the container is configured.
            </summary>
            <remarks>This is primarily for extending the builder syntax.</remarks>
            <param name="configurationCallback">Callback to execute.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ContainerBuilder.Build(Revenj.Extensibility.Autofac.Builder.ContainerBuildOptions)">
            <summary>
            Create a new container with the component registrations that have been made.
            </summary>
            <param name="options">Options that influence the way the container is initialised.</param>
            <remarks>
            Build can only be called once per <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>
            - this prevents ownership issues for provided instances.
            Build enables support for the relationship types that come with Autofac (e.g.
            Func, Owned, Meta, Lazy, IEnumerable.) To exclude support for these types,
            first create the container, then call Update() on the builder.
            </remarks>
            <returns>A new container with the configured component registrations.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.PropertyElement">
            <summary>
            Element describing a component property.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.PropertyElement.CoerceValue">
            <summary>
            Get the value of this element
            </summary>
            <returns></returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.PropertyElement.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.PropertyElement.Value">
            <summary>
            Gets the value to be set (will be converted.)
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.PropertyElement.List">
            <summary>
            If this property's value is a list of values
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.PropertyElement.Dictionary">
            <summary>
            If this property's value is a dictionary
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.ComponentElementCollection">
            <summary>
            A collection of component elements.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ComponentElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Configuration.ComponentElementCollection"/> class.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.ExternallyOwned">
            <summary>
            Configure the component so that instances are never disposed by the container.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.OwnedByLifetimeScope">
            <summary>
            Configure the component so that instances that support IDisposable are
            disposed by the container (default.)
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.InstancePerDependency">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets a new, unique instance (default.)
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.SingleInstance">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets the same, shared instance.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.InstancePerLifetimeScope">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a single ILifetimeScope gets the same, shared instance. Dependent components in
            different lifetime scopes will get different instances.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope tagged with the provided tag value gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the tagged scope will
            share the parent's instance. If no appropriately tagged scope can be found in the
            hierarchy an <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="lifetimeScopeTag">Tag applied to matching lifetime scopes.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.InstancePerOwned``1">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.InstancePerOwned(System.Type)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.InstancePerOwned``1(System.Object)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <param name="serviceKey">Key to associate with the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.InstancePerOwned(System.Object,System.Type)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="serviceKey">Key to associate with the component.</param>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.As``1">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.As``2">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService1">Service type.</typeparam>
            <typeparam name="TService2">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.As``3">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService1">Service type.</typeparam>
            <typeparam name="TService2">Service type.</typeparam>
            <typeparam name="TService3">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.As(System.Type[])">
            <summary>
            Configure the services that the component will provide.
            </summary>
            <param name="services">Service types to expose.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.As(Revenj.Extensibility.Autofac.Core.Service[])">
            <summary>
            Configure the services that the component will provide.
            </summary>
            <param name="services">Services to expose.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.Named(System.String,System.Type)">
            <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
            <param name="serviceName">Named service to associate with the component.</param>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.Named``1(System.String)">
            <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
            <param name="serviceName">Named service to associate with the component.</param>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.Keyed(System.Object,System.Type)">
            <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
            <param name="serviceKey">Key to associate with the component.</param>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.Keyed``1(System.Object)">
            <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
            <param name="serviceKey">Key to associate with the component.</param>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.OnPreparing(System.Action{Revenj.Extensibility.Autofac.Core.PreparingEventArgs})">
            <summary>
            Add a handler for the Preparing event. This event allows manipulating of the parameters
            that will be provided to the component.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.OnActivating(System.Action{Revenj.Extensibility.Autofac.Core.IActivatingEventArgs{`0}})">
            <summary>
            Add a handler for the Activating event.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.OnActivated(System.Action{Revenj.Extensibility.Autofac.Core.IActivatedEventArgs{`0}})">
            <summary>
            Add a handler for the Activated event.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.PropertiesAutowired(Revenj.Extensibility.Autofac.PropertyWiringFlags)">
            <summary>
            Configure the component so that any properties whose types are registered in the
            container will be wired to instances of the appropriate service.
            </summary>
            <param name="wiringFlags">Set wiring options such as circular dependency wiring support.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.WithMetadata(System.String,System.Object)">
            <summary>
            Associates data with the component.
            </summary>
            <param name="key">Key by which the data can be located.</param>
            <param name="value">The data value.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.WithMetadata(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Associates data with the component.
            </summary>
            <param name="properties">The extended properties to associate with the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.WithMetadata``1(System.Action{Revenj.Extensibility.Autofac.Builder.MetadataConfiguration{``0}})">
            <summary>
            Associates data with the component.
            </summary>
            <typeparam name="TMetadata">A type with properties whose names correspond to the
            property names to configure.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.ActivatorData">
            <summary>
            The activator data.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.RegistrationStyle">
            <summary>
            The registration style.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder`3.RegistrationData">
            <summary>
            The registration data.
            </summary>
        </member>
        <member name="T:Remotion.Linq.QueryModelBuilder">
            <summary>
            Collects clauses and creates a <see cref="T:Remotion.Linq.QueryModel"/> from them. This provides a simple way to first add all the clauses and then
            create the <see cref="T:Remotion.Linq.QueryModel"/> rather than the two-step approach (first <see cref="P:Remotion.Linq.QueryModelBuilder.SelectClause"/> and <see cref="P:Remotion.Linq.QueryModelBuilder.MainFromClause"/>,
            then the <see cref="T:Remotion.Linq.Clauses.IBodyClause"/>s) required by <see cref="T:Remotion.Linq.QueryModel"/>'s constructor.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.SelectClause">
            <summary>
            Represents the select part of a query, projecting data items according to some <see cref="P:Remotion.Linq.Clauses.SelectClause.Selector"/>.
            </summary>
            <example>
            In C#, the "select" clause in the following sample corresponds to a <see cref="T:Remotion.Linq.Clauses.SelectClause"/>. "s" (a reference to the query source "s", see
            <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/>) is the <see cref="P:Remotion.Linq.Clauses.SelectClause.Selector"/> expression:
            <code>
            var query = from s in Students
                        where s.First == "Hugo"
                        select s;
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.SelectClause.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.SelectClause"/> class.
            </summary>
            <param name="selector">The selector that projects the data items.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.SelectClause.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel)">
            <summary>
            Accepts the specified visitor by calling its <see cref="M:Remotion.Linq.IQueryModelVisitor.VisitSelectClause(Remotion.Linq.Clauses.SelectClause,Remotion.Linq.QueryModel)"/> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.SelectClause.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
            Clones this clause.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Remotion.Linq.Clauses.CloneContext"/>.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.SelectClause.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Transforms all the expressions in this clause and its child objects via the given <paramref name="transformation"/> delegate.
            </summary>
            <param name="transformation">The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression"/> within this
            clause, and those expressions will be replaced with what the delegate returns.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.SelectClause.GetOutputDataInfo">
            <summary>
            Gets an <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo"/> object describing the data streaming out of this <see cref="T:Remotion.Linq.Clauses.SelectClause"/>. If a query ends with
            the <see cref="T:Remotion.Linq.Clauses.SelectClause"/>, this corresponds to the query's output data. If a query has <see cref="P:Remotion.Linq.QueryModel.ResultOperators"/>, the data
            is further modified by those operators. Use <see cref="M:Remotion.Linq.QueryModel.GetOutputDataInfo"/> to obtain the real result type of
            a query model, including the <see cref="P:Remotion.Linq.QueryModel.ResultOperators"/>.
            </summary>
            <returns>Gets a <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo"/> object describing the data streaming out of this <see cref="T:Remotion.Linq.Clauses.SelectClause"/>.</returns>
            <remarks>
            The data streamed from a <see cref="T:Remotion.Linq.Clauses.SelectClause"/> is always of type <see cref="T:System.Linq.IQueryable`1"/> instantiated
            with the type of <see cref="P:Remotion.Linq.Clauses.SelectClause.Selector"/> as its generic parameter. Its <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.ItemExpression"/> corresponds to the
            <see cref="P:Remotion.Linq.Clauses.SelectClause.Selector"/>.
            </remarks>
        </member>
        <member name="P:Remotion.Linq.Clauses.SelectClause.Selector">
            <summary>
            Gets the selector defining what parts of the data items are returned by the query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.OfTypeResultOperator">
            <summary>
            Represents filtering the items returned by a query to only return those items that are of a specific type. 
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "OfType" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.OfTypeResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s.ID).OfType&lt;int&gt;();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.OfTypeResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Remotion.Linq.Clauses.JoinClause">
            <summary>
            Represents the join part of a query, adding new data items and joining them with data items from previous clauses. This can either
            be part of <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/> or of <see cref="T:Remotion.Linq.Clauses.GroupJoinClause"/>. The semantics of the <see cref="T:Remotion.Linq.Clauses.JoinClause"/>
            is that of an inner join, i.e. only combinations where both an input item and a joined item exist are returned.
            </summary>
            <example>
            In C#, the "join" clause in the following sample corresponds to a <see cref="T:Remotion.Linq.Clauses.JoinClause"/>. The <see cref="T:Remotion.Linq.Clauses.JoinClause"/> adds a new
            query source to the query, selecting addresses (called "a") from the source "Addresses". It associates addresses and students by
            comparing the students' "AddressID" properties with the addresses' "ID" properties. "a" corresponds to <see cref="P:Remotion.Linq.Clauses.JoinClause.ItemName"/> and 
            <see cref="P:Remotion.Linq.Clauses.JoinClause.ItemType"/>, "Addresses" is <see cref="P:Remotion.Linq.Clauses.JoinClause.InnerSequence"/> and the left and right side of the "equals" operator are held by
            <see cref="P:Remotion.Linq.Clauses.JoinClause.OuterKeySelector"/> and <see cref="P:Remotion.Linq.Clauses.JoinClause.InnerKeySelector"/>, respectively:
            <code>
            var query = from s in Students
                        join a in Addresses on s.AdressID equals a.ID
                        select new { s, a };
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.JoinClause.#ctor(System.String,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.JoinClause"/> class.
            </summary>
            <param name="itemName">A name describing the items generated by this <see cref="T:Remotion.Linq.Clauses.JoinClause"/>.</param>
            <param name="itemType">The type of the items generated by this <see cref="T:Remotion.Linq.Clauses.JoinClause"/>.</param>
            <param name="innerSequence">The expression that generates the inner sequence, i.e. the items of this <see cref="T:Remotion.Linq.Clauses.JoinClause"/>.</param>
            <param name="outerKeySelector">An expression that selects the left side of the comparison by which source items and inner items are joined.</param>
            <param name="innerKeySelector">An expression that selects the right side of the comparison by which source items and inner items are joined.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.JoinClause.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
            Accepts the specified visitor by calling its <see cref="M:Remotion.Linq.IQueryModelVisitor.VisitJoinClause(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel,System.Int32)"/> 
            method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">The index of this clause in the <paramref name="queryModel"/>'s <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/> collection.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.JoinClause.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,Remotion.Linq.Clauses.GroupJoinClause)">
            <summary>
            Accepts the specified visitor by calling its <see cref="M:Remotion.Linq.IQueryModelVisitor.VisitJoinClause(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel,Remotion.Linq.Clauses.GroupJoinClause)"/> 
            method. This overload is used when visiting a <see cref="T:Remotion.Linq.Clauses.JoinClause"/> that is held by a <see cref="T:Remotion.Linq.Clauses.GroupJoinClause"/>.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="groupJoinClause">The <see cref="T:Remotion.Linq.Clauses.GroupJoinClause"/> holding this <see cref="T:Remotion.Linq.Clauses.JoinClause"/> instance.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.JoinClause.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
            Clones this clause, registering its clone with the <paramref name="cloneContext"/>.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Remotion.Linq.Clauses.CloneContext"/>.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.JoinClause.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Transforms all the expressions in this clause and its child objects via the given <paramref name="transformation"/> delegate.
            </summary>
            <param name="transformation">The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression"/> within this
            clause, and those expressions will be replaced with what the delegate returns.</param>
        </member>
        <member name="P:Remotion.Linq.Clauses.JoinClause.ItemType">
            <summary>
            Gets or sets the type of the items generated by this <see cref="T:Remotion.Linq.Clauses.JoinClause"/>.
            </summary>
            <note type="warning">
            Changing the <see cref="P:Remotion.Linq.Clauses.JoinClause.ItemType"/> of a <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> can make all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> objects that
            point to that <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> invalid, so the property setter should be used with care.
            </note>
        </member>
        <member name="P:Remotion.Linq.Clauses.JoinClause.ItemName">
            <summary>
            Gets or sets a name describing the items generated by this <see cref="T:Remotion.Linq.Clauses.JoinClause"/>.
            </summary>
            <remarks>
            Item names are inferred when a query expression is parsed, and they usually correspond to the variable names present in that expression. 
            However, note that names are not necessarily unique within a <see cref="T:Remotion.Linq.QueryModel"/>. Use names only for readability and debugging, not for 
            uniquely identifying <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> objects. To match an <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> with its references, use the 
            <see cref="P:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource"/> property rather than the <see cref="P:Remotion.Linq.Clauses.JoinClause.ItemName"/>.
            </remarks>
        </member>
        <member name="P:Remotion.Linq.Clauses.JoinClause.InnerSequence">
            <summary>
            Gets or sets the inner sequence, the expression that generates the inner sequence, i.e. the items of this <see cref="T:Remotion.Linq.Clauses.JoinClause"/>.
            </summary>
            <value>The inner sequence.</value>
        </member>
        <member name="P:Remotion.Linq.Clauses.JoinClause.OuterKeySelector">
            <summary>
            Gets or sets the outer key selector, an expression that selects the right side of the comparison by which source items and inner items are joined.
            </summary>
            <value>The outer key selector.</value>
        </member>
        <member name="P:Remotion.Linq.Clauses.JoinClause.InnerKeySelector">
            <summary>
            Gets or sets the inner key selector, an expression that selects the left side of the comparison by which source items and inner items are joined.
            </summary>
            <value>The inner key selector.</value>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlQuery">
            <summary>
            Summary description for NpgsqlQuery
            </summary>
        </member>
        <member name="T:Mono.Security.Cryptography.DHKeyGeneration">
            <summary>
            Defines the different Diffie-Hellman key generation methods.
            </summary>
        </member>
        <member name="F:Mono.Security.Cryptography.DHKeyGeneration.Random">
            <summary>
            Returns dynamically generated values for P and G. Unlike the Sophie Germain or DSA key generation methods,
            this method does not ensure that the selected prime offers an adequate security level.
            </summary>
        </member>
        <member name="F:Mono.Security.Cryptography.DHKeyGeneration.Static">
            <summary>
            Returns values for P and G that are hard coded in this library. Contrary to what your intuition may tell you,
            using these hard coded values is perfectly safe.
            The values of the P and G parameters are taken from 'The OAKLEY Key Determination Protocol' [RFC2412].
            This is the prefered key generation method, because it is very fast and very safe.
            Because this method uses fixed values for the P and G parameters, not all bit sizes are supported.
            The current implementation supports bit sizes of 768, 1024 and 1536.
            </summary>
        </member>
        <member name="F:Mono.Math.BigInteger.DEFAULT_LEN">
            <summary>
            Default length of a BigInteger in bytes
            </summary>
        </member>
        <member name="F:Mono.Math.BigInteger.length">
            <summary>
            The Length of this BigInteger
            </summary>
        </member>
        <member name="F:Mono.Math.BigInteger.data">
            <summary>
            The data for this BigInteger
            </summary>
        </member>
        <member name="F:Mono.Math.BigInteger.smallPrimes">
            <summary>
            	Table of primes below 2000.
            </summary>
            <remarks>
            	<para>
            	This table was generated using Mathematica 4.1 using the following function:
            	</para>
            	<para>
            		<code>
            		PrimeTable [x_] := Prime [Range [1, PrimePi [x]]]
            		PrimeTable [6000]
            		</code>
            	</para>
            </remarks>
        </member>
        <member name="M:Mono.Math.BigInteger.GenerateRandom(System.Int32,System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Generates a new, random BigInteger of the specified length.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <param name="rng">A random number generator to use to obtain the bits.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.GenerateRandom(System.Int32)">
            <summary>
            Generates a new, random BigInteger of the specified length using the default RNG crypto service provider.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Randomize(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Randomizes the bits in "this" from the specified RNG.
            </summary>
            <param name="rng">A RNG.</param>
        </member>
        <member name="M:Mono.Math.BigInteger.Randomize">
            <summary>
            Randomizes the bits in "this" from the default RNG.
            </summary>
        </member>
        <member name="M:Mono.Math.BigInteger.TestBit(System.UInt32)">
            <summary>
            Tests if the specified bit is 1.
            </summary>
            <param name="bitNum">The bit to test. The least significant bit is 0.</param>
            <returns>True if bitNum is set to 1, else false.</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Normalize">
            <summary>
                Normalizes this by setting the length to the actual number of
                uints used in data and by setting the sign to Sign.Zero if the
                value of this is 0.
            </summary>
        </member>
        <member name="M:Mono.Math.BigInteger.NextHighestPrime(Mono.Math.BigInteger)">
            <summary>
            Generates the smallest prime >= bi
            </summary>
            <param name="bi">A BigInteger</param>
            <returns>The smallest prime >= bi. More mathematically, if bi is prime: bi, else Prime [PrimePi [bi] + 1].</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Incr2">
            <summary>
            Increments this by two
            </summary>
        </member>
        <member name="T:Mono.Math.BigInteger.Kernel">
            <summary>
            Low level functions for the BigInteger
            </summary>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.AddSameSign(Mono.Math.BigInteger,Mono.Math.BigInteger)">
            <summary>
            Adds two numbers with the same sign.
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>bi1 + bi2</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.Compare(Mono.Math.BigInteger,Mono.Math.BigInteger)">
            <summary>
            Compares two BigInteger
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>The sign of bi1 - bi2</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.SingleByteDivideInPlace(Mono.Math.BigInteger,System.UInt32)">
            <summary>
            Performs n / d and n % d in one operation.
            </summary>
            <param name="n">A BigInteger, upon exit this will hold n / d</param>
            <param name="d">The divisor</param>
            <returns>n % d</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.Multiply(System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts it into
            d [dOffset:dOffset+xLen+yLen].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+xLen+yLen].
            </remarks>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.MultiplyMod2p32pmod(System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts the low mod words into
            d [dOffset:dOffset+mod].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+mod].
            </remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.TypeExtensions.GetTypesThatClose(System.Type,System.Type)">
            <summary>Returns the first concrete interface supported by the candidate type that
            closes the provided open generic service type.</summary>
            <param name="this">The type that is being checked for the interface.</param>
            <param name="openGeneric">The open generic type to locate.</param>
            <returns>The type of the interface.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.TypeExtensions.FindAssignableTypesThatClose(System.Type,System.Type)">
            <summary>
            Looks for an interface on the candidate type that closes the provided open generic interface type.
            </summary>
            <param name="candidateType">The type that is being checked for the interface.</param>
            <param name="openGenericServiceType">The open generic service type to locate.</param>
            <returns>True if a closed implementation was found; otherwise false.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.RegistrationExtensions">
            <summary>
            Adds registration syntax to the <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/> type.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterModule(Revenj.Extensibility.Autofac.ContainerBuilder,Revenj.Extensibility.Autofac.Core.IModule)">
            <summary>
            Add a module to the container.
            </summary>
            <param name="builder">The builder to register the module with.</param>
            <param name="module">The module to add.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterModule``1(Revenj.Extensibility.Autofac.ContainerBuilder)">
            <summary>
            Add a module to the container.
            </summary>
            <param name="builder">The builder to register the module with.</param>
            <typeparam name="TModule">The module to add.</typeparam>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterComponent(Revenj.Extensibility.Autofac.ContainerBuilder,Revenj.Extensibility.Autofac.Core.IComponentRegistration)">
            <summary>
            Add a component to the container.
            </summary>
            <param name="builder">The builder to register the component with.</param>
            <param name="registration">The component to add.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterSource(Revenj.Extensibility.Autofac.ContainerBuilder,Revenj.Extensibility.Autofac.Core.IRegistrationSource)">
            <summary>
            Add a registration source to the container.
            </summary>
            <param name="builder">The builder to register the registration source via.</param>
            <param name="registrationSource">The registration source to add.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterInstance``1(Revenj.Extensibility.Autofac.ContainerBuilder,``0)">
            <summary>
            Register an instance as a component.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="instance">The instance to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>If no services are explicitly specified for the instance, the
            static type <typeparamref name="T"/> will be used as the default service (i.e. *not* <code>instance.GetType()</code>).</remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterType``1(Revenj.Extensibility.Autofac.ContainerBuilder)">
            <summary>
            Register a component to be created through reflection.
            </summary>
            <typeparam name="TImplementor">The type of the component implementation.</typeparam>
            <param name="builder">Container builder.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterType(Revenj.Extensibility.Autofac.ContainerBuilder,System.Type)">
            <summary>
            Register a component to be created through reflection.
            </summary>
            <param name="implementationType">The type of the component implementation.</param>
            <param name="builder">Container builder.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.Register``1(Revenj.Extensibility.Autofac.ContainerBuilder,System.Func{Revenj.Extensibility.Autofac.IComponentContext,``0})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.Register``1(Revenj.Extensibility.Autofac.ContainerBuilder,System.Func{Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},``0})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterGeneric(Revenj.Extensibility.Autofac.ContainerBuilder,System.Type)">
            <summary>
            Register an un-parameterised generic type, e.g. Repository&lt;&gt;.
            Concrete types will be made as they are requested, e.g. with Resolve&lt;Repository&lt;int&gt;&gt;().
            </summary>
            <param name="builder">Container builder.</param>
            <param name="implementor">The open generic implementation type.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.PreserveExistingDefaults``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Specifies that the component being registered should only be made the default for services
            that have not already been registered.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.PreserveExistingDefaults``2(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData,``1})">
            <summary>
            Specifies that the components being registered should only be made the default for services
            that have not already been registered.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterAssemblyTypes(Revenj.Extensibility.Autofac.ContainerBuilder,System.Reflection.Assembly[])">
            <summary>
            Register the types in an assembly.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="assemblies">The assemblies from which to register types.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.Where``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Boolean})">
            <summary>
            Specifies a subset of types to register from a scanned assembly.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to filter types from.</param>
            <param name="predicate">Predicate that returns true for types to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.As``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Service}})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.As``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,Revenj.Extensibility.Autofac.Core.Service})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.As``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Type})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.As``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.AsSelf``1(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData,Revenj.Extensibility.Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Specifies that a type from a scanned assembly provides its own concrete type as a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.AsSelf``2(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,Revenj.Extensibility.Autofac.Builder.SingleRegistrationStyle})">
            <summary>
            Specifies that a type provides its own concrete type as a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TConcreteActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.AsSelf``1(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,Revenj.Extensibility.Autofac.Builder.ReflectionActivatorData,Revenj.Extensibility.Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Specifies that a type provides its own concrete type as a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.WithMetadata``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>
            Specify how a type from a scanned assembly provides metadata.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set metadata on.</param>
            <param name="metadataMapping">A function mapping the type to a list of metadata items.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.WithMetadataFrom``1(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{System.Object,Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData,Revenj.Extensibility.Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Use the properties of an attribute (or interface implemented by an attribute) on the scanned type
            to provide metadata values.
            </summary>
            <remarks>Inherited attributes are supported; however, there must be at most one matching attribute
            in the inheritance chain.</remarks>
            <typeparam name="TAttribute">The attribute applied to the scanned type.</typeparam>
            <param name="registration">Registration to set metadata on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.WithMetadata``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Func{System.Type,System.Object})">
            <summary>
            Specify how a type from a scanned assembly provides metadata.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="metadataKey">Key of the metadata item.</param>
            <param name="metadataValueMapping">A function retrieving the value of the item from the component type.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.Named``1(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{System.Object,Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData,Revenj.Extensibility.Autofac.Builder.DynamicRegistrationStyle},System.Func{System.Type,System.String})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a named service.
            </summary>
            <param name="registration">Registration to set service mapping on.</param>
            <typeparam name="TService">Service type provided by the component.</typeparam>
            <param name="serviceNameMapping">Function mapping types to service names.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.Named``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.String},System.Type)">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a named service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceType">Service type provided by the component.</param>
            <param name="serviceNameMapping">Function mapping types to service names.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.Keyed``1(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{System.Object,Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData,Revenj.Extensibility.Autofac.Builder.DynamicRegistrationStyle},System.Func{System.Type,System.Object})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a keyed service.
            </summary>
            <param name="registration">Registration to set service mapping on.</param>
            <typeparam name="TService">Service type provided by the component.</typeparam>
            <param name="serviceKeyMapping">Function mapping types to service keys.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.Keyed``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Object},System.Type)">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a keyed service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceType">Service type provided by the component.</param>
            <param name="serviceKeyMapping">Function mapping types to service keys.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.AsImplementedInterfaces``1(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData,Revenj.Extensibility.Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Specifies that a type from a scanned assembly is registered as providing all of its
            implemented interfaces.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.AsImplementedInterfaces``2(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,Revenj.Extensibility.Autofac.Builder.SingleRegistrationStyle})">
            <summary>
            Specifies that a type is registered as providing all of its implemented interfaces.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TConcreteActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.AsImplementedInterfaces``1(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,Revenj.Extensibility.Autofac.Builder.ReflectionActivatorData,Revenj.Extensibility.Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Specifies that a type is registered as providing all of its implemented interfaces.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.FindConstructorsWith``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Reflection.BindingFlags)">
            <summary>
            Set the policy used to find candidate constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="bindingFlags">Binding flags used when searching for constructors.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.FindConstructorsWith``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Revenj.Extensibility.Autofac.Core.Activators.Reflection.IConstructorFinder)">
            <summary>
            Set the policy used to find candidate constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="constructorFinder">Policy to be used when searching for constructors.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.UsingConstructor``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type[])">
            <summary>
            Set the policy used to select from available constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="signature">Constructor signature to match.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.UsingConstructor``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Revenj.Extensibility.Autofac.Core.Activators.Reflection.IConstructorSelector)">
            <summary>
            Set the policy used to select from available constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="constructorSelector">Policy to be used when selecting a constructor.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.WithParameter``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Object)">
            <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="parameterName">Name of a constructor parameter on the target type.</param>
            <param name="parameterValue">Value to supply to the parameter.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.WithParameter``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Revenj.Extensibility.Autofac.Core.Parameter)">
            <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="parameter">The parameter to supply to the constructor.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.WithParameter``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Reflection.ParameterInfo,Revenj.Extensibility.Autofac.IComponentContext,System.Boolean},System.Func{System.Reflection.ParameterInfo,Revenj.Extensibility.Autofac.IComponentContext,System.Object})">
            <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="parameterSelector">A predicate selecting the parameter to set.</param>
            <param name="valueProvider"></param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.WithParameters``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Configure explicit values for constructor parameters.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="parameters">The parameters to supply to the constructor.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.WithProperty``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Object)">
            <summary>
            Configure an explicit value for a property.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set property on.</param>
            <param name="propertyName">Name of a property on the target type.</param>
            <param name="propertyValue">Value to supply to the property.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.WithProperty``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Revenj.Extensibility.Autofac.Core.Parameter)">
            <summary>
            Configure an explicit value for a property.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="property">The property to supply.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.WithProperties``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Configure explicit values for properties.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="properties">The properties to supply.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.Targeting``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Revenj.Extensibility.Autofac.Core.IComponentRegistration)">
            <summary>
            Sets the target of the registration (used for metadata generation.)
            </summary>
            <typeparam name="TLimit">The type of the limit.</typeparam>
            <typeparam name="TActivatorData">The type of the activator data.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
            <param name="registration">Registration to set target for.</param>
            <param name="target">The target.</param>
            <returns>
            Registration builder allowing the registration to be configured.
            </returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.OnRegistered``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Action{Revenj.Extensibility.Autofac.Core.ComponentRegisteredEventArgs})">
            <summary>
            Provide a handler to be called when the component is registered.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration add handler to.</param>
            <param name="handler">The handler.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.OnRegistered``2(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData,``1},System.Action{Revenj.Extensibility.Autofac.Core.ComponentRegisteredEventArgs})">
            <summary>
            Provide a handler to be called when the component is registred.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration add handler to.</param>
            <param name="handler">The handler.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.AsClosedTypesOf``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type)">
            <summary>
            Specifies that a type from a scanned assembly is registered if it implements an interface
            that closes the provided open generic interface type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="openGenericServiceType">The open generic interface or base class type for which implementations will be found.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.AssignableTo``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type)">
            <summary>
            Filters the scanned types to include only those assignable to the provided
            type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to filter types from.</param>
            <param name="type">The type or interface which all classes must be assignable from.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.AssignableTo``1(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{System.Object,Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData,Revenj.Extensibility.Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Filters the scanned types to include only those assignable to the provided
            type.
            </summary>
            <param name="registration">Registration to filter types from.</param>
            <typeparam name="T">The type or interface which all classes must be assignable from.</typeparam>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.Except``1(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{System.Object,Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData,Revenj.Extensibility.Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Filters the scanned types to exclude the provided type.
            </summary>
            <param name="registration">Registration to filter types from.</param>
            <typeparam name="T">The concrete type to exclude.</typeparam>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.Except``1(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{System.Object,Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData,Revenj.Extensibility.Autofac.Builder.DynamicRegistrationStyle},System.Action{Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,Revenj.Extensibility.Autofac.Builder.ConcreteReflectionActivatorData,Revenj.Extensibility.Autofac.Builder.SingleRegistrationStyle}})">
            <summary>
            Filters the scanned types to exclude the provided type, providing specific configuration for
            the excluded type.
            </summary>
            <param name="registration">Registration to filter types from.</param>
            <param name="customisedRegistration">Registration for the excepted type.</param>
            <typeparam name="T">The concrete type to exclude.</typeparam>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.InNamespaceOf``1(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{System.Object,Revenj.Extensibility.Autofac.Features.Scanning.ScanningActivatorData,Revenj.Extensibility.Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Filters the scanned types to include only those in the namespace of the provided type
            or one of its sub-namespaces.
            </summary>
            <param name="registration">Registration to filter types from.</param>
            <typeparam name="T">A type in the target namespace.</typeparam>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.InNamespace``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String)">
            <summary>
            Filters the scanned types to include only those in the provided namespace
            or one of its sub-namespaces.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to filter types from.</param>
            <param name="ns">The namespace from which types will be selected.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterAdapter``2(Revenj.Extensibility.Autofac.ContainerBuilder,System.Func{Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},``0,``1})">
            <summary>
            Adapt all components implementing service <typeparamref name="TFrom"/>
            to provide <typeparamref name="TTo"/> using the provided <paramref name="adapter"/>
            function.
            </summary>
            <typeparam name="TFrom">Service type to adapt from.</typeparam>
            <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom"/>.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="adapter">Function adapting <typeparamref name="TFrom"/> to
            service <typeparamref name="TTo"/>, given the context and parameters.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterAdapter``2(Revenj.Extensibility.Autofac.ContainerBuilder,System.Func{Revenj.Extensibility.Autofac.IComponentContext,``0,``1})">
            <summary>
            Adapt all components implementing service <typeparamref name="TFrom"/>
            to provide <typeparamref name="TTo"/> using the provided <paramref name="adapter"/>
            function.
            </summary>
            <typeparam name="TFrom">Service type to adapt from.</typeparam>
            <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom"/>.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="adapter">Function adapting <typeparamref name="TFrom"/> to
            service <typeparamref name="TTo"/>, given the context.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterAdapter``2(Revenj.Extensibility.Autofac.ContainerBuilder,System.Func{``0,``1})">
            <summary>
            Adapt all components implementing service <typeparamref name="TFrom"/>
            to provide <typeparamref name="TTo"/> using the provided <paramref name="adapter"/>
            function.
            </summary>
            <typeparam name="TFrom">Service type to adapt from.</typeparam>
            <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom"/>.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="adapter">Function adapting <typeparamref name="TFrom"/> to
            service <typeparamref name="TTo"/>.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterGenericDecorator(Revenj.Extensibility.Autofac.ContainerBuilder,System.Type,System.Type,System.Object,System.Object)">
            <summary>
            Decorate all components implementing open generic service <paramref name="decoratedServiceType"/>.
            The <paramref name="fromKey"/> and <paramref name="toKey"/> parameters must be different values.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="decoratedServiceType">Service type being decorated. Must be an open generic type.</param>
            <param name="fromKey">Service key or name associated with the components being decorated.</param>
            <param name="toKey">Service key or name given to the decorated components.</param>
            <param name="decoratorType">The type of the decorator. Must be an open generic type, and accept a parameter
            of type <paramref name="decoratedServiceType"/>, which will be set to the instance being decorated.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterDecorator``1(Revenj.Extensibility.Autofac.ContainerBuilder,System.Func{Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},``0,``0},System.Object,System.Object)">
            <summary>
            Decorate all components implementing service <typeparamref name="TService"/>
            using the provided <paramref name="decorator"/> function.
            The <paramref name="fromKey"/> and <paramref name="toKey"/> parameters must be different values.
            </summary>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService"/>, given the context and parameters.</param>
            <param name="fromKey">Service key or name associated with the components being decorated.</param>
            <param name="toKey">Service key or name given to the decorated components.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterDecorator``1(Revenj.Extensibility.Autofac.ContainerBuilder,System.Func{Revenj.Extensibility.Autofac.IComponentContext,``0,``0},System.Object,System.Object)">
            <summary>
            Decorate all components implementing service <typeparamref name="TService"/>
            using the provided <paramref name="decorator"/> function.
            The <paramref name="fromKey"/> and <paramref name="toKey"/> parameters must be different values.
            </summary>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService"/>, given the context.</param>
            <param name="fromKey">Service key or name associated with the components being decorated.</param>
            <param name="toKey">Service key or name given to the decorated components.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterDecorator``1(Revenj.Extensibility.Autofac.ContainerBuilder,System.Func{``0,``0},System.Object,System.Object)">
            <summary>
            Decorate all components implementing service <typeparamref name="TService"/>
            using the provided <paramref name="decorator"/> function.
            The <paramref name="fromKey"/> and <paramref name="toKey"/> parameters must be different values.
            </summary>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService"/>.</param>
            <param name="fromKey">Service key or name associated with the components being decorated.</param>
            <param name="toKey">Service key or name given to the decorated components.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.RegistrationExtensions.OnRelease``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Action{``0})">
            <summary>
            Run a supplied action instead of disposing instances when they're no
            longer required.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set release action for.</param>
            <param name="releaseAction">An action to perform instead of disposing the instance.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>Only one release action can be configured per registration.</remarks>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData">
            <summary>
            Describes the activator for an open generic decorator.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData.#ctor(System.Type,Revenj.Extensibility.Autofac.Core.IServiceWithType)">
            <summary>
            Construct an <see cref="T:Revenj.Extensibility.Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData"/>.
            </summary>
            <param name="implementor">The decorator type.</param>
            <param name="fromService">The open generic service type to decorate.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData.FromService">
            <summary>
            The open generic service type to decorate.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.ParameterElement">
            <summary>
            Element describing a component constructor parameter.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ParameterElement.CoerceValue">
            <summary>
            Get the value of this element
            </summary>
            <returns></returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ParameterElement.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ParameterElement.Value">
            <summary>
            Gets the value used to set the parameter (type will be converted.)
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ParameterElement.List">
            <summary>
            If this parameter's value is a list of values
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ParameterElement.Dictionary">
            <summary>
            If this parameter's value is a dictionary
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.FileElement">
            <summary>
            Element describing an additional configuration file.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.FileElement.Name">
            <summary>
            Gets the filename of the file.
            </summary>
            <value>The filename.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.FileElement.Section">
            <summary>
            Gets the section name of the section in the configuration
            file.
            </summary>
            <value>The section name.</value>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SkipExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)"/>
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it usually follows (or replaces) a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectExpressionNode"/> of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that 
            represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.AllExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for the 
            <see cref="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/> and
            <see cref="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/> methods.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.TransformingExpressionTreeVisitor">
            <summary>
            Applies <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformation"/> delegates obtained from an <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTranformationProvider"/> to an expression tree. 
            The transformations occur in post-order (transforming child <see cref="T:System.Linq.Expressions.Expression"/> nodes before parent nodes). When a transformation changes 
            the current <see cref="T:System.Linq.Expressions.Expression"/>, its child nodes and itself will be revisited (and may be transformed again).
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.VBInformationIsNothingExpressionTransformer">
            <summary>
            Detects expressions calling the Information.IsNothing (...) method used by Visual Basic .NET, and replaces them with 
            <see cref="T:System.Linq.Expressions.BinaryExpression"/> instances comparing with <see langword="null"/>. Providers use this transformation to be able to 
            handle queries using IsNothing (...) more easily.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.VBCompareStringExpressionTransformer">
            <summary>
            Detects expressions calling the CompareString method used by Visual Basic .NET, and replaces them with 
            <see cref="T:Remotion.Linq.Clauses.Expressions.VBStringComparisonExpression"/> instances. Providers use this transformation to be able to handle VB string comparisons
            more easily. See <see cref="T:Remotion.Linq.Clauses.Expressions.VBStringComparisonExpression"/> for details.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Collections.ObservableCollectionChangedEventArgs`1">
            <summary>
            Provides event data for <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>'s events.
            </summary>
            <typeparam name="T">The type of the items managed by the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</typeparam>
        </member>
        <member name="T:Remotion.Linq.Clauses.StreamedData.StreamedSingleValueInfo">
            <summary>
            Describes a single value streamed out of a <see cref="T:Remotion.Linq.QueryModel"/> or <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/>. A single value corresponds to one
            item from the result set, as produced by <see cref="T:Remotion.Linq.Clauses.ResultOperators.FirstResultOperator"/> or <see cref="T:Remotion.Linq.Clauses.ResultOperators.SingleResultOperator"/>, for instance.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.StreamedData.StreamedValueInfo">
            <summary>
            Describes a single or scalar value streamed out of a <see cref="T:Remotion.Linq.QueryModel"/> or <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/>.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo">
            <summary>
            Describes the data streamed out of a <see cref="T:Remotion.Linq.QueryModel"/> or <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo.MakeClosedGenericExecuteMethod(System.Reflection.MethodInfo)">
            <summary>
            Takes the given <paramref name="genericMethodDefinition"/> and instantiates it, substituting its generic parameter with the value
            or item type of the data described by this object. The method must have exactly one generic parameter.
            </summary>
            <param name="genericMethodDefinition">The generic method definition to instantiate.</param>
            <returns>A closed generic instantiation of <paramref name="genericMethodDefinition"/> with this object's value or item type substituted for
            the generic parameter.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo.ExecuteQueryModel(Remotion.Linq.QueryModel,Remotion.Linq.IQueryExecutor)">
            <summary>
            Executes the specified <see cref="T:Remotion.Linq.QueryModel"/> with the given <see cref="T:Remotion.Linq.IQueryExecutor"/>, calling either 
            <see cref="M:Remotion.Linq.IQueryExecutor.ExecuteScalar``1(Remotion.Linq.QueryModel)"/> or <see cref="M:Remotion.Linq.IQueryExecutor.ExecuteCollection``1(Remotion.Linq.QueryModel)"/>, depending on the type of data streamed
            from this interface.
            </summary>
            <param name="queryModel">The query model to be executed.</param>
            <param name="executor">The executor to use.</param>
            <returns>An <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedData"/> object holding the results of the query execution.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo.AdjustDataType(System.Type)">
            <summary>
            Returns a new <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo"/> of the same type as this instance, but with a new <see cref="P:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo.DataType"/>.
            </summary>
            <param name="dataType">The type to use for the <see cref="P:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo.DataType"/> property. The type must be compatible with the data described by this 
            <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo"/>, otherwise an exception is thrown.
            The type may be a generic type definition if the <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo"/> supports generic types; in this case,
            the type definition is automatically closed with generic parameters to match the data described by this <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo"/>.</param>
            <returns>A new <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo"/> of the same type as this instance, but with a new <see cref="P:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo.DataType"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="dataType"/> is not compatible with the data described by this 
            <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo"/>.</exception>
        </member>
        <member name="P:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo.DataType">
            <summary>
            Gets the type of the data described by this <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo"/> instance. For a sequence, this is a type implementing 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>, where <c>T</c> is instantiated with a concrete type. For a single value, this is the value type.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.StreamedValueInfo.ExecuteQueryModel(Remotion.Linq.QueryModel,Remotion.Linq.IQueryExecutor)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.StreamedValueInfo.CloneWithNewDataType(System.Type)">
            <summary>
            Returns a new instance of the same <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedValueInfo"/> type with a different <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedValueInfo.DataType"/>.
            </summary>
            <param name="dataType">The new data type.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="dataType"/> cannot be used for the clone.</exception>
            <returns>A new instance of the same <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedValueInfo"/> type with the given <paramref name="dataType"/>.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.StreamedValueInfo.AdjustDataType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.StreamedValueInfo.MakeClosedGenericExecuteMethod(System.Reflection.MethodInfo)">
            <summary>
            Takes the given <paramref name="genericMethodDefinition"/> and instantiates it, substituting its generic parameter with the value
            type of the value held by this object. The method must have exactly one generic parameter.
            </summary>
            <param name="genericMethodDefinition">The generic method definition to instantiate.</param>
            <returns>
            A closed generic instantiation of <paramref name="genericMethodDefinition"/> with this object's value type substituted for
            the generic parameter.
            </returns>
        </member>
        <member name="P:Remotion.Linq.Clauses.StreamedData.StreamedValueInfo.DataType">
            <summary>
            Gets the type of the data described by this <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo"/> instance. This is the type of the streamed value, or 
            <see cref="T:System.Object"/> if the value is <see langword="null"/>.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.GroupJoinClause">
            <summary>
            Represents the join part of a query, adding new data items and joining them with data items from previous clauses. In contrast to 
            <see cref="T:Remotion.Linq.Clauses.JoinClause"/>, the <see cref="T:Remotion.Linq.Clauses.GroupJoinClause"/> does not provide access to the individual items of the joined query source.
            Instead, it provides access to all joined items for each item coming from the previous clauses, thus grouping them together. The semantics
            of this join is so that for all input items, a joined sequence is returned. That sequence can be empty if no joined items are available.
            </summary>
            <example>
            In C#, the "into" clause in the following sample corresponds to a <see cref="T:Remotion.Linq.Clauses.GroupJoinClause"/>. The "join" part before that is encapsulated
            as a <see cref="T:Remotion.Linq.Clauses.JoinClause"/> held in <see cref="P:Remotion.Linq.Clauses.GroupJoinClause.JoinClause"/>. The <see cref="P:Remotion.Linq.Clauses.GroupJoinClause.JoinClause"/> adds a new query source to the query 
            ("addresses"), but the item type of that query source is <see cref="T:System.Collections.Generic.IEnumerable`1"/>, not "Address". Therefore, it can be
            used in the <see cref="P:Remotion.Linq.Clauses.FromClauseBase.FromExpression"/> of an <see cref="T:Remotion.Linq.Clauses.AdditionalFromClause"/> to extract the single items.
            <code>
            var query = from s in Students
                        join a in Addresses on s.AdressID equals a.ID into addresses
                        from a in addresses
                        select new { s, a };
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.GroupJoinClause.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Transforms all the expressions in this clause and its child objects via the given <paramref name="transformation"/> delegate.
            </summary>
            <param name="transformation">The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression"/> within this
            clause, and those expressions will be replaced with what the delegate returns.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.GroupJoinClause.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
            Accepts the specified visitor by calling its <see cref="M:Remotion.Linq.IQueryModelVisitor.VisitGroupJoinClause(Remotion.Linq.Clauses.GroupJoinClause,Remotion.Linq.QueryModel,System.Int32)"/> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">The index of this clause in the <paramref name="queryModel"/>'s <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/> collection.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.GroupJoinClause.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
            Clones this clause, registering its clone with the <paramref name="cloneContext"/>.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Remotion.Linq.Clauses.CloneContext"/>.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="P:Remotion.Linq.Clauses.GroupJoinClause.ItemName">
            <summary>
            Gets or sets a name describing the items generated by this <see cref="T:Remotion.Linq.Clauses.GroupJoinClause"/>.
            </summary>
            <remarks>
            Item names are inferred when a query expression is parsed, and they usually correspond to the variable names present in that expression. 
            However, note that names are not necessarily unique within a <see cref="T:Remotion.Linq.QueryModel"/>. Use names only for readability and debugging, not for 
            uniquely identifying <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> objects. To match an <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> with its references, use the 
            <see cref="P:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource"/> property rather than the <see cref="P:Remotion.Linq.Clauses.GroupJoinClause.ItemName"/>.
            </remarks>
        </member>
        <member name="P:Remotion.Linq.Clauses.GroupJoinClause.ItemType">
            <summary>
            Gets or sets the type of the items generated by this <see cref="T:Remotion.Linq.Clauses.GroupJoinClause"/>. This must implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <note type="warning">
            Changing the <see cref="P:Remotion.Linq.Clauses.GroupJoinClause.ItemType"/> of a <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> can make all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> objects that
            point to that <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> invalid, so the property setter should be used with care.
            </note>
        </member>
        <member name="P:Remotion.Linq.Clauses.GroupJoinClause.JoinClause">
            <summary>
            Gets or sets the inner join clause of this <see cref="T:Remotion.Linq.Clauses.GroupJoinClause"/>. The <see cref="P:Remotion.Linq.Clauses.GroupJoinClause.JoinClause"/> represents the actual join operation
            performed by this clause; its results are then grouped by this clause before streaming them to subsequent clauses. 
            <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> objects outside the <see cref="T:Remotion.Linq.Clauses.GroupJoinClause"/> must not point to <see cref="P:Remotion.Linq.Clauses.GroupJoinClause.JoinClause"/> 
            because the items generated by it are only available in grouped form from outside this clause.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.TypeConverter">
            <summary>
            Exposed type converter for outside usage.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.TypeConverter.CanConvert(System.Type)">
            <summary>
            Check if Npgsql support .NET type conversion to Postgres type
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.TypeConverter.Convert(System.Type,System.Object)">
            <summary>
            Convert .NET type to Postgres string representation
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.TypeConverter.GetTypeName(System.Type)">
            <summary>
            Convert Postgres type name for .NET type
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlPoint">
            <summary>
            Represents a PostgreSQL Point type
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlLSeg">
            <summary>
            Represents a PostgreSQL Line Segment type.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlPath">
            <summary>
            Represents a PostgreSQL Path type.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlPolygon">
            <summary>
            Represents a PostgreSQL Polygon type.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlCircle">
            <summary>
            Represents a PostgreSQL Circle type.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInet">
            <summary>
            Represents a PostgreSQL inet type.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlMacAddress">
            <summary>
            Represents a PostgreSQL MacAddress type.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlMacAddress.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="macAddr">The macAddr parameter must contain a string that can only consist of numbers
            and upper-case letters as hexadecimal digits. (See PhysicalAddress.Parse method on MSDN)</param>
        </member>
        <member name="T:Revenj.Utility.ChunkedMemoryStream">
            <summary>
            In memory stream with 8192 blocks to avoid LOH issues.
            Since .NET places objects larger that 85000 bytes into LOH, 
            avoid it as much as possible by using list of smaller blocks.
            </summary>
        </member>
        <member name="F:Revenj.Utility.ChunkedMemoryStream.SmallBuffer">
            <summary>
            Temporary small char buffer for reuse (64 chars)
            </summary>
        </member>
        <member name="F:Revenj.Utility.ChunkedMemoryStream.CharBuffer">
            <summary>
            Temporary char buffer for reuse (8192*4/3 + 2 chars)
            </summary>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.Create">
            <summary>
            Create or get a new instance of memory stream
            Stream is bound to thread and must be released from the same thread
            </summary>
            <returns>usable memory stream instance</returns>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.Static">
            <summary>
            Create reusable stream.
            Disposing the stream only has the effect of resetting it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.#ctor">
            <summary>
            Create new empty stream
            Stream is bound to thread and must be released from the same thread
            </summary>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.#ctor(System.IO.Stream)">
            <summary>
            Create in memory stream based on another stream.
            Provided stream will not be disposed.
            </summary>
            <param name="another">stream to copy</param>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Create in memory stream based on another stream.
            Specify whether should provided stream be disposed after copying.
            </summary>
            <param name="another">stream to copy</param>
            <param name="dispose">dispose provided stream</param>
            <param name="reset">reset provided stream to original position</param>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.Flush">
            <summary>
            Flush stream. Does nothing.
            </summary>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.ReadByte">
            <summary>
            Read a single byte
            </summary>
            <returns>byte value or -1 for end</returns>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read buffer from the stream. 
            Can return less then specified count if remaining block size is less than specified count
            </summary>
            <param name="buffer">copy to buffer</param>
            <param name="offset">offset in the buffer</param>
            <param name="count">maximum size to read</param>
            <returns>length of bytes read</returns>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek to position in the stream.
            </summary>
            <param name="offset">offset at stream</param>
            <param name="origin">position type</param>
            <returns>current position</returns>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.Reset">
            <summary>
            Set length and position to 0
            </summary>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.SetLength(System.Int64)">
            <summary>
            Set new length of the stream.
            Adjusts the current position if new length is larger then it.
            </summary>
            <param name="value">new length</param>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.Matches(System.Byte[])">
            <summary>
            Check if stream starts with provided byte[] and matches it's length
            Provided byte[] must be smaller than 8192 bytes
            </summary>
            <returns>stream matches provided byte[]</returns>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.WriteByte(System.Byte)">
            <summary>
            Write byte to stream.
            Advances current position by one.
            Adds a new block if necessary.
            </summary>
            <param name="value">byte to write</param>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write buffer to stream.
            Advances current position by count.
            Increases length if necessary.
            New blocks will be added as required.
            It's best to use buffer of size 8192
            </summary>
            <param name="buffer">provided bytes</param>
            <param name="offset">offset in bytes</param>
            <param name="count">total length</param>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.Equals(System.IO.Stream)">
            <summary>
            Compare two streams. 
            Length and content will be compared.
            </summary>
            <param name="another">stream to compare</param>
            <returns>are streams equal</returns>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.ToBase64Stream">
            <summary>
            Convert stream to Base 64 String representation in stream.
            </summary>
            <returns>created stream</returns>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.ToBase64Writer(System.IO.TextWriter)">
            <summary>
            Convert stream to Base 64 String representation in the provided writer.
            </summary>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.ToPostgresBytea(System.IO.TextWriter)">
            <summary>
            Convert stream to Postgres representation of bytea
            </summary>
            <param name="sw"></param>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.CopyTo(System.IO.Stream)">
            <summary>
            Optimized version of copy to stream
            </summary>
            <param name="stream">destination stream</param>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copy stream to target buffer
            </summary>
            <param name="target">target array buffer</param>
            <param name="offset">start at offset</param>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.Send(System.Net.Sockets.Socket)">
            <summary>
            Send entire stream to provided socket.
            </summary>
            <param name="socket">where to send</param>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.GetWriter">
            <summary>
            Reuse same text writer on this stream.
            </summary>
            <returns>stream writer</returns>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.GetReader">
            <summary>
            Reuse same text reader on this stream.
            </summary>
            <returns>stream reader</returns>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.UseBufferedReader(System.IO.TextReader)">
            <summary>
            Reuse buffered text reader associated with this stream.
            Provide input text reader as data source.
            Buffered text reader will be initialized with provided input
            </summary>
            <param name="reader">input for processing</param>
            <returns>initialized buffered text reader</returns>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.UseBufferedReader(System.String)">
            <summary>
            Reuse buffered text reader associated with this stream.
            Provide input string as data source.
            Buffered text reader will be initialized with provided input
            </summary>
            <param name="value">input for processing</param>
            <returns>initialized buffered text reader</returns>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.Close">
            <summary>
            Close current stream.
            Stream will be added to pool if required.
            Doesn't release allocated buffers
            </summary>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.Dispose(System.Boolean)">
            <summary>
            Dispose current stream.
            Stream will be added to pool if required.
            Used to reset position and length. Doesn't release allocated buffers
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Revenj.Utility.ChunkedMemoryStream.ToString">
            <summary>
            Show content of the stream as string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Revenj.Utility.ChunkedMemoryStream.CanRead">
            <summary>
            Can this stream be read? Always true
            </summary>
        </member>
        <member name="P:Revenj.Utility.ChunkedMemoryStream.CanSeek">
            <summary>
            Can this stream be sought? Always true
            </summary>
        </member>
        <member name="P:Revenj.Utility.ChunkedMemoryStream.CanWrite">
            <summary>
            Can this stream be written to? Always true
            </summary>
        </member>
        <member name="P:Revenj.Utility.ChunkedMemoryStream.Length">
            <summary>
            Get the length of the stream.
            </summary>
        </member>
        <member name="P:Revenj.Utility.ChunkedMemoryStream.Position">
            <summary>
            Current position in the stream.
            </summary>
        </member>
        <member name="T:Revenj.Utility.PdfConverter">
            <summary>
            Utility for converting files to PDF.
            External PdfConverter utility will be invoked for conversion.
            Path to PdfConverter can't have whitespaces in it (since tool will be invoked using cmd.exe)
            PdfConverterTimeout specify maximum amount of time conversion can take (20 seconds by default).
            </summary>
        </member>
        <member name="M:Revenj.Utility.PdfConverter.Convert(System.Byte[],System.String)">
            <summary>
            Convert provided file content to PDF. 
            Specify extension of the file.
            </summary>
            <param name="content">file content</param>
            <param name="ext">file extension</param>
            <returns>PDF converted file</returns>
        </member>
        <member name="M:Revenj.Utility.PdfConverter.Convert(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Convert provided stream content to PDF.
            Specify extension of the file
            </summary>
            <param name="content">file content</param>
            <param name="ext">file extension</param>
            <param name="disposeStream">dispose provided stream after conversion</param>
            <returns>PDF converted stream</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Integration.Mef.ContractBasedService">
            <summary>
            Identifies a service by the MEF contract name it supports.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.ContractBasedService.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Integration.Mef.ContractBasedService"/> class.
            </summary>
            <param name="contractName">The contract name.</param>
            <param name="exportTypeIdentity">Type identity of the objects exported under the contract.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.ContractBasedService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Integration.Mef.ContractBasedService.GetHashCode">
            <summary>
            Serves as a hash function for a particular ExportDefinition.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Integration.Mef.ContractBasedService.ExportTypeIdentity">
            <summary>
            Type identity of the objects exported under the contract.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Integration.Mef.ContractBasedService.ContractName">
            <summary>
            Gets or sets the name of the contract.
            </summary>
            <value>The name of the contract.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Integration.Mef.ContractBasedService.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.Metadata.Meta`1">
            <summary>
            Provides a value along with a dictionary of metadata describing the value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.Metadata.Meta`1.#ctor(`0,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new instance.
            </summary>
            <param name="value">The value described by the instance.</param>
            <param name="metadata">The metadata describing the value.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.Metadata.Meta`1.Value">
            <summary>
            The value described by <see cref="P:Revenj.Extensibility.Autofac.Features.Metadata.Meta`1.Metadata"/>.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.Metadata.Meta`1.Metadata">
            <summary>
            Metadata describing the value.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSource">
            <summary>
            Support the <see cref="T:System.Lazy`2"/>
            types automatically whenever type T is registered with the container.
            Metadata values come from the component registration's metadata.
            When a dependency of a lazy type is used, the instantiation of the underlying
            component will be delayed until the Value property is first accessed.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Registration.CopyOnWriteRegistry">
            <summary>
            Delegates registration lookups to a specified registry. When write operations are applied,
            initialises a new 'writeable' registry.
            </summary>
            <remarks>
            Safe for concurrent access by multiple readers. Write operations are single-threaded.
            </remarks>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.InstanceActivatorHelper">
            <summary>
            Helper
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.InstanceActivatorHelper.ActivateInstance(Revenj.Extensibility.Autofac.Core.IInstanceActivator,Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Activate an instance in the provided context.
            </summary>
            <param name="activator">Activator</param>
            <param name="context">Context in which to activate instances.</param>
            <param name="parameters">Parameters to the instance.</param>
            <returns>The activated instance.</returns>
            <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.IDisposer">
            <summary>
            Provided on an object that will dispose of other objects when it is
            itself disposed.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.IDisposer.AddInstanceForDisposal(System.IDisposable)">
            <summary>
            Adds an object to the disposer. When the disposer is
            disposed, so will the object be.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Activators.Reflection.DefaultValueParameter">
            <summary>
            Provides parameters that have a default value, set with an optional parameter
            declaration in C# or VB.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.DefaultValueParameter.CanSupplyValue(System.Reflection.ParameterInfo,Revenj.Extensibility.Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.TypeManipulation">
            <summary>
            Some handy type conversion routines.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.TypeManipulation.ChangeToCompatibleType(System.Object,System.Type)">
            <summary>
            Does its best to convert whatever the value is into the destination
            type. Null in yields null out for value types and the default(T)
            for value types (this may change.)
            </summary>
            <param name="value">The value.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>An object of the destination type.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.SectionHandler">
            <summary>
            Section handler for Autofac configuration in app.config files.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.SectionHandler.Modules">
            <summary>
            Gets the modules to be registered.
            </summary>
            <value>The modules.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.SectionHandler.Components">
            <summary>
            Gets the components to be registered.
            </summary>
            <value>The components.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.SectionHandler.Files">
            <summary>
            Gets additional configuration files.
            </summary>
            <value>The files.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.SectionHandler.DefaultAssembly">
            <summary>
            Gets the default assembly to search for types in when not explicitly
            provided with the type name.
            </summary>
            <value>The default assembly.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.SectionHandler.Assemblies">
            <summary>
            Gets the assemblies to be registered.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.DynamicRegistrationStyle">
            <summary>
            Registration style for dynamic registrations.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ThenByExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it follows an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.OrderByExpressionNode"/>, an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.OrderByDescendingExpressionNode"/>, 
            a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ThenByExpressionNode"/>, or a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ThenByDescendingExpressionNode"/>.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ResolvedExpressionCache`1">
            <summary>
            Caches a resolved expression in the <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> classes.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.FirstExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})"/>,
            <see cref="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/>,
            <see cref="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})"/> or
            <see cref="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.DictionaryEntryNewExpressionTransformer">
            <summary>
            Detects <see cref="T:System.Linq.Expressions.NewExpression"/> nodes for <see cref="T:System.Collections.DictionaryEntry"/> and adds <see cref="T:System.Reflection.MemberInfo"/> metadata to those nodes.
            This allows LINQ providers to match member access and constructor arguments more easily.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.MemberBindings.PropertyInfoBinding">
            <summary>
            Represents a <see cref="T:System.Reflection.PropertyInfo"/> being bound to an associated <see cref="T:System.Linq.Expressions.Expression"/> instance. 
            <seealso cref="T:System.Linq.Expressions.MemberBinding"/>
            This binding's 
            <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.MemberBindings.PropertyInfoBinding.MatchesReadAccess(System.Reflection.MemberInfo)"/> method returns <see langword="true"/> for the same <see cref="T:System.Reflection.PropertyInfo"/> the expression is bound to 
            or for its getter method's <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="T:Remotion.Linq.DefaultQueryProvider">
            <summary>
            Represents a default implementation of <see cref="T:Remotion.Linq.QueryProviderBase"/> that is automatically used by <see cref="T:Remotion.Linq.QueryableBase`1"/>
            unless a custom <see cref="T:System.Linq.IQueryProvider"/> is specified. The <see cref="T:Remotion.Linq.DefaultQueryProvider"/> executes queries by parsing them into
            an instance of type <see cref="T:Remotion.Linq.QueryModel"/>, which is then passed to an implementation of <see cref="T:Remotion.Linq.IQueryExecutor"/> to obtain the
            result set.
            </summary>
        </member>
        <member name="T:Remotion.Linq.QueryProviderBase">
            <summary>
            Provides a default implementation of <see cref="T:System.Linq.IQueryProvider"/> that executes queries (subclasses of <see cref="T:Remotion.Linq.QueryableBase`1"/>) by
            first parsing them into a <see cref="T:Remotion.Linq.QueryModel"/> and then passing that to a given implementation of <see cref="T:Remotion.Linq.IQueryExecutor"/>.
            Usually, <see cref="T:Remotion.Linq.DefaultQueryProvider"/> should be used unless <see cref="M:Remotion.Linq.QueryProviderBase.CreateQuery``1(System.Linq.Expressions.Expression)"/> must be manually implemented.
            </summary>
        </member>
        <member name="M:Remotion.Linq.QueryProviderBase.#ctor(Remotion.Linq.Parsing.Structure.IQueryParser,Remotion.Linq.IQueryExecutor)">
            <summary>
            Initializes a new instance of <see cref="T:Remotion.Linq.QueryProviderBase"/> using a custom <see cref="T:Remotion.Linq.Parsing.Structure.IQueryParser"/>. Use this
            constructor to customize how queries are parsed.
            </summary>
            <param name="queryParser">The <see cref="T:Remotion.Linq.Parsing.Structure.IQueryParser"/> used to parse queries. Specify an instance of <see cref="T:Remotion.Linq.Parsing.Structure.QueryParser"/>
              for default behavior.</param>
            <param name="executor">The <see cref="T:Remotion.Linq.IQueryExecutor"/> used to execute queries against a specific query backend.</param>
        </member>
        <member name="M:Remotion.Linq.QueryProviderBase.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable"/> object that can evaluate the query represented by a specified expression tree. This
            method delegates to <see cref="M:Remotion.Linq.QueryProviderBase.CreateQuery``1(System.Linq.Expressions.Expression)"/>.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that can evaluate the query represented by the specified expression tree.
            </returns>
        </member>
        <member name="M:Remotion.Linq.QueryProviderBase.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable`1"/> object that can evaluate the query represented by a specified expression tree. This method is 
            called by the standard query operators defined by the <see cref="T:System.Linq.Queryable"/> class.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> that can evaluate the query represented by the specified expression tree.
            </returns>
        </member>
        <member name="M:Remotion.Linq.QueryProviderBase.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query defined by the specified expression by parsing it with a 
            <see cref="P:Remotion.Linq.QueryProviderBase.QueryParser"/> and then running it through the <see cref="P:Remotion.Linq.QueryProviderBase.Executor"/>.
            This method is invoked through the <see cref="T:System.Linq.IQueryProvider"/> interface methods, for example by 
            <see cref="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})"/> and 
            <see cref="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})"/>, and it's also used by <see cref="T:Remotion.Linq.QueryableBase`1"/>
            when the <see cref="T:System.Linq.IQueryable`1"/> is enumerated.
            </summary>
            <remarks>
            Override this method to replace the query execution mechanism by a custom implementation.
            </remarks>
        </member>
        <member name="M:Remotion.Linq.QueryProviderBase.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query defined by the specified expression by parsing it with a
            <see cref="P:Remotion.Linq.QueryProviderBase.QueryParser"/> and then running it through the <see cref="P:Remotion.Linq.QueryProviderBase.Executor"/>.
            The result is cast to <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The type of the query result.</typeparam>
            <param name="expression">The query expression to be executed.</param>
            <returns>The result of the query cast to <typeparamref name="TResult"/>.</returns>
            <remarks>
            This method is called by the standard query operators that return a single value, such as 
            <see cref="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})"/> or 
            <see cref="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})"/>.
            In addition, it is called by <see cref="T:Remotion.Linq.QueryableBase`1"/> to execute queries that return sequences.
            </remarks>
        </member>
        <member name="M:Remotion.Linq.QueryProviderBase.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query defined by the specified expression by parsing it with a
            <see cref="P:Remotion.Linq.QueryProviderBase.QueryParser"/> and then running it through the <see cref="P:Remotion.Linq.QueryProviderBase.Executor"/>.
            </summary>
            <param name="expression">The query expression to be executed.</param>
            <returns>The result of the query.</returns>
            <remarks>
            This method is similar to the <see cref="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)"/> method, but without the cast to a defined return type.
            </remarks>
        </member>
        <member name="M:Remotion.Linq.QueryProviderBase.GenerateQueryModel(System.Linq.Expressions.Expression)">
            <summary>
            The method generates a <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
            <param name="expression">The query as expression chain.</param>
            <returns>a <see cref="T:Remotion.Linq.QueryModel"/></returns>
        </member>
        <member name="P:Remotion.Linq.QueryProviderBase.QueryParser">
            <summary>
            Gets the <see cref="P:Remotion.Linq.QueryProviderBase.QueryParser"/> used by this <see cref="T:Remotion.Linq.QueryProviderBase"/> to parse LINQ queries.
            </summary>
            <value>The query parser.</value>
        </member>
        <member name="P:Remotion.Linq.QueryProviderBase.Executor">
            <summary>
            Gets or sets the implementation of <see cref="T:Remotion.Linq.IQueryExecutor"/> used to execute queries created via <see cref="M:Remotion.Linq.QueryProviderBase.CreateQuery``1(System.Linq.Expressions.Expression)"/>.
            </summary>
            <value>The executor used to execute queries.</value>
        </member>
        <member name="M:Remotion.Linq.DefaultQueryProvider.#ctor(System.Type,Remotion.Linq.Parsing.Structure.IQueryParser,Remotion.Linq.IQueryExecutor)">
            <summary>
            Initializes a new instance of <see cref="T:Remotion.Linq.DefaultQueryProvider"/> using a custom <see cref="T:Remotion.Linq.Parsing.Structure.IQueryParser"/>.
            </summary>
            <param name="queryableType">
              A type implementing <see cref="T:System.Linq.IQueryable`1"/>. This type is used to construct the chain of query operators. Must be a generic type
              definition.
            </param>
            <param name="queryParser">The <see cref="T:Remotion.Linq.Parsing.Structure.IQueryParser"/> used to parse queries. Specify an instance of 
              <see cref="T:Remotion.Linq.Parsing.Structure.QueryParser"/> for default behavior. See also <see cref="M:Remotion.Linq.Parsing.Structure.QueryParser.CreateDefault"/>.</param>
            <param name="executor">The <see cref="T:Remotion.Linq.IQueryExecutor"/> used to execute queries against a specific query backend.</param>
        </member>
        <member name="M:Remotion.Linq.DefaultQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new <see cref="T:System.Linq.IQueryable"/> (of type <see cref="P:Remotion.Linq.DefaultQueryProvider.QueryableType"/> with <typeparamref name="T"/> as its generic argument) that
            represents the query defined by <paramref name="expression"/> and is able to enumerate its results.
            </summary>
            <typeparam name="T">The type of the data items returned by the query.</typeparam>
            <param name="expression">An expression representing the query for which a <see cref="T:System.Linq.IQueryable`1"/> should be created.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> that represents the query defined by <paramref name="expression"/>.</returns>
        </member>
        <member name="P:Remotion.Linq.DefaultQueryProvider.QueryableType">
            <summary>
            Gets the type of queryable created by this provider. This is the generic type definition of an implementation of <see cref="T:System.Linq.IQueryable`1"/>
            (usually a subclass of <see cref="T:Remotion.Linq.QueryableBase`1"/>) with exactly one type argument.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.WhereClause">
            <summary>
            Represents the where part of a query, filtering data items according to some <see cref="P:Remotion.Linq.Clauses.WhereClause.Predicate"/>.
            </summary>
            <example>
            In C#, the "where" clause in the following sample corresponds to a <see cref="T:Remotion.Linq.Clauses.WhereClause"/>:
            <ode>
            var query = from s in Students
                        where s.First == "Hugo"
                        select s;
            </ode>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.WhereClause.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.WhereClause"/> class.
            </summary>
            <param name="predicate">The predicate used to filter data items.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.WhereClause.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
            Accepts the specified visitor by calling its <see cref="M:Remotion.Linq.IQueryModelVisitor.VisitWhereClause(Remotion.Linq.Clauses.WhereClause,Remotion.Linq.QueryModel,System.Int32)"/> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">The index of this clause in the <paramref name="queryModel"/>'s <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/> collection.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.WhereClause.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Transforms all the expressions in this clause and its child objects via the given <paramref name="transformation"/> delegate.
            </summary>
            <param name="transformation">The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression"/> within this
            clause, and those expressions will be replaced with what the delegate returns.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.WhereClause.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
            Clones this clause.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Remotion.Linq.Clauses.CloneContext"/>.</param>
            <returns></returns>
        </member>
        <member name="P:Remotion.Linq.Clauses.WhereClause.Predicate">
            <summary>
            Gets the predicate, the expression representing the where condition by which the data items are filtered
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator">
            <summary>
            Represents grouping the items returned by a query according to some key retrieved by a <see cref="P:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.KeySelector"/>, applying by an 
            <see cref="P:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.ElementSelector"/> to the grouped items. This is a result operator, operating on the whole result set of the query.
            </summary>
            <example>
            In C#, the "group by" clause in the following sample corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator"/>. "s" (a reference to the query source 
            "s", see <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/>) is the <see cref="P:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.ElementSelector"/> expression, "s.Country" is the 
            <see cref="P:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.KeySelector"/> expression:
            <code>
            var query = from s in Students
                        where s.First == "Hugo"
                        group s by s.Country;
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.#ctor(System.String,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator"/> class.
            </summary>
            <param name="itemName">A name associated with the <see cref="T:System.Linq.IGrouping`2"/> items generated by the result operator.</param>
            <param name="keySelector">The selector retrieving the key by which to group items.</param>
            <param name="elementSelector">The selector retrieving the elements to group.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
            Clones this clause, adjusting all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> instances held by it as defined by
            <paramref name="cloneContext"/>.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Remotion.Linq.Clauses.CloneContext"/>.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Transforms all the expressions in this clause and its child objects via the given <paramref name="transformation"/> delegate.
            </summary>
            <param name="transformation">The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression"/> within this
            clause, and those expressions will be replaced with what the delegate returns.</param>
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.ItemName">
            <summary>
            Gets or sets the name of the items generated by this <see cref="T:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator"/>.
            </summary>
            <remarks>
            Item names are inferred when a query expression is parsed, and they usually correspond to the variable names present in that expression. 
            However, note that names are not necessarily unique within a <see cref="T:Remotion.Linq.QueryModel"/>. Use names only for readability and debugging, not for 
            uniquely identifying <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> objects. To match an <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> with its references, use the 
            <see cref="P:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource"/> property rather than the <see cref="P:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.ItemName"/>.
            </remarks>
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.ItemType">
            <summary>
            Gets or sets the type of the items generated by this <see cref="T:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator"/>. The item type is an instantiation of 
            <see cref="T:System.Linq.IGrouping`2"/> derived from the types of <see cref="P:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.KeySelector"/> and <see cref="P:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.ElementSelector"/>.
            </summary>
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.KeySelector">
            <summary>
            Gets or sets the selector retrieving the key by which to group items.
            This is a resolved version of the body of the <see cref="T:System.Linq.Expressions.LambdaExpression"/> that would be 
            passed to <see cref="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})"/>.
            </summary>
            <value>The key selector.</value>
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.GroupResultOperator.ElementSelector">
            <summary>
            Gets or sets the selector retrieving the elements to group.
            This is a resolved version of the body of the <see cref="T:System.Linq.Expressions.LambdaExpression"/> that would be 
            passed to <see cref="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})"/>.
            </summary>
            <value>The element selector.</value>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.ContainsResultOperator">
            <summary>
            Represents a check whether the results returned by a query contain a specific item.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Contains" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.ContainsResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).Contains (student);
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.ContainsResultOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.ResultOperators.ContainsResultOperator"/> class.
            </summary>
            <param name="item">The item for which to be searched.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.ContainsResultOperator.GetConstantItem``1">
            <summary>
            Gets the constant value of the <see cref="P:Remotion.Linq.Clauses.ResultOperators.ContainsResultOperator.Item"/> property, assuming it is a <see cref="T:System.Linq.Expressions.ConstantExpression"/>. If it is
            not, an <see cref="T:System.InvalidOperationException"/> is thrown.
            </summary>
            <typeparam name="T">The expected item type. If the item is not of this type, an <see cref="T:System.InvalidOperationException"/> is thrown.</typeparam>
            <returns>The constant value of the <see cref="P:Remotion.Linq.Clauses.ResultOperators.ContainsResultOperator.Item"/> property.</returns>
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.ContainsResultOperator.Item">
            <summary>
            Gets or sets an expression yielding the item for which to be searched. This must be compatible with (ie., assignable to) the source sequence 
            items.
            </summary>
            <value>The item expression.</value>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.ConcatResultOperator">
            <summary>
            Represents concatenating the items returned by a query with a given set of items, similar to the <see cref="T:Remotion.Linq.Clauses.ResultOperators.UnionResultOperator"/> but
            retaining duplicates (and order). 
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Concat" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.ConcatResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).Concat(students2);
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.ConcatResultOperator.GetConstantSource2">
            <summary>
            Gets the value of <see cref="P:Remotion.Linq.Clauses.ResultOperators.ConcatResultOperator.Source2"/>, assuming <see cref="P:Remotion.Linq.Clauses.ResultOperators.ConcatResultOperator.Source2"/> holds a <see cref="T:System.Linq.Expressions.ConstantExpression"/>. If it doesn't,
            an Exception is thrown.
            </summary>
            <returns>The constant value of <see cref="P:Remotion.Linq.Clauses.ResultOperators.ConcatResultOperator.Source2"/>.</returns>
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.ConcatResultOperator.Source2">
            <summary>
            Gets or sets the second source of this result operator, that is, an enumerable containing the items concatenated with the input sequence.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">
            <summary>
             This class represents a parameter to a command that will be sent to server
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> class.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            class with the parameter m_Name and a value of the new <b>NpgsqlParameter</b>.
            </summary>
            <param m_Name="parameterName">The m_Name of the parameter to map.</param>
            <param m_Name="value">An <see cref="T:System.Object">Object</see> that is the value of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see>.</param>
            <remarks>
            <p>When you specify an <see cref="T:System.Object">Object</see>
            in the value parameter, the <see cref="T:System.Data.DbType">DbType</see> is
            inferred from the .NET Framework type of the <b>Object</b>.</p>
            <p>When using this constructor, you must be aware of a possible misuse of the constructor which takes a DbType parameter.
            This happens when calling this constructor passing an int 0 and the compiler thinks you are passing a value of DbType.
            Use <code> Convert.ToInt32(value) </code> for example to have compiler calling the correct constructor.</p>
            </remarks>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.#ctor(System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            class with the parameter m_Name and the data type.
            </summary>
            <param m_Name="parameterName">The m_Name of the parameter to map.</param>
            <param m_Name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.#ctor(System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            class with the parameter m_Name, the <see cref="T:System.Data.DbType">DbType</see>, and the size.
            </summary>
            <param m_Name="parameterName">The m_Name of the parameter to map.</param>
            <param m_Name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
            <param m_Name="size">The length of the parameter.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.#ctor(System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            class with the parameter m_Name, the <see cref="T:System.Data.DbType">DbType</see>, the size,
            and the source column m_Name.
            </summary>
            <param m_Name="parameterName">The m_Name of the parameter to map.</param>
            <param m_Name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
            <param m_Name="size">The length of the parameter.</param>
            <param m_Name="sourceColumn">The m_Name of the source column.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.#ctor(System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType,System.Int32,System.String,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            class with the parameter m_Name, the <see cref="T:System.Data.DbType">DbType</see>, the size,
            the source column m_Name, a <see cref="T:System.Data.ParameterDirection">ParameterDirection</see>,
            the precision of the parameter, the scale of the parameter, a
            <see cref="T:System.Data.DataRowVersion">DataRowVersion</see> to use, and the
            value of the parameter.
            </summary>
            <param m_Name="parameterName">The m_Name of the parameter to map.</param>
            <param m_Name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
            <param m_Name="size">The length of the parameter.</param>
            <param m_Name="sourceColumn">The m_Name of the source column.</param>
            <param m_Name="direction">One of the <see cref="T:System.Data.ParameterDirection">ParameterDirection</see> values.</param>
            <param m_Name="isNullable"><b>true</b> if the value of the field can be null, otherwise <b>false</b>.</param>
            <param m_Name="precision">The total number of digits to the left and right of the decimal point to which
            <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Value">Value</see> is resolved.</param>
            <param m_Name="scale">The total number of decimal places to which
            <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Value">Value</see> is resolved.</param>
            <param m_Name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion">DataRowVersion</see> values.</param>
            <param m_Name="value">An <see cref="T:System.Object">Object</see> that is the value
            of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see>.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Clone">
            <summary>
            Creates a new <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> that
            is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> that is a copy of this instance.</returns>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Precision">
            <summary>
            Gets or sets the maximum number of digits used to represent the
            <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Value">Value</see> property.
            </summary>
            <value>The maximum number of digits used to represent the
            <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Value">Value</see> property.
            The default value is 0, which indicates that the data provider
            sets the precision for <b>Value</b>.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Scale">
            <summary>
            Gets or sets the number of decimal places to which
            <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Value">Value</see> is resolved.
            </summary>
            <value>The number of decimal places to which
            <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Value">Value</see> is resolved. The default is 0.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes, of the data within the column.
            </summary>
            <value>The maximum size, in bytes, of the data within the column.
            The default value is inferred from the parameter value.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.DbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType">DbType</see> of the parameter.
            </summary>
            <value>One of the <see cref="T:System.Data.DbType">DbType</see> values. The default is <b>String</b>.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.NpgsqlDbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType">DbType</see> of the parameter.
            </summary>
            <value>One of the <see cref="T:System.Data.DbType">DbType</see> values. The default is <b>String</b>.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Direction">
            <summary>
            Gets or sets a value indicating whether the parameter is input-only,
            output-only, bidirectional, or a stored procedure return value parameter.
            </summary>
            <value>One of the <see cref="T:System.Data.ParameterDirection">ParameterDirection</see>
            values. The default is <b>Input</b>.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.IsNullable">
            <summary>
            Gets or sets a value indicating whether the parameter accepts null values.
            </summary>
            <value><b>true</b> if null values are accepted; otherwise, <b>false</b>. The default is <b>false</b>.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.ParameterName">
            <summary>
            Gets or sets the m_Name of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see>.
            </summary>
            <value>The m_Name of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see>.
            The default is an empty string.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.CleanName">
            <summary>
            The m_Name scrubbed of any optional marker
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.SourceColumn">
            <summary>
            Gets or sets the m_Name of the source column that is mapped to the
            <see cref="T:System.Data.DataSet">DataSet</see> and used for loading or
            returning the <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Value">Value</see>.
            </summary>
            <value>The m_Name of the source column that is mapped to the
            <see cref="T:System.Data.DataSet">DataSet</see>. The default is an empty string.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.SourceVersion">
            <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion">DataRowVersion</see>
            to use when loading <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Value">Value</see>.
            </summary>
            <value>One of the <see cref="T:System.Data.DataRowVersion">DataRowVersion</see> values.
            The default is <b>Current</b>.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>An <see cref="T:System.Object">Object</see> that is the value of the parameter.
            The default value is null.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter.NpgsqlValue">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>An <see cref="T:System.Object">Object</see> that is the value of the parameter.
            The default value is null.</value>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommandBuilder">
            <summary>
             This class is responsible to create database commands for automatic insert, update and delete operations.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommandBuilder.DeriveParameters(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand)">
            <summary>
            
             This method is reponsible to derive the command parameter list with values obtained from function definition.
             It clears the Parameters collection of command. Also, if there is any parameter type which is not supported by Npgsql, an InvalidOperationException will be thrown.
             Parameters name will be parameter1, parameter2, ...
             For while, only parameter name and NpgsqlDbType are obtained.
            </summary>
             <param name="command">NpgsqlCommand whose function parameters will be obtained.</param>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopySerializer">
            <summary>
            Writes given objects into a stream for PostgreSQL COPY in default copy format (not CSV or BINARY).
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream">
            <summary>
            Stream for writing data to a table on a PostgreSQL version 7.4 or newer database during an active COPY FROM STDIN operation.
            <b>Passes data exactly as is and when given</b>, so see to it that you use server encoding, correct format and reasonably sized writes!
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.#ctor(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector)">
            <summary>
            Created only by NpgsqlCopyInState.StartCopy()
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.Close">
            <summary>
            Successfully completes copying data to server. Returns after operation is finished.
            Does nothing if this stream is not the active copy operation writer.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.Cancel(System.String)">
            <summary>
            Withdraws an already started copy operation. The operation will fail with given error message.
            Does nothing if this stream is not the active copy operation writer.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes given bytes to server.
            Fails if this stream is not the active copy operation writer.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.Flush">
            <summary>
            Flushes stream contents to server.
            Fails if this stream is not the active copy operation writer.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not readable
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not seekable
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.SetLength(System.Int64)">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.IsActive">
            <summary>
            True while this stream can be used to write copy data to server
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.CanRead">
            <summary>
            False
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.CanWrite">
            <summary>
            True
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.CanSeek">
            <summary>
            False
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.Length">
            <summary>
            Number of bytes written so far
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCopyInStream.Position">
            <summary>
            Number of bytes written so far; not settable
            </summary>
        </member>
        <member name="T:Revenj.Utility.Sorting">
            <summary>
            Sorting algorithms
            </summary>
        </member>
        <member name="M:Revenj.Utility.Sorting.TopologicalSort``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``0}})">
            <summary>
            Topological ordering of directed graph.
            </summary>
            <typeparam name="T">Node type</typeparam>
            <param name="nodes">Graph nodes</param>
            <param name="dependencies">Node dependencies</param>
            <returns>Sorted nodes</returns>
        </member>
        <member name="T:Revenj.Utility.ExpandoHelper">
            <summary>
            Utilities for expando object.
            </summary>
        </member>
        <member name="M:Revenj.Utility.ExpandoHelper.With(System.Dynamic.ExpandoObject,System.Action{System.Object})">
            <summary>
            Use dynamic syntax with ExpandoObject.
            </summary>
            <param name="eo">expando object</param>
            <param name="initialize">apply actions</param>
            <returns>self</returns>
        </member>
        <member name="M:Revenj.Utility.ExpandoHelper.AsExpando(System.Object)">
            <summary>
            Convert object to expando object.
            Copy properties from object using reflection.
            </summary>
            <param name="item">source instance</param>
            <returns>expando clone</returns>
        </member>
        <member name="T:Revenj.IUnitOfWork">
            <summary>
            Unit of work pattern.
            IDataContext with a transaction.
            Don't forget to Commit() before disposing
            </summary>
        </member>
        <member name="M:Revenj.IUnitOfWork.Commit">
            <summary>
            Confirm database transaction. 
            After commit, unit of work needs to be disposed
            </summary>
        </member>
        <member name="M:Revenj.IUnitOfWork.Rollback">
            <summary>
            Rollback database transaction.
            After rollback, unit of work needs to be disposed
            </summary>
        </member>
        <member name="T:Revenj.LocatorHelper">
            <summary>
            Helper class for IServiceLocator
            </summary>
        </member>
        <member name="M:Revenj.LocatorHelper.DoWork(System.IServiceProvider)">
            <summary>
            Create new unit of work from current locator
            </summary>
            <param name="locator">service locator</param>
            <returns>unit of work</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Util.ReleaseAction">
            <summary>
            Adapts an action to the <see cref="T:System.IDisposable"/> interface.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.ParameterExtensions">
            <summary>
            Extension methods that simplify extraction of parameter values from
            an <see cref="T:System.Collections.Generic.IEnumerable`1"/> where T is <see cref="T:Revenj.Extensibility.Autofac.Core.Parameter"/>.
            Each method returns the first matching parameter value, or throws an exception if
            none is provided.
            </summary>
            <example>
            At configuration time, delegate registrations can retrieve parameter values using
            the methods <see cref="M:Revenj.Extensibility.Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.String)"/>, <see cref="M:Revenj.Extensibility.Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.Int32)"/> and <see cref="M:Revenj.Extensibility.Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})"/>:
            <code>
            builder.Register((c, p) =&gt; new FtpClient(p.Named&lt;string&gt;("server")));
            </code>
            These parameters can be provided at resolution time:
            <code>
            container.Resolve&lt;FtpClient&gt;(new NamedParameter("server", "ftp.example.com"));
            </code>
            Alternatively, the parameters can be provided via a <i>Generated Factory</i> - http://code.google.com/p/autofac/wiki/DelegateFactories.
            </example>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.String)">
            <summary>
            Retrieve a named parameter value from a <see cref="T:Revenj.Extensibility.Autofac.NamedParameter"/> instance.
            </summary>
            <typeparam name="T">The type to which the returned value will be cast.</typeparam>
            <param name="parameters">The available parameters to choose from.</param>
            <param name="name">The name of the parameter to select.</param>
            <returns>The value of the selected parameter.</returns>
            <seealso cref="T:Revenj.Extensibility.Autofac.NamedParameter"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.Int32)">
            <summary>
            Retrieve a positional parameter value from a <see cref="T:Revenj.Extensibility.Autofac.PositionalParameter"/> instance.
            </summary>
            <typeparam name="T">The type to which the returned value will be cast.</typeparam>
            <param name="parameters">The available parameters to choose from.</param>
            <param name="position">The zero-based position of the parameter to select.</param>
            <returns>The value of the selected parameter.</returns>
            <remarks>The position value is the one associated with the parameter when
            it was constructed, <b>not</b> its index into the <paramref name="parameters"/>
            sequence.</remarks>
            <seealso cref="T:Revenj.Extensibility.Autofac.PositionalParameter"/>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Retrieve a typed parameter value from a <see cref="T:Revenj.Extensibility.Autofac.TypedParameter"/> instance.
            </summary>
            <typeparam name="T">The type to which the returned value will be cast.</typeparam>
            <param name="parameters">The available parameters to choose from.</param>
            <returns>The value of the selected parameter.</returns>
            <seealso cref="T:Revenj.Extensibility.Autofac.TypedParameter"/>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.NamedParameter">
            <summary>
            A parameter identified by name. When applied to a reflection-based
            component, <see cref="P:Revenj.Extensibility.Autofac.NamedParameter.Name"/> will be matched against
            the name of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Revenj.Extensibility.Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.String)"/>.
            </summary>
            <example>
            Component with parameter:
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            Providing the parameter:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(new NamedParameter("amount", 123));
            </code>
            </example>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.NamedParameter.#ctor(System.String,System.Object)">
            <summary>
            Create a <see cref="T:Revenj.Extensibility.Autofac.NamedParameter"/> with the specified constant value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.NamedParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.Metadata.StronglyTypedMetaRegistrationSource">
            <summary>
            Support the <see cref="T:Revenj.Extensibility.Autofac.Features.Metadata.Meta`2"/>
            types automatically whenever type T is registered with the container.
            Metadata values come from the component registration's metadata.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.ActivatingEventArgs`1">
            <summary>
            Fired after the construction of an instance but before that instance
            is shared with any other or any members are invoked on it.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.ActivatingEventArgs`1.#ctor(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.ActivatedEventArgs`1"/> class.
            </summary>
            <param name="service">Service which is activating</param>
            <param name="context">The context.</param>
            <param name="component">The component.</param>
            <param name="parameters">The parameters.</param>
            <param name="instance">The instance.</param>        
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.ActivatingEventArgs`1.Revenj#Extensibility#Autofac#Core#IActivatingEventArgs{T}#ReplaceInstance(System.Object)">
            <summary>
            The instance can be replaced if needed, e.g. by an interface proxy.
            </summary>
            <param name="instance">The object to use instead of the activated instance.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ActivatingEventArgs`1.Service">
            <summary>
            The service which is activating.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ActivatingEventArgs`1.Context">
            <summary>
            The context in which the activation occurred.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ActivatingEventArgs`1.Component">
            <summary>
            The component providing the instance.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ActivatingEventArgs`1.Instance">
            <summary>
            The instance that will be used to satisfy the request.
            </summary>
            <remarks>
            The instance can be replaced if needed, e.g. by an interface proxy.
            </remarks>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ActivatingEventArgs`1.Parameters">
            <summary>
            The parameters supplied to the activator.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder">
            <summary>
            Static factory methods to simplify the creation and handling of IRegistrationBuilder{L,A,R}.
            </summary>
            <example>
            To create an <see cref="T:Revenj.Extensibility.Autofac.Core.IComponentRegistration"/> for a specific type, use:
            <code>
            var cr = RegistrationBuilder.ForType(t).CreateRegistration();
            </code>
            The full builder syntax is supported:
            <code>
            var cr = RegistrationBuilder.ForType(t).Named("foo").ExternallyOwned().CreateRegistration();
            </code>
            </example>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder.ForDelegate``1(System.Func{Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},``0})">
            <summary>
            Creates a registration builder for the provided delegate.
            </summary>
            <typeparam name="T">Instance type returned by delegate.</typeparam>
            <param name="delegate">Delegate to register.</param>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder.ForDelegate(System.Type,System.Func{Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.Object})">
            <summary>
            Creates a registration builder for the provided delegate.
            </summary>
            <param name="delegate">Delegate to register.</param>
            <param name="limitType">Most specific type return value of delegate can be cast to.</param>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder.ForType``1">
            <summary>
            Creates a registration builder for the provided type.
            </summary>
            <typeparam name="TImplementor">Implementation type to register.</typeparam>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder.ForType(System.Type)">
            <summary>
            Creates a registration builder for the provided type.
            </summary>
            <param name="implementationType">Implementation type to register.</param>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder.CreateRegistration``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Create an <see cref="T:Revenj.Extensibility.Autofac.Core.IComponentRegistration"/> from a <see cref="T:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder"/>.
            (There is no need to call
            this method when registering components through a <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/>.)
            </summary>
            <remarks>
            When called on the result of one of the <see cref="T:Revenj.Extensibility.Autofac.ContainerBuilder"/> methods,
            the returned registration will be different from the one the builder itself registers
            in the container.
            </remarks>
            <example>
            <code>
            var registration = RegistrationBuilder.ForType&lt;Foo&gt;().CreateRegistration();
            </code>
            </example>
            <typeparam name="TLimit"></typeparam>
            <typeparam name="TActivatorData"></typeparam>
            <typeparam name="TSingleRegistrationStyle"></typeparam>
            <param name="rb">The registration builder.</param>
            <returns>An IComponentRegistration.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder.CreateRegistration(System.Guid,Revenj.Extensibility.Autofac.Builder.RegistrationData,Revenj.Extensibility.Autofac.Core.IInstanceActivator,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Service})">
            <summary>
            Create an IComponentRegistration from data.
            </summary>
            <param name="id">Id of the registration.</param>
            <param name="data">Registration data.</param>
            <param name="activator">Activator.</param>
            <param name="services">Services provided by the registration.</param>
            <returns>An IComponentRegistration.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder.CreateRegistration(System.Guid,Revenj.Extensibility.Autofac.Builder.RegistrationData,Revenj.Extensibility.Autofac.Core.IInstanceActivator,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Service},Revenj.Extensibility.Autofac.Core.IComponentRegistration)">
            <summary>
            Create an IComponentRegistration from data.
            </summary>
            <param name="id">Id of the registration.</param>
            <param name="data">Registration data.</param>
            <param name="activator">Activator.</param>
            <param name="services">Services provided by the registration.</param>
            <param name="target">Optional; target registration.</param>
            <returns>An IComponentRegistration.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationBuilder.RegisterSingleComponent``3(Revenj.Extensibility.Autofac.Core.IComponentRegistry,Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Register a component in the component registry. This helper method is necessary
            in order to execute OnRegistered hooks and respect PreserveDefaults. 
            </summary>
            <remarks>Hoping to refactor this out.</remarks>
            <typeparam name="TLimit"></typeparam>
            <typeparam name="TActivatorData"></typeparam>
            <typeparam name="TSingleRegistrationStyle"></typeparam>
            <param name="cr">Component registry to make registration in.</param>
            <param name="rb">Registration builder with data for new registration.</param>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IQueryParser">
            <summary>
            <see cref="T:Remotion.Linq.Parsing.Structure.IQueryParser"/> is implemented by classes taking an <see cref="T:System.Linq.Expressions.Expression"/> tree and parsing it into a <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
            <remarks>
            The default implementation of this interface is <see cref="T:Remotion.Linq.Parsing.Structure.QueryParser"/>. LINQ providers can, however, implement <see cref="T:Remotion.Linq.Parsing.Structure.IQueryParser"/>
            themselves, eg. in order to decorate or replace the functionality of <see cref="T:Remotion.Linq.Parsing.Structure.QueryParser"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.IQueryParser.GetParsedQuery(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:Remotion.Linq.QueryModel"/> of the given <paramref name="expressionTreeRoot"/>.
            </summary>
            <param name="expressionTreeRoot">The expression tree to parse.</param>
            <returns>A <see cref="T:Remotion.Linq.QueryModel"/> that represents the query defined in <paramref name="expressionTreeRoot"/>.</returns>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.TakeExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it usually follows (or replaces) a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectExpressionNode"/> of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that 
            represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.GroupJoinExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})"/>
            or <see cref="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})"/>
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor">
            <summary>
            Implements <see cref="T:Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor"/> by storing a list of inner <see cref="T:Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor"/> instances.
            The <see cref="M:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor.Process(System.Linq.Expressions.Expression)"/> method calls each inner instance in the order defined by the <see cref="P:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.CompoundExpressionTreeProcessor.InnerProcessors"/> property. This is an
            implementation of the Composite Pattern.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformation">
            <summary>
            Transforms a given <see cref="T:System.Linq.Expressions.Expression"/>. If the <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformation"/> can handle the <see cref="T:System.Linq.Expressions.Expression"/>,
            it should return a new, transformed <see cref="T:System.Linq.Expressions.Expression"/> instance. Otherwise, it should return the input <paramref name="expression"/> 
            instance.
            </summary>
            <param name="expression">The expression to be transformed.</param>
            <returns>The result of the transformation, or <paramref name="expression"/> if no transformation was applied.</returns>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.ReverseResultOperator">
            <summary>
            Represents reversing the sequence of items returned by of a query. 
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Reverse" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.ReverseResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).Reverse();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.ReverseResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.LastResultOperator">
            <summary>
            Represents taking only the last one of the items returned by a query. 
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
            "Last" query methods taking a predicate are represented as a combination of a <see cref="T:Remotion.Linq.Clauses.WhereClause"/> and a <see cref="T:Remotion.Linq.Clauses.ResultOperators.LastResultOperator"/>.
            </remarks>
            <example>
            In C#, the "Last" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.LastResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).Last();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.LastResultOperator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.ResultOperators.LastResultOperator"/>.
            </summary>
            <param name="returnDefaultWhenEmpty">The flag defines if a default expression should be regarded.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.LastResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.ExceptResultOperator">
            <summary>
            Represents the removal of a given set of items from the result set of a query.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Except" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.ExceptResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).Except(students2);
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.ExceptResultOperator.GetConstantSource2``1">
            <summary>
            Gets the value of <see cref="P:Remotion.Linq.Clauses.ResultOperators.ExceptResultOperator.Source2"/>, assuming <see cref="P:Remotion.Linq.Clauses.ResultOperators.ExceptResultOperator.Source2"/> holds a <see cref="T:System.Linq.Expressions.ConstantExpression"/>. If it doesn't,
            an exception is thrown.
            </summary>
            <returns>The constant value of <see cref="P:Remotion.Linq.Clauses.ResultOperators.ExceptResultOperator.Source2"/>.</returns>
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.ExceptResultOperator.Source2">
            <summary>
            Gets or sets the second source of this result operator, that is, an enumerable containing the items removed from the input sequence.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.DistinctResultOperator">
            <summary>
            Represents the removal of duplicate values from the items returned by a query.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Distinct" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.DistinctResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).Distinct();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.DistinctResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Remotion.Linq.Clauses.Ordering">
            <summary>
            Represents a single ordering instruction in an <see cref="T:Remotion.Linq.Clauses.OrderByClause"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.Ordering.#ctor(System.Linq.Expressions.Expression,Remotion.Linq.Clauses.OrderingDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.Ordering"/> class.
            </summary>
            <param name="expression">The expression used to order the data items returned by the query.</param>
            <param name="direction">The <see cref="P:Remotion.Linq.Clauses.Ordering.OrderingDirection"/> to use for sorting.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.Ordering.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,Remotion.Linq.Clauses.OrderByClause,System.Int32)">
            <summary>
            Accepts the specified visitor by calling its <see cref="M:Remotion.Linq.IQueryModelVisitor.VisitOrdering(Remotion.Linq.Clauses.Ordering,Remotion.Linq.QueryModel,Remotion.Linq.Clauses.OrderByClause,System.Int32)"/> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="orderByClause">The <see cref="T:Remotion.Linq.Clauses.OrderByClause"/> in whose context this item is visited.</param>
            <param name="index">The index of this item in the <paramref name="orderByClause"/>'s <see cref="P:Remotion.Linq.Clauses.OrderByClause.Orderings"/> collection.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.Ordering.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
            Clones this item.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Remotion.Linq.Clauses.CloneContext"/>.</param>
            <returns>A clone of this item.</returns>
        </member>
        <member name="M:Remotion.Linq.Clauses.Ordering.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Transforms all the expressions in this item via the given <paramref name="transformation"/> delegate.
            </summary>
            <param name="transformation">The transformation object. This delegate is called for each <see cref="P:Remotion.Linq.Clauses.Ordering.Expression"/> within this
            item, and those expressions will be replaced with what the delegate returns.</param>
        </member>
        <member name="P:Remotion.Linq.Clauses.Ordering.Expression">
            <summary>
            Gets or sets the expression used to order the data items returned by the query.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Remotion.Linq.Clauses.Ordering.OrderingDirection">
            <summary>
            Gets or sets the direction to use for ordering data items.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.Expressions.IVBSpecificExpressionVisitor">
            <summary>
            This interface should be implemented by visitors that handle VB-specific expressions.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.AdditionalFromClause">
            <summary>
            Represents a data source in a query that adds new data items in addition to those provided by the <see cref="T:Remotion.Linq.Clauses.MainFromClause"/>.
            </summary>
            <example>
            In C#, the second "from" clause in the following sample corresponds to an <see cref="T:Remotion.Linq.Clauses.AdditionalFromClause"/>:
            <ode>
            var query = from s in Students
                        from f in s.Friends
                        select f;
            </ode>
            </example>
        </member>
        <member name="T:Remotion.Linq.Clauses.FromClauseBase">
            <summary>
            Base class for from clauses (<see cref="T:Remotion.Linq.Clauses.AdditionalFromClause"/> and <see cref="T:Remotion.Linq.Clauses.MainFromClause"/>). From clauses define query sources that
            provide data items to the query which are filtered, ordered, projected, or otherwise processed by the following clauses.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.FromClauseBase.#ctor(System.String,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.FromClauseBase"/> class.
            </summary>
            <param name="itemName">A name describing the items generated by the from clause.</param>
            <param name="itemType">The type of the items generated by the from clause.</param>
            <param name="fromExpression">The <see cref="T:System.Linq.Expressions.Expression"/> generating data items for this from clause.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.FromClauseBase.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Transforms all the expressions in this clause and its child objects via the given <paramref name="transformation"/> delegate.
            </summary>
            <param name="transformation">The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression"/> within this
            clause, and those expressions will be replaced with what the delegate returns.</param>
        </member>
        <member name="P:Remotion.Linq.Clauses.FromClauseBase.ItemName">
            <summary>
            Gets or sets a name describing the items generated by this from clause.
            </summary>
            <remarks>
            Item names are inferred when a query expression is parsed, and they usually correspond to the variable names present in that expression. 
            However, note that names are not necessarily unique within a <see cref="T:Remotion.Linq.QueryModel"/>. Use names only for readability and debugging, not for 
            uniquely identifying <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> objects. To match an <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> with its references, use the 
            <see cref="P:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression.ReferencedQuerySource"/> property rather than the <see cref="P:Remotion.Linq.Clauses.FromClauseBase.ItemName"/>.
            </remarks>
        </member>
        <member name="P:Remotion.Linq.Clauses.FromClauseBase.ItemType">
            <summary>
            Gets or sets the type of the items generated by this from clause.
            </summary>
            <note type="warning">
            Changing the <see cref="P:Remotion.Linq.Clauses.FromClauseBase.ItemType"/> of a <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> can make all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> objects that
            point to that <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> invalid, so the property setter should be used with care.
            </note>
        </member>
        <member name="P:Remotion.Linq.Clauses.FromClauseBase.FromExpression">
            <summary>
            The expression generating the data items for this from clause.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.AdditionalFromClause.#ctor(System.String,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.AdditionalFromClause"/> class.
            </summary>
            <param name="itemName">A name describing the items generated by the from clause.</param>
            <param name="itemType">The type of the items generated by the from clause.</param>
            <param name="fromExpression">The <see cref="T:System.Linq.Expressions.Expression"/> generating the items of this from clause.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.AdditionalFromClause.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
            Accepts the specified visitor by calling its <see cref="M:Remotion.Linq.IQueryModelVisitor.VisitAdditionalFromClause(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel,System.Int32)"/> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
            <param name="index">The index of this clause in the <paramref name="queryModel"/>'s <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/> collection.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.AdditionalFromClause.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
            Clones this clause, registering its clone with the <paramref name="cloneContext"/>.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Remotion.Linq.Clauses.CloneContext"/>.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.CompletedResponse">
            <summary>
            Represents a completed response message.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlNotificationEventArgs">
            <summary>
            EventArgs class to send Notification parameters.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlNotificationEventArgs.PID">
            <summary>
            Process ID of the PostgreSQL backend that sent this notification.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlNotificationEventArgs.Condition">
            <summary>
            Condition that triggered that notification.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlNotificationEventArgs.AdditionalInformation">
            <summary>
            Additional Information From Notifiying Process (for future use, currently postgres always sets this to an empty string)
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSource.RegistrationsFor(Revenj.Extensibility.Autofac.Core.Service,System.Func{Revenj.Extensibility.Autofac.Core.Service,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.IComponentRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData">
            <summary>
            Data used to create factory activators.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData.#ctor(System.Type,Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Create a new GeneratedFactoryActivatorData
            </summary>
            <param name="delegateType">The type of the factory.</param>
            <param name="productService">The service used to provide the products of the factory.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData.ParameterMapping">
            <summary>
            Determines how the parameters of the delegate type are passed on
            to the generated Resolve() call as Parameter objects.
            For Func-based delegates, this defaults to ByType. Otherwise, the
            parameters will be mapped by name.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData.Activator">
            <summary>
            Activator data that can provide an IInstanceActivator instance.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Registration.ScopeRestrictedRegistry">
            <summary>
            Switches components with a RootScopeLifetime (singletons) with
            decorators exposing MatchingScopeLifetime targeting the specified scope.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Activators.Reflection.MostParametersConstructorSelector">
            <summary>
            Selects the constructor with the most parameters.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Activators.Reflection.IConstructorSelector">
            <summary>
            Selects the best constructor from a set of available constructors.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.IConstructorSelector.SelectConstructorBinding(Revenj.Extensibility.Autofac.Core.Activators.Reflection.ConstructorParameterBinding[])">
            <summary>
            Selects the best constructor from the available constructors.
            </summary>
            <param name="constructorBindings">Available constructors.</param>
            <returns>The best constructor.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.MostParametersConstructorSelector.SelectConstructorBinding(Revenj.Extensibility.Autofac.Core.Activators.Reflection.ConstructorParameterBinding[])">
            <summary>
            Selects the best constructor from the available constructors.
            </summary>
            <param name="constructorBindings">Available constructors.</param>
            <returns>The best constructor.</returns>
            <exception cref="T:Revenj.Extensibility.Autofac.Core.DependencyResolutionException">A single unambiguous match could not be chosen.</exception>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator">
            <summary>
            Provides a pre-constructed instance.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.#ctor(System.Object)">
            <summary>
            Provide the specified instance.
            </summary>
            <param name="instance">The instance to provide.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.GetFactory(Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Activate an instance in the provided context.
            </summary>
            <param name="context">Context in which to activate instances.</param>
            <param name="parameters">Parameters to the instance.</param>
            <returns>The activated instance.</returns>
            <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.DisposeInstance">
            <summary>
            Determines whether the activator disposes the instance that it holds.
            Necessary because otherwise instances that are never resolved will never be
            disposed.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.ParameterElementCollection">
            <summary>
            A collection of parameter elements.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ParameterElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Configuration.ParameterElementCollection"/> class.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ParameterElementCollection.ToParameters">
            <summary>
            Convert to the Autofac parameter type.
            </summary>
            <returns>The parameters represented by this collection.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.DictionaryElementCollection">
            <summary>
            Holds a dictionary of values for those properties/parameters that are a dictionary
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.DictionaryElementCollection.DictionaryElementTypeConverter">
            <summary>
            Helps convert the configuration element into an actuall generic list
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.AssemblyElement">
            <summary>
            Element describing a module registration.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.AssemblyElement.Assembly">
            <summary>
            Gets the name of the assembly
            </summary>
            <value>The assembly name.</value>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.MetadataConfiguration`1">
            <summary>
            Used with the WithMetadata configuration method to
            associate key-value pairs with an <see cref="T:Revenj.Extensibility.Autofac.Core.IComponentRegistration"/>.
            </summary>
            <typeparam name="TMetadata">Interface with properties whose names correspond to
            the property keys.</typeparam>
            <remarks>This feature was suggested by OJ Reeves (@TheColonial).</remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.MetadataConfiguration`1.For``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Set one of the property values.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyAccessor">An expression that accesses the property to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeFactory">
            <summary>
            Creates instances of classes implementing the <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> interface via Reflection.
            </summary>
            <remarks>
            The classes implementing <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> instantiated by this factory must implement a single constructor. The source and 
            constructor parameters handed to the <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeFactory.CreateExpressionNode(System.Type,Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo,System.Object[])"/> method are passed on to the constructor; for each argument where no 
            parameter is passed, <see langword="null"/> is passed to the constructor.
            </remarks>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionNodeFactory.CreateExpressionNode(System.Type,Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo,System.Object[])">
            <summary>
            Creates an instace of type <paramref name="nodeType"/>.
            </summary>
            <exception cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ExpressionNodeInstantiationException">
            Thrown if the <paramref name="parseInfo"/> or the <paramref name="additionalConstructorParameters"/> 
            do not match expected constructor parameters of the <paramref name="nodeType"/>.
            </exception>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.TupleNewExpressionTransformer">
            <summary>
            Detects <see cref="T:System.Linq.Expressions.NewExpression"/> nodes for the .NET tuple types and adds <see cref="T:System.Reflection.MemberInfo"/> metadata to those nodes.
            This allows LINQ providers to match member access and constructor arguments more easily.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.NullableValueTransformer">
            <summary>
            Replaces calls to <see cref="P:System.Nullable`1.Value"/> and <see cref="P:System.Nullable`1.HasValue"/> with casts and null checks. This allows LINQ providers
            to treat nullables like reference types.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.KeyValuePairNewExpressionTransformer">
            <summary>
            Detects <see cref="T:System.Linq.Expressions.NewExpression"/> nodes for <see cref="T:System.Collections.Generic.KeyValuePair`2"/> and adds <see cref="T:System.Reflection.MemberInfo"/> metadata to those nodes.
            This allows LINQ providers to match member access and constructor arguments more easily.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry">
            <summary>
            Manages registration and lookup of <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> objects, and converts them to 
            weakly typed <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformation"/> instances. Use this class together with <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.TransformingExpressionTreeVisitor"/>
            in order to apply the registered transformers to an <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry.CreateDefault">
            <summary>
            Creates an <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry"/> with the default transformations provided by this library already registered.
            New transformers can be registered by calling <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry.Register``1(Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer{``0})"/>.
            </summary>
            <returns> A default <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry"/>.</returns>
            <remarks>
            Currently, the default registry contains:
            <list type="bullet">
            <item><see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.VBCompareStringExpressionTransformer"/></item>
            <item><see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.VBInformationIsNothingExpressionTransformer"/></item>
            <item><see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.InvocationOfLambdaExpressionTransformer"/></item>
            <item><see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.NullableValueTransformer"/></item>
            <item><see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.KeyValuePairNewExpressionTransformer"/></item>
            <item><see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.DictionaryEntryNewExpressionTransformer"/></item>
            <item><see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.TupleNewExpressionTransformer"/></item>
            </list>
            </remarks>
        </member>
        <member name="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry.Register``1(Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer{``0})">
            <summary>
            Registers the specified <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> for the transformer's 
            <see cref="P:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1.SupportedExpressionTypes"/>. If <see cref="P:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1.SupportedExpressionTypes"/>
            returns <see langword="null"/>, the <paramref name="transformer"/> is registered as a generic transformer which will be applied to all
            <see cref="T:System.Linq.Expressions.Expression"/> nodes.
            </summary>
            <typeparam name="T">The type of expressions handled by the <paramref name="transformer"/>. This should be a type implemented by all
            expressions identified by <see cref="P:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1.SupportedExpressionTypes"/>. For generic transformers, <typeparamref name="T"/> 
            must be <see cref="T:System.Linq.Expressions.Expression"/>.</typeparam>
            <param name="transformer">The transformer to register.</param>
            <remarks>
            <para>
            The order in which transformers are registered is the same order on which they will later be applied by 
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.TransformingExpressionTreeVisitor"/>. When more than one transformer is registered for a certain <see cref="T:System.Linq.Expressions.ExpressionType"/>,
            each of them will get a chance to transform a given <see cref="T:System.Linq.Expressions.Expression"/>, until the first one returns a new <see cref="T:System.Linq.Expressions.Expression"/>.
            At that point, the transformation will start again with the new <see cref="T:System.Linq.Expressions.Expression"/> (and, if the expression's type has changed, potentially 
            different transformers).
            </para>
            <para>
            When generic transformers are registered, they act as if they had been registered for all <see cref="T:System.Linq.Expressions.ExpressionType"/> values (including
            custom ones). They will be applied in the order registered, but only after all respective specific transformers have run (without modifying 
            the expression, which would restart the transformation process with the new expression as explained above).
            </para>
            <para>
            When an <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> is registered for an incompatible <see cref="T:System.Linq.Expressions.ExpressionType"/>, this is not detected until 
            the transformer is actually applied to an <see cref="T:System.Linq.Expressions.Expression"/> of that <see cref="T:System.Linq.Expressions.ExpressionType"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo">
            <summary>
            Describes sequence data streamed out of a <see cref="T:Remotion.Linq.QueryModel"/> or <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/>. Sequence data can be held by an object
            implementing <see cref="T:System.Collections.Generic.IEnumerable`1"/>, and its items are described via a <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.ItemExpression"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.AdjustDataType(System.Type)">
            <summary>
            Returns a new <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo"/> with an adjusted <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.DataType"/>.
            </summary>
            <param name="dataType">The type to use for the <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.DataType"/> property. The type must be convertible from the previous type, otherwise
            an exception is thrown. The type may be a generic type definition; in this case,
            the type definition is automatically closed with the type of the <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.ItemExpression"/>.</param>
            <returns>
            A new <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo"/> with a new <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.DataType"/>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="dataType"/> is not compatible with the items described by this
            <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo"/>.</exception>
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.MakeClosedGenericExecuteMethod(System.Reflection.MethodInfo)">
            <summary>
            Takes the given <paramref name="genericMethodDefinition"/> and instantiates it, substituting its generic parameter with the 
            item type of the sequence described by this object. The method must have exactly one generic parameter.
            </summary>
            <param name="genericMethodDefinition">The generic method definition to instantiate.</param>
            <returns>
            A closed generic instantiation of <paramref name="genericMethodDefinition"/> with this object's item type substituted for
            the generic parameter.
            </returns>
        </member>
        <member name="P:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.ResultItemType">
            <summary>
            Gets the type of the items returned by the sequence described by this object, as defined by <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.DataType"/>. Note that because 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> is covariant starting from .NET 4.0, this may be a more abstract type than what's returned by 
            <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.ItemExpression"/>'s <see cref="P:System.Linq.Expressions.Expression.Type"/> property.
            </summary>
        </member>
        <member name="P:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.ItemExpression">
            <summary>
            Gets an expression that describes the structure of the items held by the sequence described by this object.
            </summary>
            <value>The expression for the sequence's items.</value>
        </member>
        <member name="P:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo.DataType">
            <summary>
            Gets the type of the data described by this <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo"/> instance. This is a type implementing
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>, where <c>T</c> is instantiated with a concrete type.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.AnyResultOperator">
            <summary>
            Represents a check whether any items are returned by a query.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
            "Any" query methods taking a predicate are represented as into a combination of a <see cref="T:Remotion.Linq.Clauses.WhereClause"/> and an 
            <see cref="T:Remotion.Linq.Clauses.ResultOperators.AnyResultOperator"/>.
            </remarks>
            <example>
            In C#, the "Any" call in the following example corresponds to an <see cref="T:Remotion.Linq.Clauses.ResultOperators.AnyResultOperator"/>.
            <code>
            var result = (from s in Students
                         select s).Any();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AnyResultOperator.ExecuteInMemory``1(Remotion.Linq.Clauses.StreamedData.StreamedSequence)">
            <inheritdoc cref="M:Remotion.Linq.Clauses.ResultOperatorBase.ExecuteInMemory(Remotion.Linq.Clauses.StreamedData.IStreamedData)"/>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AnyResultOperator.Clone(Remotion.Linq.Clauses.CloneContext)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AnyResultOperator.GetOutputDataInfo(Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AnyResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AnyResultOperator.ToString">
            <inheritdoc />
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlSchema">
            <summary>
            Provides the underlying mechanism for reading schema information.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlSchema.#ctor(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection)">
            <summary>
            Creates an NpgsqlSchema that can read schema information from the database.
            </summary>
            <param name="connection">An open database connection for reading metadata.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlSchema.GetMetaDataCollections">
            <summary>
            Returns the MetaDataCollections that lists all possible collections.
            </summary>
            <returns>The MetaDataCollections</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlSchema.GetRestrictions">
            <summary>
            Returns the Restrictions that contains the meaning and position of the values in the restrictions array.
            </summary>
            <returns>The Restrictions</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlSchema.GetDatabases(System.String[])">
            <summary>
            Returns the Databases that contains a list of all accessable databases.
            </summary>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Databases</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlSchema.GetTables(System.String[])">
            <summary>
            Returns the Tables that contains table and view names and the database and schema they come from.
            </summary>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Tables</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlSchema.GetColumns(System.String[])">
            <summary>
            Returns the Columns that contains information about columns in tables. 
            </summary>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Columns.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlSchema.GetViews(System.String[])">
            <summary>
            Returns the Views that contains view names and the database and schema they come from.
            </summary>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Views</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlSchema.GetUsers(System.String[])">
            <summary>
            Returns the Users containing user names and the sysid of those users.
            </summary>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Users.</returns>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlMediator">
            <summary>
             This class is responsible for serving as bridge between the backend
             protocol handling and the core classes. It is used as the mediator for
             exchanging data generated/sent from/to backend.
             </summary>
            
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectionStringBuilder.Clone">
            <summary>
            Return an exact copy of this NpgsqlConnectionString.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectionStringBuilder.SetValue(System.String,System.Object)">
            <summary>
            This function will set value for known key, both private member and base[key].
            </summary>
            <param name="keyword"></param>
            <param name="value"></param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectionStringBuilder.SetValue(Revenj.DatabasePersistence.Postgres.Npgsql.Keywords,System.Object)">
            <summary>
            The function will modify private member only, not base[key].
            </summary>
            <param name="keyword"></param>
            <param name="value"></param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectionStringBuilder.Clear">
            <summary>
            Clear the member and assign them to the default value.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectionStringBuilder.Compatible">
            <summary>
            Compatibilty version. When possible, behaviour caused by breaking changes will be preserved
            if this version is less than that where the breaking change was introduced.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectionStringBuilder.Item(System.String)">
            <summary>
            Case insensative accessor for indivual connection string values.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Util.ReflectionExtensions">
            <summary>
            Extension methods for reflection-related types.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.ReflectionExtensions.TryGetDeclaringProperty(System.Reflection.ParameterInfo,System.Reflection.PropertyInfo@)">
            <summary>
            Maps from a property-set-value parameter to the declaring property.
            </summary>
            <param name="pi">Parameter to the property setter.</param>
            <param name="prop">The property info on which the setter is specified.</param>
            <returns>True if the parameter is a property setter.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.ReflectionExtensions.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get a PropertyInfo object from an expression of the form
            x =&gt; x.P.
            </summary>
            <typeparam name="TDeclaring">Type declaring the property.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyAccessor">Expression mapping an instance of the
            declaring type to the property value.</param>
            <returns>Property info.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Util.ReflectionExtensions.GetMethod``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Get the MethodInfo for a method called in the
            expression.
            </summary>
            <typeparam name="TDeclaring">Type on which the method is called.</typeparam>
            <param name="methodCallExpression">Expression demonstrating how the method appears.</param>
            <returns>The method info for the called method.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.TypedParameter">
            <summary>
            A parameter that can supply values to sites that exactly
            match a specified type. When applied to a reflection-based
            component, <see cref="P:Revenj.Extensibility.Autofac.TypedParameter.Type"/> will be matched against
            the types of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Revenj.Extensibility.Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})"/>.
            </summary>
            <example>
            Component with parameter:
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            Providing the parameter:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(new TypedParameter(typeof(int), 123));
            </code>
            </example>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.TypedParameter.#ctor(System.Type,System.Object)">
            <summary>
            Create a typed parameter with the specified constant value.
            </summary>
            <param name="type">The exact type to match.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.TypedParameter.From``1(``0)">
            <summary>
            Shortcut for creating <see cref="T:Revenj.Extensibility.Autofac.TypedParameter"/> 
            by using the <typeparamref name="T"/>
            </summary>
            <typeparam name="T">type to be used for the parameter</typeparam>
            <param name="value">The parameter value.</param>
            <returns>new typed parameter</returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.TypedParameter.Type">
            <summary>
            The type against which targets are matched.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.RegistrationSourceAddedEventArgs">
            <summary>
            Fired when an <see cref="T:Revenj.Extensibility.Autofac.Core.IRegistrationSource"/> is added to the registry.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.RegistrationSourceAddedEventArgs.#ctor(Revenj.Extensibility.Autofac.Core.IComponentRegistry,Revenj.Extensibility.Autofac.Core.IRegistrationSource)">
            <summary>
            Construct an instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.RegistrationSourceAddedEventArgs"/> class.
            </summary>
            <param name="componentRegistry">The registry to which the source was added.</param>
            <param name="registrationSource">The source that was added.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.RegistrationSourceAddedEventArgs.RegistrationSource">
            <summary>
            The registry to which the source was added.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.RegistrationSourceAddedEventArgs.ComponentRegistry">
            <summary>
            The source that was added.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Lifetime.RootScopeLifetime">
            <summary>
            Attaches the component's lifetime to the root scope.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.RootScopeLifetime.FindScope(Revenj.Extensibility.Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
            <param name="mostNestedVisibleScope">The most nested visible scope.</param>
            <returns>The scope for the component.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.Util.ReflectionExtensions">
            <summary>
            Extension methods for reflection-related types.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.Util.ReflectionExtensions.TryGetDeclaringProperty(System.Reflection.ParameterInfo,System.Reflection.PropertyInfo@)">
            <summary>
            Maps from a property-set-value parameter to the declaring property.
            </summary>
            <param name="pi">Parameter to the property setter.</param>
            <param name="prop">The property info on which the setter is specified.</param>
            <returns>True if the parameter is a property setter.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.ServiceElementCollection">
            <summary>
            A collection of service elements.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ServiceElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Configuration.ServiceElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.ModuleElementCollection">
            <summary>
            A collection of module elements.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ModuleElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Configuration.ModuleElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.FileElementCollection">
            <summary>
            A collection of file elements.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.FileElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Configuration.FileElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader">
            <summary>
            Configures containers based upon app.config settings.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader.DefaultSectionName">
            <summary>
            The default section name that will be searched for.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader"/> class.
            The reader will look for a 'autofac' section.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader"/> class.
            </summary>
            <param name="sectionName">Name of the configuration section.</param>
            <param name="configurationFile">The configuration file.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader"/> class.
            </summary>
            <param name="sectionName">Name of the configuration section.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader.Load(Revenj.Extensibility.Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader.SetInjectProperties``2(Revenj.Extensibility.Autofac.Configuration.ComponentElement,Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1})">
            <summary>
            Sets the property injection mode for the component.
            </summary>
            <param name="component">The component.</param>
            <param name="registrar">The registrar.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader.SetOwnership``2(Revenj.Extensibility.Autofac.Configuration.ComponentElement,Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1})">
            <summary>
            Sets the ownership model of the component.
            </summary>
            <param name="component">The component.</param>
            <param name="registrar">The registrar.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader.SetScope``2(Revenj.Extensibility.Autofac.Configuration.ComponentElement,Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1})">
            <summary>
            Sets the scope model for the component.
            </summary>
            <param name="component">The component.</param>
            <param name="registrar">The registrar.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader.LoadType(System.String,System.Reflection.Assembly)">
            <summary>
            Loads the type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="defaultAssembly">The default assembly.</param>
            <returns></returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ConfigurationSettingsReader.SectionHandler">
            <summary>
            Gets the section handler.
            </summary>
            <value>The section handler.</value>
        </member>
        <member name="T:Remotion.Linq.Transformations.SubQueryFromClauseFlattener">
            <summary>
            Takes a <see cref="T:Remotion.Linq.QueryModel"/> and transforms it by replacing its <see cref="T:Remotion.Linq.Clauses.FromClauseBase"/> instances (<see cref="T:Remotion.Linq.Clauses.MainFromClause"/> and
            <see cref="T:Remotion.Linq.Clauses.AdditionalFromClause"/>) that contain subqueries with equivalent flattened clauses. Subqueries that contain a 
            <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/> (such as <see cref="T:Remotion.Linq.Clauses.ResultOperators.DistinctResultOperator"/> or <see cref="T:Remotion.Linq.Clauses.ResultOperators.TakeResultOperator"/>) cannot be
            flattened.
            </summary>
            <example>
            As an example, take the following query:
            <code>
            from c in Customers
            from o in (from oi in OrderInfos where oi.Customer == c orderby oi.OrderDate select oi.Order)
            orderby o.Product.Name
            select new { c, o }
            </code>
            This will be transformed into:
            <code>
            from c in Customers
            from oi in OrderInfos
            where oi.Customer == c
            orderby oi.OrderDate
            orderby oi.Order.Product.Name
            select new { c, oi.Order }
            </code>
            As another example, take the following query:
            <code>
            from c in (from o in Orders select o.Customer)
            where c.Name.StartsWith ("Miller")
            select c
            </code>
            (This query is never produced by the <see cref="T:Remotion.Linq.Parsing.Structure.QueryParser"/>, the only way to construct it is via manually building a 
            <see cref="T:Remotion.Linq.Clauses.MainFromClause"/>.)
            This will be transformed into:
            <code>
            from o in Orders
            where o.Customer.Name.StartsWith ("Miller")
            select o
            </code>
            </example>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.QueryParser">
            <summary>
            Takes an <see cref="T:System.Linq.Expressions.Expression"/> tree and parses it into a <see cref="T:Remotion.Linq.QueryModel"/> by use of an <see cref="P:Remotion.Linq.Parsing.Structure.QueryParser.ExpressionTreeParser"/>.
            It first transforms the <see cref="T:System.Linq.Expressions.Expression"/> tree into a chain of <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> instances, and then calls 
            <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode.CreateMainFromClause(Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/> and <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.Apply(Remotion.Linq.QueryModel,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/> in order to instantiate all the 
            <see cref="T:Remotion.Linq.Clauses.IClause"/>s. With those, a <see cref="T:Remotion.Linq.QueryModel"/> is created and returned.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.QueryParser.CreateDefault">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Parsing.Structure.QueryParser"/> class, using default parameters for parsing. 
            The <see cref="P:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.NodeTypeProvider"/> used has all relevant methods of the <see cref="T:System.Linq.Queryable"/> class 
            automatically registered, and the <see cref="P:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.Processor"/> comprises partial evaluation, and default 
            expression transformations. See <see cref="M:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.CreateDefaultNodeTypeProvider"/>, 
            <see cref="M:Remotion.Linq.Parsing.Structure.ExpressionTreeParser.CreateDefaultProcessor(Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTranformationProvider)"/>, and <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry.CreateDefault"/>
            for details.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.QueryParser.#ctor(Remotion.Linq.Parsing.Structure.ExpressionTreeParser)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Parsing.Structure.QueryParser"/> class, using the given <paramref name="expressionTreeParser"/> to
            convert <see cref="T:System.Linq.Expressions.Expression"/> instances into <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/>s. Use this constructor if you wish to customize the
            parser. To use a default parser (with the possibility to register custom node types), use the <see cref="M:Remotion.Linq.Parsing.Structure.QueryParser.CreateDefault"/> method.
            </summary>
            <param name="expressionTreeParser">The expression tree parser.</param>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.QueryParser.GetParsedQuery(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:Remotion.Linq.QueryModel"/> of the given <paramref name="expressionTreeRoot"/>.
            </summary>
            <param name="expressionTreeRoot">The expression tree to parse.</param>
            <returns>A <see cref="T:Remotion.Linq.QueryModel"/> that represents the query defined in <paramref name="expressionTreeRoot"/>.</returns>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.QueryParser.ApplyAllNodes(Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
            Applies all nodes to a <see cref="T:Remotion.Linq.QueryModel"/>, which is created by the trailing <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode"/> in the 
            <paramref name="node"/> chain.
            </summary>
            <param name="node">The entry point to the <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain.</param>
            <param name="clauseGenerationContext">The clause generation context collecting context information during the parsing process.</param>
            <returns>A <see cref="T:Remotion.Linq.QueryModel"/> created by the training <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode"/> and transformed by each node in the
            <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain.</returns>
        </member>
        <member name="P:Remotion.Linq.Parsing.Structure.QueryParser.NodeTypeProvider">
            <summary>
            Gets the <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider"/> used by <see cref="M:Remotion.Linq.Parsing.Structure.QueryParser.GetParsedQuery(System.Linq.Expressions.Expression)"/> to parse <see cref="T:System.Linq.Expressions.MethodCallExpression"/> instances.
            </summary>
            <value>The node type registry.</value>
        </member>
        <member name="P:Remotion.Linq.Parsing.Structure.QueryParser.Processor">
            <summary>
            Gets the <see cref="T:Remotion.Linq.Parsing.Structure.IExpressionTreeProcessor"/> used by <see cref="M:Remotion.Linq.Parsing.Structure.QueryParser.GetParsedQuery(System.Linq.Expressions.Expression)"/> to process the <see cref="T:System.Linq.Expressions.Expression"/> tree 
            before analyzing its structure.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.UnionExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it usually follows (or replaces) a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectExpressionNode"/> of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that 
            represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.OrderByDescendingExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for 
            <see cref="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.MemberBindings.MethodInfoBinding">
            <summary>
            Represents a <see cref="T:System.Reflection.MethodInfo"/> being bound to an associated <see cref="T:System.Linq.Expressions.Expression"/> instance. 
            <seealso cref="T:System.Linq.Expressions.MemberBinding"/>
            This binding's 
            <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.MemberBindings.MethodInfoBinding.MatchesReadAccess(System.Reflection.MemberInfo)"/> method returns <see langword="true"/> for the same <see cref="T:System.Reflection.MethodInfo"/> the expression is bound to or for a
            <see cref="T:System.Reflection.PropertyInfo"/> whose getter method is the <see cref="T:System.Reflection.MethodInfo"/> the expression is bound to.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlRowDescription">
             <summary>
             This class represents a RowDescription message sent from
             the PostgreSQL.
             </summary>
            
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlRowDescription.FieldData">
            <summary>
            This struct represents the internal data of the RowDescription message.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParse">
             <summary>
             This class represents the Parse message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlExecute">
             <summary>
             This class represents the Parse message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDescribe">
             <summary>
             This class represents the Parse message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicBackendToNativeTypeConverter">
            <summary>
            Provide event handlers to convert all native supported basic data types from their backend
            text representation to a .NET object.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicBackendToNativeTypeConverter.ToBinary(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Binary data.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicBackendToNativeTypeConverter.ToBoolean(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql boolean to a System.Boolean.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicBackendToNativeTypeConverter.ToBit(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql bit to a System.Boolean.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicBackendToNativeTypeConverter.ToDateTime(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql datetime to a System.DateTime.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicBackendToNativeTypeConverter.ToDate(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql date to a System.DateTime.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicBackendToNativeTypeConverter.ToTime(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql time to a System.DateTime.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicBackendToNativeTypeConverter.ToMoney(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql money to a System.Decimal.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicNativeToBackendTypeConverter">
            <summary>
            Provide event handlers to convert the basic native supported data types from
            native form to backend representation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicNativeToBackendTypeConverter.ToBinary(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Binary data.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicNativeToBackendTypeConverter.ToBoolean(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Convert to a postgresql boolean.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicNativeToBackendTypeConverter.ToBit(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Convert to a postgresql bit.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicNativeToBackendTypeConverter.ToDateTime(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Convert to a postgresql timestamp.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicNativeToBackendTypeConverter.ToDate(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Convert to a postgresql date.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicNativeToBackendTypeConverter.ToTime(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Convert to a postgresql time.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicNativeToBackendTypeConverter.ToMoney(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Convert to a postgres money.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BasicNativeToBackendTypeConverter.ToSingleDouble(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Convert to a postgres double with maximum precision.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedBackendToNativeTypeConverter">
            <summary>
            Provide event handlers to convert extended native supported data types from their backend
            text representation to a .NET object.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToPoint(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql point to a System.NpgsqlPoint.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToBox(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql point to a System.RectangleF.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToLSeg(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            LDeg.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToPath(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Path.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToPolygon(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToCircle(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToInet(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Inet.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToMacAddress(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            MAC Address.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToInterval(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            interval
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedNativeToBackendTypeConverter">
            <summary>
            Provide event handlers to convert extended native supported data types from
            native form to backend representation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToPoint(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Point.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToBox(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Box.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToLSeg(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            LSeg.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToPath(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Open path.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToPolygon(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToMacAddress(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Convert to a postgres MAC Address.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToCircle(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToIPAddress(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Convert to a postgres inet.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToInterval(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Convert to a postgres interval
            </summary>
        </member>
        <member name="T:Revenj.Utility.StableHashCode">
            <summary>
            Hash code utility.
            Stable hash code across versions and architectures
            </summary>
        </member>
        <member name="M:Revenj.Utility.StableHashCode.HashString(System.String)">
            <summary>
            Provide uniquish hash code for string value.
            TODO: convert to proven hash algorithm
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Revenj.Utility.AssemblyScanner">
            <summary>
            Utility for scanning and loading assemblies in current AppDomain.
            Microsoft-specific assemblies will be skipped.
            </summary>
        </member>
        <member name="F:Revenj.Utility.AssemblyScanner.AllAssemblies">
            <summary>
            Cache for <see cref="M:Revenj.Utility.AssemblyScanner.GetAssemblies"/>
            </summary>
        </member>
        <member name="F:Revenj.Utility.AssemblyScanner.AllTypes">
            <summary>
            Cache for <see cref="M:Revenj.Utility.AssemblyScanner.GetAllTypes"/>
            </summary>
        </member>
        <member name="M:Revenj.Utility.AssemblyScanner.GetAssemblies">
            <summary>
            Gets all referenced assemblies from current AppDomain, excluding dynamic or Microsoft-specific assemblies.
            Assemblies will be cached after first call.
            </summary>
            <returns>All referenced assemblies.</returns>
        </member>
        <member name="M:Revenj.Utility.AssemblyScanner.GetAllTypes">
            <summary>
            Get all types from assemblies.
            Types will be cached after first call.
            </summary>
            <returns>Types in assemblies</returns>
        </member>
        <member name="T:Revenj.Utility.DynamicOrderBy">
            <summary>
            Utility class for conversion from dynamic order to static order.
            </summary>
        </member>
        <member name="M:Revenj.Utility.DynamicOrderBy.OrderBy``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Boolean}})">
            <summary>
            Order by provided properties using specified direction.
            Properties (or paths) are specified as string.
            </summary>
            <typeparam name="T">collection type</typeparam>
            <param name="collection">collection projection</param>
            <param name="orderBy">order configuration</param>
            <returns>sorted projection</returns>
        </member>
        <member name="T:Mono.Security.Interface.CipherSuiteCode">
            <summary>
            RFC 2246 A.5
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.TypeExtensions">
            <summary>
            Extends <see cref="T:System.Type"/> with methods that are useful in
            building scanning rules for <see cref="M:Revenj.Extensibility.Autofac.RegistrationExtensions.RegisterAssemblyTypes(Revenj.Extensibility.Autofac.ContainerBuilder,System.Reflection.Assembly[])"/>.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.TypeExtensions.IsInNamespace(System.Type,System.String)">
            <summary>
            Returns true if this type is in the <paramref name="namespace"/> namespace
            or one of its sub-namespaces.
            </summary>
            <param name="this">The type to test.</param>
            <param name="namespace">The namespace to test.</param>
            <returns>True if this type is in the <paramref name="namespace"/> namespace
            or one of its sub-namespaces; otherwise, false.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.TypeExtensions.IsInNamespaceOf``1(System.Type)">
            <summary>
            Returns true if this type is in the same namespace as <typeparamref name="T"/>
            or one of its sub-namespaces.
            </summary>
            <param name="this">The type to test.</param>
            <returns>True if this type is in the same namespace as <typeparamref name="T"/>
            or one of its sub-namespaces; otherwise, false.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.TypeExtensions.IsClosedTypeOf(System.Type,System.Type)">
            <summary>Determines whether the candidate type supports any base or 
            interface that closes the provided generic type.</summary>
            <param name="this"></param>
            <param name="openGeneric"></param>
            <returns></returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.TypeExtensions.IsAssignableTo``1(System.Type)">
            <summary>
            Determines whether this type is assignable to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to test assignability to.</typeparam>
            <returns>True if this type is assignable to references of type
            <typeparamref name="T"/>; otherwise, False.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.Metadata.Meta`2">
            <summary>
            Provides a value along with metadata describing the value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <typeparam name="TMetadata">An interface to which metadata values can be bound.</typeparam>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.Metadata.Meta`2.#ctor(`0,`1)">
            <summary>
            Create a new instance.
            </summary>
            <param name="value">The value described by the instance.</param>
            <param name="metadata">The metadata describing the value.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.Metadata.Meta`2.Value">
            <summary>
            The value described by <see cref="P:Revenj.Extensibility.Autofac.Features.Metadata.Meta`2.Metadata"/>.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.Metadata.Meta`2.Metadata">
            <summary>
            Metadata describing the value.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData">
            <summary>
            Describes the basic requirements for generating a lightweight adapter.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData.#ctor(Revenj.Extensibility.Autofac.Core.Service,System.Func{Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.Object,System.Object})">
            <summary>
            Create an instance of <see cref="T:Revenj.Extensibility.Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData"/>.
            </summary>
            <param name="fromService">The service that will be adapted from.</param>
            <param name="adapter">The adapter function.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData.Adapter">
            <summary>
            The adapter function.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData.FromService">
            <summary>
            The service to be adapted from.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.ComponentRegisteredEventArgs">
            <summary>
            Information about the ocurrence of a component being registered
            with a container.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.ComponentRegisteredEventArgs.#ctor(Revenj.Extensibility.Autofac.Core.IComponentRegistry,Revenj.Extensibility.Autofac.Core.IComponentRegistration)">
            <summary>
            Create a new instance with a valid container and component registration.
            </summary>
            <param name="registry">The container into which the registration 
            was made.</param>
            <param name="componentRegistration">The component registration.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ComponentRegisteredEventArgs.ComponentRegistry">
            <summary>
            The container into which the registration was made.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.ComponentRegisteredEventArgs.ComponentRegistration">
            <summary>
            The component registration.
            </summary>
        </member>
        <member name="T:Remotion.Linq.QueryableBase`1">
            <summary>
            Acts as a common base class for <see cref="T:System.Linq.IQueryable`1"/> implementations based on re-linq. In a specific LINQ provider, a custom queryable
            class should be derived from <see cref="T:Remotion.Linq.QueryableBase`1"/> which supplies an implementation of <see cref="T:Remotion.Linq.IQueryExecutor"/> that is used to 
            execute the query. This is then used as an entry point (the main data source) of a LINQ query.
            </summary>
            <typeparam name="T">The type of the result items yielded by this query.</typeparam>
        </member>
        <member name="M:Remotion.Linq.QueryableBase`1.#ctor(Remotion.Linq.Parsing.Structure.IQueryParser,Remotion.Linq.IQueryExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.QueryableBase`1"/> class with a <see cref="T:Remotion.Linq.DefaultQueryProvider"/> and the given
            <paramref name="executor"/>. This constructor should be used by subclasses to begin a new query. The <see cref="P:Remotion.Linq.QueryableBase`1.Expression"/> generated by
            this constructor is a <see cref="T:System.Linq.Expressions.ConstantExpression"/> pointing back to this <see cref="T:Remotion.Linq.QueryableBase`1"/>.
            </summary>
            <param name="queryParser">The <see cref="T:Remotion.Linq.Parsing.Structure.IQueryParser"/> used to parse queries. Specify an instance of 
              <see cref="T:Remotion.Linq.Parsing.Structure.QueryParser"/> for default behavior. See also <see cref="M:Remotion.Linq.Parsing.Structure.QueryParser.CreateDefault"/>.</param>
            <param name="executor">The <see cref="T:Remotion.Linq.IQueryExecutor"/> used to execute the query represented by this <see cref="T:Remotion.Linq.QueryableBase`1"/>.</param>
        </member>
        <member name="M:Remotion.Linq.QueryableBase`1.#ctor(System.Linq.IQueryProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.QueryableBase`1"/> class with a specific <see cref="T:System.Linq.IQueryProvider"/>. This constructor
            should only be used to begin a query when <see cref="T:Remotion.Linq.DefaultQueryProvider"/> does not fit the requirements.
            </summary>
            <param name="provider">The provider used to execute the query represented by this <see cref="T:Remotion.Linq.QueryableBase`1"/> and to construct
            queries around this <see cref="T:Remotion.Linq.QueryableBase`1"/>.</param>
        </member>
        <member name="M:Remotion.Linq.QueryableBase`1.#ctor(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.QueryableBase`1"/> class with a given <paramref name="provider"/> and 
            <paramref name="expression"/>. This is an infrastructure constructor that must be exposed on subclasses because it is used by 
            <see cref="T:Remotion.Linq.DefaultQueryProvider"/> to construct queries around this <see cref="T:Remotion.Linq.QueryableBase`1"/> when a query method (e.g. of the
            <see cref="T:System.Linq.Queryable"/> class) is called.
            </summary>
            <param name="provider">The provider used to execute the query represented by this <see cref="T:Remotion.Linq.QueryableBase`1"/> and to construct
            queries around this <see cref="T:Remotion.Linq.QueryableBase`1"/>.</param>
            <param name="expression">The expression representing the query.</param>
        </member>
        <member name="M:Remotion.Linq.QueryableBase`1.GetEnumerator">
            <summary>
            Executes the query via the <see cref="P:Remotion.Linq.QueryableBase`1.Provider"/> and returns an enumerator that iterates through the items returned by the query.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the query result.
            </returns>
        </member>
        <member name="P:Remotion.Linq.QueryableBase`1.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>. This expression describes the
            query represented by this <see cref="T:Remotion.Linq.QueryableBase`1"/>.
            </summary>
            <value></value>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="P:Remotion.Linq.QueryableBase`1.Provider">
            <summary>
            Gets the query provider that is associated with this data source. The provider is used to execute the query. By default, a 
            <see cref="T:Remotion.Linq.DefaultQueryProvider"/> is used that parses the query and passes it on to an implementation of <see cref="T:Remotion.Linq.IQueryExecutor"/>.
            </summary>
            <value></value>
            <returns>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </returns>
        </member>
        <member name="P:Remotion.Linq.QueryableBase`1.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
            </returns>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.NameBasedRegistrationInfo">
            <summary>
            Defines a name and a filter predicate used when determining the matching expression node type by <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodNameBasedNodeTypeRegistry"/>.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SingleExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})"/>,
            <see cref="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/>,
            <see cref="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})"/> or 
            <see cref="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ReverseExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it usually follows (or replaces) a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectExpressionNode"/> of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that 
            represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode">
            <summary>
            Represents the first expression in a LINQ query, which acts as the main query source.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="P:Remotion.Linq.Parsing.Structure.IntermediateModel.MainSourceExpressionNode.ParsedExpression"/> tree is parsed.
            This node usually marks the end (i.e. the first node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.DefaultIfEmptyExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})"/> and
            <see cref="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)"/> and 
            <see cref="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})"/> and
            <see cref="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)"/>
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it usually follows (or replaces) a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectExpressionNode"/> of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that 
            represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.AnyExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for the <see cref="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})"/>,
            <see cref="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/>,
            <see cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})"/>, and
            <see cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/> methods.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.TreeEvaluation.EvaluatableTreeFindingExpressionTreeVisitor">
            <summary>
            Analyzes an expression tree by visiting each of its nodes, finding those subtrees that can be evaluated without modifying the meaning of
            the tree.
            </summary>
            <remarks>
            An expression node/subtree is evaluatable if:
            <list type="bullet">
            <item>it is not a <see cref="T:System.Linq.Expressions.ParameterExpression"/> or any non-standard expression, </item>
            <item>it is not a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> that involves an <see cref="T:System.Linq.IQueryable"/>, and</item>
            <item>it does not have any of those non-evaluatable expressions as its children.</item>
            </list>
            <see cref="T:System.Linq.Expressions.ParameterExpression"/> nodes are not evaluatable because they usually identify the flow of
            some information from one query node to the next. 
            <see cref="T:System.Linq.Expressions.MethodCallExpression"/> nodes that involve <see cref="T:System.Linq.IQueryable"/> parameters or object instances are not evaluatable because they 
            should usually be translated into the target query syntax.
            Non-standard expressions are not evaluatable because they cannot be compiled and evaluated by LINQ.
            </remarks>
        </member>
        <member name="T:Remotion.Linq.Clauses.Expressions.IPartialEvaluationExceptionExpressionVisitor">
            <summary>
            This interface should be implemented by visitors that handle the <see cref="T:Remotion.Linq.Clauses.Expressions.PartialEvaluationExceptionExpression"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer">
            <summary>
            Dynamically discovers attributes implementing the <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer.IMethodCallExpressionTransformerAttribute"/> interface on methods and get accessors
            invoked by <see cref="T:System.Linq.Expressions.MethodCallExpression"/> or <see cref="T:System.Linq.Expressions.MemberExpression"/> instances and applies the respective 
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/>.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer.IMethodCallExpressionTransformerAttribute">
            <summary>
            Defines an interface for attributes providing an <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> for a given <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <remarks>
            <para>
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer"/> detects attributes implementing this interface while expressions are parsed 
            and uses the <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> returned by <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer.IMethodCallExpressionTransformerAttribute.GetExpressionTransformer(System.Linq.Expressions.MethodCallExpression)"/> to modify the expressions.
            </para>
            <para>
            Only one attribute instance implementing <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer.IMethodCallExpressionTransformerAttribute"/> must be applied to a single method or property
            get accessor.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Linq.Clauses.StreamedData.StreamedScalarValueInfo">
            <summary>
            Describes a scalar value streamed out of a <see cref="T:Remotion.Linq.QueryModel"/> or <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/>. A scalar value corresponds to a
            value calculated from the result set, as produced by <see cref="T:Remotion.Linq.Clauses.ResultOperators.CountResultOperator"/> or <see cref="T:Remotion.Linq.Clauses.ResultOperators.ContainsResultOperator"/>, for instance.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.MinResultOperator">
            <summary>
            Represents taking only the smallest one of the items returned by a query.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
            The semantics of "smallest" are defined by the query provider. "Min" query methods taking a selector are represented as a combination
            of a <see cref="T:Remotion.Linq.Clauses.SelectClause"/> and a <see cref="T:Remotion.Linq.Clauses.ResultOperators.MinResultOperator"/>.
            </remarks>
            <example>
            In C#, the "Min" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.MinResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s.ID).Min();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.MinResultOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.ResultOperators.MinResultOperator"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.MinResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.CountResultOperator">
            <summary>
            Represents counting the number of items returned by a query.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
            "Count" query methods taking a predicate are represented as a combination of a <see cref="T:Remotion.Linq.Clauses.WhereClause"/> and a <see cref="T:Remotion.Linq.Clauses.ResultOperators.CountResultOperator"/>.
            </remarks>  /// <example>
            In C#, the "Count" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.CountResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).Count();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.CountResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Remotion.Linq.Clauses.QuerySourceMapping">
            <summary>
            Maps <see cref="T:Remotion.Linq.Clauses.IQuerySource"/> instances to <see cref="T:System.Linq.Expressions.Expression"/> instances. This is used by <see cref="M:Remotion.Linq.QueryModel.Clone"/>
            in order to be able to correctly update references to old clauses to point to the new clauses. Via 
            <see cref="T:Remotion.Linq.Clauses.ExpressionTreeVisitors.ReferenceReplacingExpressionTreeVisitor"/> and <see cref="T:Remotion.Linq.Clauses.ExpressionTreeVisitors.CloningExpressionTreeVisitor"/>, it can also be used manually.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ExpressionTreeVisitors.ReferenceReplacingExpressionTreeVisitor">
            <summary>
            Takes an expression and replaces all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> instances, as defined by a given <see cref="P:Remotion.Linq.Clauses.ExpressionTreeVisitors.ReferenceReplacingExpressionTreeVisitor.QuerySourceMapping"/>.
            This is used whenever references to query sources should be replaced by a transformation.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.ExpressionTreeVisitors.ReferenceReplacingExpressionTreeVisitor.ReplaceClauseReferences(System.Linq.Expressions.Expression,Remotion.Linq.Clauses.QuerySourceMapping,System.Boolean)">
            <summary>
            Takes an expression and replaces all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> instances, as defined by a given 
            <paramref name="querySourceMapping"/>.
            </summary>
            <param name="expression">The expression to be scanned for references.</param>
            <param name="querySourceMapping">The clause mapping to be used for replacing <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> instances.</param>
            <param name="throwOnUnmappedReferences">If <see langword="true"/>, the visitor will throw an exception when 
            <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> not mapped in the <paramref name="querySourceMapping"/> is encountered. If <see langword="false"/>,
            the visitor will ignore such expressions.</param>
            <returns>An expression with its <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> instances replaced as defined by the 
            <paramref name="querySourceMapping"/>.</returns>
        </member>
        <member name="T:Remotion.Linq.Clauses.Expressions.SubQueryExpression">
            <summary>
            Represents an <see cref="T:System.Linq.Expressions.Expression"/> that holds a subquery. The subquery is held by <see cref="P:Remotion.Linq.Clauses.Expressions.SubQueryExpression.QueryModel"/> in its parsed form.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.PGUtil">
            <summary>
             This class provides many util methods to handle
             reading and writing of PostgreSQL protocol messages.
             </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.PGUtil.ExtractServerVersion(System.String)">
            <summary>
            This method takes a version string as returned by SELECT VERSION() and returns
            a valid version string ("7.2.2" for example).
            This is only needed when running protocol version 2.
            This does not do any validity checks.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.PGUtil.ReadString(System.IO.Stream,Revenj.DatabasePersistence.Postgres.Npgsql.ByteBuffer)">
            <summary>
             This method gets a C NULL terminated string from the network stream.
             It keeps reading a byte in each time until a NULL byte is returned.
             It returns the resultant string of bytes read.
             This string is sent from backend.
             </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.PGUtil.ReadBytes(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads requested number of bytes from stream with retries until Stream.Read returns 0 or count is reached.
            </summary>
            <param name="stream">Stream to read</param>
            <param name="buffer">byte buffer to fill</param>
            <param name="offset">starting position to fill the buffer</param>
            <param name="count">number of bytes to read</param>
            <returns>The number of bytes read.  May be less than count if no more bytes are available.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.PGUtil.WriteString(System.String,System.IO.Stream)">
            <summary>
             This method writes a C NULL terminated string to the network stream.
             It appends a NULL terminator to the end of the String.
             </summary>
            <summary>
             This method writes a C NULL terminated string to the network stream.
             It appends a NULL terminator to the end of the String.
             </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.PGUtil.WriteBytes(System.Byte[],System.IO.Stream)">
            <summary>
            This method writes a set of bytes to the stream. It also enables logging of them.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.PGUtil.WriteLimString(System.String,System.Int32,System.IO.Stream)">
            <summary>
             This method writes a C NULL terminated string limited in length to the
             backend server.
             It pads the string with null bytes to the size specified.
             </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.PGUtil.WriteInt32(System.IO.Stream,System.Int32)">
            <summary>
            Write a 32-bit integer to the given stream in the correct byte order.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.PGUtil.ReadInt32(System.IO.Stream,System.Byte[])">
            <summary>
            Read a 32-bit integer from the given stream in the correct byte order.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.PGUtil.WriteInt16(System.IO.Stream,System.Int16)">
            <summary>
            Write a 16-bit integer to the given stream in the correct byte order.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.PGUtil.ReadInt16(System.IO.Stream,System.Byte[])">
            <summary>
            Read a 16-bit integer from the given stream in the correct byte order.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NoticeEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Notification">Notice</see> events.
            </summary>
            <param name="e">A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlNoticeEventArgs">NpgsqlNoticeEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NotificationEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Notification">Notification</see> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlNotificationEventArgs">NpgsqlNotificationEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">
            <summary>
            This class represents a connection to a
            PostgreSQL server.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">NpgsqlConnection</see> class.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">NpgsqlConnection</see> class
            and sets the <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.ConnectionString">ConnectionString</see>.
            </summary>
            <param name="ConnectionString">The connection used to open the PostgreSQL database.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified isolation level.
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel">isolation level</see> under which the transaction should run.</param>
            <returns>An <see cref="T:System.Data.Common.DbTransaction">DbTransaction</see>
            object representing the new transaction.</returns>
            <remarks>
            Currently the IsolationLevel ReadCommitted and Serializable are supported by the PostgreSQL backend.
            There's no support for nested transactions.
            </remarks>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
            <returns>A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>
            object representing the new transaction.</returns>
            <remarks>
            Currently there's no support for nested transactions.
            </remarks>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified isolation level.
            </summary>
            <param name="level">The <see cref="T:System.Data.IsolationLevel">isolation level</see> under which the transaction should run.</param>
            <returns>A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>
            object representing the new transaction.</returns>
            <remarks>
            Currently the IsolationLevel ReadCommitted and Serializable are supported by the PostgreSQL backend.
            There's no support for nested transactions.
            </remarks>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Open">
            <summary>
            Opens a database connection with the property settings specified by the
            <see cref="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.ConnectionString">ConnectionString</see>.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.ChangeDatabase(System.String)">
            <summary>
            This method changes the current database by disconnecting from the actual
            database and connecting to the specified.
            </summary>
            <param name="dbName">The name of the database to use in place of the current database.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Close">
            <summary>
            Releases the connection to the database.  If the connection is pooled, it will be
            made available for re-use.  If it is non-pooled, the actual connection will be shutdown.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.CreateDbCommand">
            <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand">DbCommand</see>
            object associated with the <see cref="T:System.Data.Common.DbConnection">IDbConnection</see>.
            </summary>
            <returns>A <see cref="T:System.Data.Common.DbCommand">DbCommand</see> object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.CreateCommand">
            <summary>
            Creates and returns a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">NpgsqlCommand</see>
            object associated with the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">NpgsqlConnection</see>.
            </summary>
            <returns>A <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">NpgsqlCommand</see> object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the
            <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection">NpgsqlConnection</see>.
            </summary>
            <param name="disposing"><b>true</b> when called from Dispose();
            <b>false</b> when being called from the finalizer.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.System#ICloneable#Clone">
            <summary>
            Create a new connection based on this one.
            </summary>
            <returns>A new NpgsqlConnection object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Clone">
            <summary>
            Create a new connection based on this one.
            </summary>
            <returns>A new NpgsqlConnection object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.DefaultCertificateSelectionCallback(System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Default SSL CertificateSelectionCallback implementation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.DefaultCertificateValidationCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32[])">
            <summary>
            Default SSL CertificateValidationCallback implementation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.DefaultPrivateKeySelectionCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.String)">
            <summary>
            Default SSL PrivateKeySelectionCallback implementation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.DefaultProvideClientCertificatesCallback(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Default SSL ProvideClientCertificatesCallback implementation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.GetSchema">
            <summary>
            Returns the supported collections
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.GetSchema(System.String)">
            <summary>
            Returns the schema collection specified by the collection name.
            </summary>
            <param name="collectionName">The collection name.</param>
            <returns>The collection specified.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.GetSchema(System.String,System.String[])">
            <summary>
            Returns the schema collection specified by the collection name filtered by the restrictions.
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="restrictions">
            The restriction values to filter the results.  A description of the restrictions is contained
            in the Restrictions collection.
            </param>
            <returns>The collection specified.</returns>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Notice">
            <summary>
            Occurs on NoticeResponses from the PostgreSQL backend.
            </summary>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Notification">
            <summary>
            Occurs on NotificationResponses from the PostgreSQL backend.
            </summary>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.ProvideClientCertificatesCallback">
            <summary>
            Called to provide client certificates for SSL handshake.
            </summary>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.CertificateSelectionCallback">
            <summary>
            Mono.Security.Protocol.Tls.CertificateSelectionCallback delegate.
            </summary>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.CertificateValidationCallback">
            <summary>
            Mono.Security.Protocol.Tls.CertificateValidationCallback delegate.
            </summary>
        </member>
        <member name="E:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.PrivateKeySelectionCallback">
            <summary>
            Mono.Security.Protocol.Tls.PrivateKeySelectionCallback delegate.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.ConnectionString">
            <summary>
            Gets or sets the string used to connect to a PostgreSQL database.
            Valid values are:
            <ul>
            <li>
            Server:             Address/Name of Postgresql Server;
            </li>
            <li>
            Port:               Port to connect to;
            </li>
            <li>
            Protocol:           Protocol version to use, instead of automatic; Integer 2 or 3;
            </li>
            <li>
            Database:           Database name. Defaults to user name if not specified;
            </li>
            <li>
            User Id:            User name;
            </li>
            <li>
            Password:           Password for clear text authentication;
            </li>
            <li>
            SSL:                True or False. Controls whether to attempt a secure connection. Default = False;
            </li>
            <li>
            Pooling:            True or False. Controls whether connection pooling is used. Default = True;
            </li>
            <li>
            MinPoolSize:        Min size of connection pool;
            </li>
            <li>
            MaxPoolSize:        Max size of connection pool;
            </li>
            <li>
            Timeout:            Time to wait for connection open in seconds. Default is 15.
            </li>
            <li>
            CommandTimeout:     Time to wait for command to finish execution before throw an exception. In seconds. Default is 20.
            </li>
            <li>
            Sslmode:            Mode for ssl connection control. Can be Prefer, Require, Allow or Disable. Default is Disable. Check user manual for explanation of values.
            </li>
            <li>
            ConnectionLifeTime: Time to wait before closing unused connections in the pool in seconds. Default is 15.
            </li>
            <li>
            SyncNotification:   Specifies if Npgsql should use synchronous notifications.
            </li>
            <li>
            SearchPath: Changes search path to specified and public schemas.
            </li>
            </ul>
            </summary>
            <value>The connection string that includes the server name,
            the database name, and other parameters needed to establish
            the initial connection. The default value is an empty string.
            </value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Host">
            <summary>
            Backend server host name.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Port">
            <summary>
            Backend server port.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.SSL">
            <summary>
            If true, the connection will attempt to use SSL.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.ConnectionTimeout">
            <summary>
            Gets the time to wait while trying to establish a connection
            before terminating the attempt and generating an error.
            </summary>
            <value>The time (in seconds) to wait for a connection to open. The default value is 15 seconds.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.CommandTimeout">
            <summary>
            Gets the time to wait while trying to execute a command
            before terminating the attempt and generating an error.
            </summary>
            <value>The time (in seconds) to wait for a command to complete. The default value is 20 seconds.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.ConnectionLifeTime">
            <summary>
            Gets the time to wait before closing unused connections in the pool if the count
            of all connections exeeds MinPoolSize.
            </summary>
            <remarks>
            If connection pool contains unused connections for ConnectionLifeTime seconds,
            the half of them will be closed. If there will be unused connections in a second
            later then again the half of them will be closed and so on.
            This strategy provide smooth change of connection count in the pool.
            </remarks>
            <value>The time (in seconds) to wait. The default value is 15 seconds.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Database">
            <summary>
             Gets the name of the current database or the database to be used after a connection is opened.
             </summary>
             <value>The name of the current database or the name of the database to be
             used after a connection is opened. The default value is the empty string.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.PreloadReader">
            <summary>
            Whether datareaders are loaded in their entirety (for compatibility with earlier code).
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.DataSource">
            <summary>
            Gets the database server name.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.SyncNotification">
            <summary>
            Gets flag indicating if we are using Synchronous notification or not.
            The default value is false.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.FullState">
            <summary>
            Gets the current state of the connection.
            </summary>
            <value>A bitwise combination of the <see cref="T:System.Data.ConnectionState">ConnectionState</see> values. The default is <b>Closed</b>.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.State">
            <summary>
            Gets whether the current state of the connection is Open or Closed
            </summary>
            <value>ConnectionState.Open or ConnectionState.Closed</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.PostgreSqlVersion">
            <summary>
            Version of the PostgreSQL backend.
            This can only be called when there is an active connection.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.ProcessID">
            <summary>
            Process id of backend server.
            This can only be called when there is an active connection.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Connector">
            <summary>
            The connector object connected to the backend.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.ConnectionStringValues">
            <summary>
            Gets the NpgsqlConnectionStringBuilder containing the parsed connection string values.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection.Pooling">
            <summary>
            Determine if connection pooling will be used for this connection.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTypesHelper">
            <summary>
            This class contains helper methods for type conversion between
            the .Net type system and postgresql.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTypesHelper.BackendTypeMappingCache">
            <summary>
            A cache of basic datatype mappings keyed by server version.  This way we don't
            have to load the basic type mappings for every connection.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTypesHelper.TryGetBackendTypeInfo(System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo@)">
            <summary>
            Find a NpgsqlNativeTypeInfo in the default types map that can handle objects
            of the given NpgsqlDbType.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTypesHelper.TryGetNativeTypeInfo(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo@)">
            <summary>
            Find a NpgsqlNativeTypeInfo in the default types map that can handle objects
            of the given NpgsqlDbType.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTypesHelper.TryGetNativeTypeInfo(System.Data.DbType,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo@)">
            <summary>
            Find a NpgsqlNativeTypeInfo in the default types map that can handle objects
            of the given DbType.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTypesHelper.TryGetNativeTypeInfo(System.Type,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo@)">
            <summary>
            Find a NpgsqlNativeTypeInfo in the default types map that can handle objects
            of the given System.Type.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTypesHelper.ConvertBackendStringToSystemType(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.IO.StreamReader,System.Int16,System.Int32)">
            <summary>
             This method is responsible to convert the string received from the backend
             to the corresponding NpgsqlType.
             The given TypeInfo is called upon to do the conversion.
             If no TypeInfo object is provided, no conversion is performed.
             </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTypesHelper.PrepareDefaultTypesMap">
            <summary>
            Create the one and only native to backend type map.
            This map is used when formatting native data
            types to backend representations.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTypesHelper.CreateAndLoadInitialTypesMapping(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector)">
            <summary>
             This method creates (or retrieves from cache) a mapping between type and OID 
             of all natively supported postgresql data types.
             This is needed as from one version to another, this mapping can be changed and
             so we avoid hardcoding them.
             </summary>
             <returns>NpgsqlTypeMapping containing all known data types.  The mapping must be
             cloned before it is modified because it is cached; changes made by one connection may
             effect another connection.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTypesHelper.LoadTypesMappings(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping,System.Collections.Generic.IEnumerable{Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo})">
            <summary>
            Attempt to map types by issuing a query against pg_type.
            This function takes a list of NpgsqlTypeInfo and attempts to resolve the OID field
            of each by querying pg_type.  If the mapping is found, the type info object is
            updated (OID) and added to the provided NpgsqlTypeMapping object.
            </summary>
            <param name="conn">NpgsqlConnector to send query through.</param>
            <param name="TypeMappings">Mapping object to add types too.</param>
            <param name="TypeInfoList">List of types that need to have OID's mapped.</param>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ConvertBackendToNativeHandler">
            <summary>
            Delegate called to convert the given backend data to its native representation.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ConvertNativeToBackendHandler">
            <summary>
            Delegate called to convert the given native data to its backand representation.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo">
            <summary>
            Represents a backend data type.
            This class can be called upon to convert a backend field representation to a native object.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo.#ctor(System.Int32,System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType,System.Data.DbType,System.Type,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ConvertBackendToNativeHandler)">
            <summary>
            Construct a new NpgsqlTypeInfo with the given attributes and conversion handlers.
            </summary>
            <param name="OID">Type OID provided by the backend server.</param>
            <param name="Name">Type name provided by the backend server.</param>
            <param name="NpgsqlDbType">NpgsqlDbType</param>
            <param name="Type">System type to convert fields of this type to.</param>
            <param name="ConvertBackendToNative">Data conversion handler.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo.ConvertToNative(System.String,System.Int16,System.Int32)">
            <summary>
            Perform a data conversion from a backend representation to 
            a native object.
            </summary>
            <param name="BackendData">Data sent from the backend.</param>
            <param name="TypeModifier">Type modifier field sent from the backend.</param>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo.OID">
            <summary>
            Type OID provided by the backend server.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo.Name">
            <summary>
            Type name provided by the backend server.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo.NpgsqlDbType">
            <summary>
            NpgsqlDbType.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo.DbType">
            <summary>
            NpgsqlDbType.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo.Type">
            <summary>
            Provider type to convert fields of this type to.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo.FrameworkType">
            <summary>
            System type to convert fields of this type to.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo">
            <summary>
            Represents a backend data type.
            This class can be called upon to convert a native object to its backend field representation,
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo.ArrayOf(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo)">
            <summary>
            Returns an NpgsqlNativeTypeInfo for an array where the elements are of the type
            described by the NpgsqlNativeTypeInfo supplied.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo.#ctor(System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType,System.Data.DbType,System.Boolean,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ConvertNativeToBackendHandler)">
            <summary>
            Construct a new NpgsqlTypeInfo with the given attributes and conversion handlers.
            </summary>
            <param name="Name">Type name provided by the backend server.</param>
            <param name="NpgsqlDbType">NpgsqlDbType</param>
            <param name="ConvertNativeToBackend">Data conversion handler.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo.ConvertToBackend(System.Object,System.Boolean)">
            <summary>
            Perform a data conversion from a native object to
            a backend representation.
            DBNull and null values are handled differently depending if a plain query is used
            When 
            </summary>
            <param name="NativeData">Native .NET object to be converted.</param>
            <param name="ForExtendedQuery">Flag indicating if the conversion has to be done for 
            plain queries or extended queries</param>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo.Name">
            <summary>
            Type name provided by the backend server.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo.NpgsqlDbType">
            <summary>
            NpgsqlDbType.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo.DbType">
            <summary>
            DbType.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo.Quote">
            <summary>
            Apply quoting.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo.UseSize">
            <summary>
            Use parameter size information.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping">
            <summary>
            Provide mapping between type OID, type name, and a NpgsqlBackendTypeInfo object that represents it.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping.#ctor">
            <summary>
            Construct an empty mapping.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping.#ctor(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping)">
            <summary>
            Copy constuctor.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping.AddType(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo)">
            <summary>
            Add the given NpgsqlBackendTypeInfo to this mapping.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping.AddType(System.Int32,System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType,System.Data.DbType,System.Type,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ConvertBackendToNativeHandler)">
            <summary>
            Add a new NpgsqlBackendTypeInfo with the given attributes and conversion handlers to this mapping.
            </summary>
            <param name="OID">Type OID provided by the backend server.</param>
            <param name="Name">Type name provided by the backend server.</param>
            <param name="NpgsqlDbType">NpgsqlDbType</param>
            <param name="Type">System type to convert fields of this type to.</param>
            <param name="BackendConvert">Data conversion handler.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping.Clone">
            <summary>
            Make a shallow copy of this type mapping.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping.ContainsOID(System.Int32)">
            <summary>
            Determine if a NpgsqlBackendTypeInfo with the given backend type OID exists in this mapping.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping.ContainsName(System.String)">
            <summary>
            Determine if a NpgsqlBackendTypeInfo with the given backend type name exists in this mapping.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping.Count">
            <summary>
            Get the number of type infos held.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping.Item(System.Int32)">
            <summary>
            Retrieve the NpgsqlBackendTypeInfo with the given backend type OID, or null if none found.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeMapping.Item(System.String)">
            <summary>
            Retrieve the NpgsqlBackendTypeInfo with the given backend type name, or null if none found.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeMapping">
            <summary>
            Provide mapping between type Type, NpgsqlDbType and a NpgsqlNativeTypeInfo object that represents it.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeMapping.AddType(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo)">
            <summary>
            Add the given NpgsqlNativeTypeInfo to this mapping.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeMapping.AddType(System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType,System.Data.DbType,System.Boolean,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ConvertNativeToBackendHandler)">
            <summary>
            Add a new NpgsqlNativeTypeInfo with the given attributes and conversion handlers to this mapping.
            </summary>
            <param name="Name">Type name provided by the backend server.</param>
            <param name="NpgsqlDbType">NpgsqlDbType</param>
            <param name="NativeConvert">Data conversion handler.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeMapping.TryGetValue(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo@)">
            <summary>
            Retrieve the NpgsqlNativeTypeInfo with the given NpgsqlDbType.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeMapping.TryGetValue(System.Data.DbType,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo@)">
            <summary>
            Retrieve the NpgsqlNativeTypeInfo with the given DbType.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeMapping.TryGetValue(System.Type,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo@)">
            <summary>
            Retrieve the NpgsqlNativeTypeInfo with the given Type.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeMapping.ContainsName(System.String)">
            <summary>
            Determine if a NpgsqlNativeTypeInfo with the given backend type name exists in this mapping.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeMapping.ContainsNpgsqlDbType(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Determine if a NpgsqlNativeTypeInfo with the given NpgsqlDbType exists in this mapping.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeMapping.ContainsType(System.Type)">
            <summary>
            Determine if a NpgsqlNativeTypeInfo with the given Type name exists in this mapping.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeMapping.Count">
            <summary>
            Get the number of type infos held.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval">
            <summary>
            Represents the PostgreSQL interval datatype.
            <remarks>PostgreSQL differs from .NET in how it's interval type doesn't assume 24 hours in a day
            (to deal with 23- and 25-hour days caused by daylight savings adjustments) and has a concept
            of months that doesn't exist in .NET's <see cref="T:System.TimeSpan"/> class. (Neither datatype
            has any concessions for leap-seconds).
            <para>For most uses just casting to and from TimeSpan will work correctly — in particular,
            the results of subtracting one <see cref="T:System.DateTime"/> or the PostgreSQL date, time and
            timestamp types from another should be the same whether you do so in .NET or PostgreSQL —
            but if the handling of days and months in PostgreSQL is important to your application then you
            should use this class instead of <see cref="T:System.TimeSpan"/>.</para>
            <para>If you don't know whether these differences are important to your application, they
            probably arent! Just use <see cref="T:System.TimeSpan"/> and do not use this class directly ☺</para>
            <para>To avoid forcing unnecessary provider-specific concerns on users who need not be concerned
            with them a call to <see cref="!:IDataRecord.GetValue(int)"/> on a field containing an
            <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> value will return a <see cref="T:System.TimeSpan"/> rather than an
            <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>. If you need the extra functionality of <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>
            then use <see cref="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlDataReader.GetInterval(System.Int32)"/>.</para>
            </remarks>
            <seealso cref="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Ticks"/>
            <seealso cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.JustifyDays"/>
            <seealso cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.JustifyMonths"/>
            <seealso cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Canonicalize"/>
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TicksPerMicrosecond">
            <summary>
            Represents the number of ticks (100ns periods) in one microsecond. This field is constant.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TicksPerMillsecond">
            <summary>
            Represents the number of ticks (100ns periods) in one millisecond. This field is constant.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TicksPerSecond">
            <summary>
            Represents the number of ticks (100ns periods) in one second. This field is constant.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TicksPerMinute">
            <summary>
            Represents the number of ticks (100ns periods) in one minute. This field is constant.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TicksPerHour">
            <summary>
            Represents the number of ticks (100ns periods) in one hour. This field is constant.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TicksPerDay">
            <summary>
            Represents the number of ticks (100ns periods) in one day. This field is constant.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.HoursPerDay">
            <summary>
            Represents the number of hours in one day (assuming no daylight savings adjustments). This field is constant.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.DaysPerMonth">
            <summary>
            Represents the number of days assumed in one month if month justification or unjustifcation is performed.
            This is set to 30 for consistency with PostgreSQL. Note that this is means that month adjustments cause
            a year to be taken as 30 &#xd7; 12 = 360 rather than 356/366 days.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TicksPerMonth">
            <summary>
            Represents the number of ticks (100ns periods) in one day, assuming 30 days per month. <seealso cref="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.DaysPerMonth"/>
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.MonthsPerYear">
            <summary>
            Represents the number of months in a year. This field is constant.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.MaxValue">
            <summary>
            Represents the maximum <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>. This field is read-only.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.MinValue">
            <summary>
            Represents the minimum <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>. This field is read-only.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Zero">
            <summary>
            Represents the zero <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>. This field is read-only.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.#ctor(System.Int64)">
            <summary>
            Initializes a new <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to the specified number of ticks.
            </summary>
            <param name="ticks">A time period expressed in 100ns units.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to hold the same time as a <see cref="T:System.TimeSpan"/>
            </summary>
            <param name="timespan">A time period expressed in a <see cref="T:System.TimeSpan"/></param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to the specified number of months, days
            &amp; ticks.
            </summary>
            <param name="months">Number of months.</param>
            <param name="days">Number of days.</param>
            <param name="ticks">Number of 100ns units.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to the specified number of
            days, hours, minutes &amp; seconds.
            </summary>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to the specified number of
            days, hours, minutes, seconds &amp; milliseconds.
            </summary>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="milliseconds">Number of milliseconds.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to the specified number of
            months, days, hours, minutes, seconds &amp; milliseconds.
            </summary>
            <param name="months">Number of months.</param>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="milliseconds">Number of milliseconds.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to the specified number of
            years, months, days, hours, minutes, seconds &amp; milliseconds.
            <para>Years are calculated exactly equivalent to 12 months.</para>
            </summary>
            <param name="years">Number of years.</param>
            <param name="months">Number of months.</param>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="milliseconds">Number of milliseconds.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.FromTicks(System.Int64)">
            <summary>
            Creates an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> from a number of ticks.
            </summary>
            <param name="ticks">The number of ticks (100ns units) in the interval.</param>
            <returns>A <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> with the given number of ticks.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.FromMicroseconds(System.Double)">
            <summary>
            Creates an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> from a number of microseconds.
            </summary>
            <param name="ticks">The number of microseconds in the interval.</param>
            <returns>A <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> with the given number of microseconds.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.FromMilliseconds(System.Double)">
            <summary>
            Creates an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> from a number of milliseconds.
            </summary>
            <param name="ticks">The number of milliseconds in the interval.</param>
            <returns>A <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> with the given number of milliseconds.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.FromSeconds(System.Double)">
            <summary>
            Creates an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> from a number of seconds.
            </summary>
            <param name="ticks">The number of seconds in the interval.</param>
            <returns>A <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> with the given number of seconds.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.FromMinutes(System.Double)">
            <summary>
            Creates an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> from a number of minutes.
            </summary>
            <param name="ticks">The number of minutes in the interval.</param>
            <returns>A <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> with the given number of minutes.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.FromHours(System.Double)">
            <summary>
            Creates an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> from a number of hours.
            </summary>
            <param name="ticks">The number of hours in the interval.</param>
            <returns>A <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> with the given number of hours.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.FromDays(System.Double)">
            <summary>
            Creates an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> from a number of days.
            </summary>
            <param name="ticks">The number of days in the interval.</param>
            <returns>A <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> with the given number of days.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.FromMonths(System.Double)">
            <summary>
            Creates an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> from a number of months.
            </summary>
            <param name="ticks">The number of months in the interval.</param>
            <returns>A <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> with the given number of months.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Add(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Adds another interval to this instance and returns the result.
            </summary>
            <param name="interval">An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to add to this instance.</param>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"></see> whose values are the sums of the two instances.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Subtract(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Subtracts another interval from this instance and returns the result.
            </summary>
            <param name="interval">An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to subtract from this instance.</param>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"></see> whose values are the differences of the two instances.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Negate">
            <summary>
            Returns an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> whose value is the negated value of this instance.
            </summary>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> whose value is the negated value of this instance.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Duration">
            <summary>
            This absolute value of this instance. In the case of some, but not all, components being negative,
            the rules used for justification are used to determine if the instance is positive or negative.
            </summary>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> whose value is the absolute value of this instance.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.JustifyDays">
            <summary>
            Equivalent to PostgreSQL's justify_days function.
            </summary>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> based on this one, but with any hours outside of the range [-23, 23]
            converted into days.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.UnjustifyDays">
            <summary>
            Opposite to PostgreSQL's justify_days function.
            </summary>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> based on this one, but with any days converted to multiples of ±24hours.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.JustifyMonths">
            <summary>
            Equivalent to PostgreSQL's justify_months function.
            </summary>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> based on this one, but with any days outside of the range [-30, 30]
            converted into months.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.UnjustifyMonths">
            <summary>
            Opposite to PostgreSQL's justify_months function.
            </summary>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> based on this one, but with any months converted to multiples of ±30days.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.JustifyInterval">
            <summary>
            Equivalent to PostgreSQL's justify_interval function.
            </summary>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> based on this one,
            but with any months converted to multiples of ±30days
            and then with any days converted to multiples of ±24hours</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.UnjustifyInterval">
            <summary>
            Opposite to PostgreSQL's justify_interval function.
            </summary>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> based on this one, but with any months converted to multiples of ±30days and then any days converted to multiples of ±24hours;</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Canonicalize" -->
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.op_Implicit(System.TimeSpan)~Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval">
            <summary>
            Implicit cast of a <see cref="T:System.TimeSpan"/> to an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>
            </summary>
            <param name="timespan">A <see cref="T:System.TimeSpan"/></param>
            <returns>An eqivalent, canonical, <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.op_Explicit(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)~System.TimeSpan">
            <summary>
            Implicit cast of an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="interval">A <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>.</param>
            <returns>An equivalent <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Equals(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Returns true if another <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> is exactly the same as this instance.
            </summary>
            <param name="other">An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> for comparison.</param>
            <returns>true if the two <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> instances are exactly the same,
            false otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Equals(System.Object)">
            <summary>
            Returns true if another object is an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>, that is exactly the same as
            this instance
            </summary>
            <param name="obj">An <see cref="T:System.Object"/> for comparison.</param>
            <returns>true if the argument is an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> and is exactly the same
            as this one, false otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Compare(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Compares two <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> instances.
            </summary>
            <param name="x">The first <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>.</param>
            <param name="y">The second <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>.</param>
            <returns>0 if the two are equal or equivalent. A value greater than zero if x is greater than y,
            a value less than zero if x is less than y.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.GetHashCode">
            <summary>
            A hash code suitable for uses with hashing algorithms.
            </summary>
            <returns>An signed integer.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.CompareTo(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Compares this instance with another/
            </summary>
            <param name="other">An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare this with.</param>
            <returns>0 if the instances are equal or equivalent. A value less than zero if
            this instance is less than the argument. A value greater than zero if this instance
            is greater than the instance.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.CompareTo(System.Object)">
            <summary>
            Compares this instance with another/
            </summary>
            <param name="other">An object to compare this with.</param>
            <returns>0 if the argument is an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> and the instances are equal or equivalent.
            A value less than zero if the argument is an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> and
            this instance is less than the argument.
            A value greater than zero if the argument is an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> and this instance
            is greater than the instance.</returns>
            A value greater than zero if the argument is null.
            <exception cref="T:System.ArgumentException">The argument is not an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>.</exception>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> and returns a <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> instance.
            Designed to use the formats generally returned by PostgreSQL.
            </summary>
            <param name="str">The <see cref="T:System.String"/> to parse.</param>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> represented by the argument.</returns>
            <exception cref="T:System.ArgumentNullException">The string was null.</exception>
            <exception cref="T:System.OverflowException">A value obtained from parsing the string exceeded the values allowed for the relevant component.</exception>
            <exception cref="T:System.FormatException">The string was not in a format that could be parsed to produce an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>.</exception>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TryParse(System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval@)">
            <summary>
            Attempt to parse a <see cref="T:System.String"/> to produce an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>.
            </summary>
            <param name="str">The <see cref="T:System.String"/> to parse.</param>
            <param name="result">(out) The <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> produced, or <see cref="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Zero"/> if the parsing failed.</param>
            <returns>true if the parsing succeeded, false otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.ToString">
            <summary>
            Create a <see cref="T:System.String"/> representation of the <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> instance.
            The format returned is of the form:
            [M mon[s]] [d day[s]] [HH:mm:ss[.f[f[f[f[f[f[f[f[f]]]]]]]]]]
            A zero <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> is represented as 00:00:00
            <remarks>
            Ticks are 100ns, Postgress resolution is only to 1µs at most. Hence we lose 1 or more decimal
            precision in storing values in the database. Despite this, this method will output that extra
            digit of precision. It's forward-compatible with any future increases in resolution up to 100ns,
            and also makes this ToString() more applicable to any other use-case.
            </remarks>
            </summary>
            <returns>The <see cref="T:System.String"/> representation.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.op_Addition(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Adds two <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> together.
            </summary>
            <param name="x">The first <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to add.</param>
            <param name="y">The second <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to add.</param>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> whose values are the sum of the arguments.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.op_Subtraction(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Subtracts one <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> from another.
            </summary>
            <param name="x">The <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to subtract the other from.</param>
            <param name="y">The <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to subtract from the other.</param>
            <returns>An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> whose values are the difference of the arguments</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.op_Equality(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Returns true if two <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> are exactly the same.
            </summary>
            <param name="x">The first <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <param name="y">The second <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <returns>true if the two arguments are exactly the same, false otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.op_Inequality(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Returns false if two <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> are exactly the same.
            </summary>
            <param name="x">The first <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <param name="y">The second <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <returns>false if the two arguments are exactly the same, true otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.op_LessThan(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Compares two <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> instances to see if the first is less than the second
            </summary>
            <param name="x">The first <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <param name="y">The second <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <returns>true if the first <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> is less than second, false otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.op_LessThanOrEqual(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Compares two <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> instances to see if the first is less than or equivalent to the second
            </summary>
            <param name="x">The first <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <param name="y">The second <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <returns>true if the first <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> is less than or equivalent to second, false otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.op_GreaterThan(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Compares two <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> instances to see if the first is greater than the second
            </summary>
            <param name="x">The first <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <param name="y">The second <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <returns>true if the first <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> is greater than second, false otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.op_GreaterThanOrEqual(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Compares two <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> instances to see if the first is greater than or equivalent the second
            </summary>
            <param name="x">The first <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <param name="y">The second <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <returns>true if the first <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> is greater than or equivalent to the second, false otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.op_UnaryPlus(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Returns the instance.
            </summary>
            <param name="x">An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>.</param>
            <returns>The argument.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.op_UnaryNegation(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Negates an <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> instance.
            </summary>
            <param name="x">An <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>.</param>
            <returns>The negation of the argument.</returns>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Ticks">
            <summary>
            The total number of ticks(100ns units) contained. This is the resolution of the
            <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/>  type. This ignores the number of days and
            months held. If you want them included use <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.UnjustifyInterval"/> first.
            <remarks>The resolution of the PostgreSQL
            interval type is by default 1µs = 1,000 ns. It may be smaller as follows:
            <list type="number">
            <item>
            <term>interval(0)</term>
            <description>resolution of 1s (1 second)</description>
            </item>
            <item>
            <term>interval(1)</term>
            <description>resolution of 100ms = 0.1s (100 milliseconds)</description>
            </item>
            <item>
            <term>interval(2)</term>
            <description>resolution of 10ms = 0.01s (10 milliseconds)</description>
            </item>
            <item>
            <term>interval(3)</term>
            <description>resolution of 1ms = 0.001s (1 millisecond)</description>
            </item>
            <item>
            <term>interval(4)</term>
            <description>resolution of 100µs = 0.0001s (100 microseconds)</description>
            </item>
            <item>
            <term>interval(5)</term>
            <description>resolution of 10µs = 0.00001s (10 microseconds)</description>
            </item>
            <item>
            <term>interval(6) or interval</term>
            <description>resolution of 1µs = 0.000001s (1 microsecond)</description>
            </item>
            </list>
            <para>As such, if the 100-nanosecond resolution is significant to an application, a PostgreSQL interval will
            not suffice for those purposes.</para>
            <para>In more frequent cases though, the resolution of the interval suffices.
            <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval"/> will always suffice to handle the resolution of any interval value, and upon
            writing to the database, will be rounded to the resolution used.</para>
            </remarks>
            <returns>The number of ticks in the instance.</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Microseconds">
            <summary>
            Gets the number of whole microseconds held in the instance.
            <returns>An  in the range [-999999, 999999].</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Milliseconds">
            <summary>
            Gets the number of whole milliseconds held in the instance.
            <returns>An  in the range [-999, 999].</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Seconds">
            <summary>
            Gets the number of whole seconds held in the instance.
            <returns>An  in the range [-59, 59].</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Minutes">
            <summary>
            Gets the number of whole minutes held in the instance.
            <returns>An  in the range [-59, 59].</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Hours">
            <summary>
            Gets the number of whole hours held in the instance.
            <remarks>Note that this can be less than -23 or greater than 23 unless <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.JustifyDays"/>
            has been used to produce this instance.</remarks>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Days">
            <summary>
            Gets the number of days held in the instance.
            <remarks>Note that this does not pay attention to a time component with -24 or less hours or
            24 or more hours, unless <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.JustifyDays"/> has been called to produce this instance.</remarks>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Months">
            <summary>
            Gets the number of months held in the instance.
            <remarks>Note that this does not pay attention to a day component with -30 or less days or
            30 or more days, unless <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.JustifyMonths"/> has been called to produce this instance.</remarks>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.Time">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> representing the time component of the instance.
            <remarks>Note that this may have a value beyond the range ±23:59:59.9999999 unless
            <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.JustifyDays"/> has been called to produce this instance.</remarks>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TotalTicks">
            <summary>
            The total number of ticks (100ns units) in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TotalMicroseconds">
            <summary>
            The total number of microseconds in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TotalMilliseconds">
            <summary>
            The total number of milliseconds in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TotalSeconds">
            <summary>
            The total number of seconds in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TotalMinutes">
            <summary>
            The total number of minutes in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TotalHours">
            <summary>
            The total number of hours in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TotalDays">
            <summary>
            The total number of days in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlInterval.TotalMonths">
            <summary>
            The total number of months in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTime.Normalize">
            <summary>
            Normalise this time; if it is 24:00:00, convert it to 00:00:00
            </summary>
            <returns>This time, normalised</returns>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTime.Ticks">
            <summary>
            The total number of ticks(100ns units) contained. This is the resolution of the
            <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTime"/>  type.
            <remarks>The resolution of the PostgreSQL
            interval type is by default 1µs = 1,000 ns. It may be smaller as follows:
            <list type="number">
            <item>
            <term>time(0)</term>
            <description>resolution of 1s (1 second)</description>
            </item>
            <item>
            <term>time(1)</term>
            <description>resolution of 100ms = 0.1s (100 milliseconds)</description>
            </item>
            <item>
            <term>time(2)</term>
            <description>resolution of 10ms = 0.01s (10 milliseconds)</description>
            </item>
            <item>
            <term>time(3)</term>
            <description>resolution of 1ms = 0.001s (1 millisecond)</description>
            </item>
            <item>
            <term>time(4)</term>
            <description>resolution of 100µs = 0.0001s (100 microseconds)</description>
            </item>
            <item>
            <term>time(5)</term>
            <description>resolution of 10µs = 0.00001s (10 microseconds)</description>
            </item>
            <item>
            <term>time(6) or interval</term>
            <description>resolution of 1µs = 0.000001s (1 microsecond)</description>
            </item>
            </list>
            <para>As such, if the 100-nanosecond resolution is significant to an application, a PostgreSQL time will
            not suffice for those purposes.</para>
            <para>In more frequent cases though, the resolution of time suffices.
            <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTime"/> will always suffice to handle the resolution of any time value, and upon
            writing to the database, will be rounded to the resolution used.</para>
            </remarks>
            <returns>The number of ticks in the instance.</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTime.Microseconds">
            <summary>
            Gets the number of whole microseconds held in the instance.
            <returns>An integer in the range [0, 999999].</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTime.Milliseconds">
            <summary>
            Gets the number of whole milliseconds held in the instance.
            <returns>An integer in the range [0, 999].</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTime.Seconds">
            <summary>
            Gets the number of whole seconds held in the instance.
            <returns>An interger in the range [0, 59].</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTime.Minutes">
            <summary>
            Gets the number of whole minutes held in the instance.
            <returns>An integer in the range [0, 59].</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTime.Hours">
            <summary>
            Gets the number of whole hours held in the instance.
            <remarks>Note that the time 24:00:00 can be stored for roundtrip compatibility. Any calculations on such a
            value will normalised it to 00:00:00.</remarks>
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTimeTZ.Normalize">
            <summary>
            Normalise this time; if it is 24:00:00, convert it to 00:00:00
            </summary>
            <returns>This time, normalised</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTimeTZ.CompareTo(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTimeTZ)">
            <summary>
            Compares this with another <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTimeTZ"/>. As per postgres' rules,
            first the times are compared as if they were both in the same timezone. If they are equal then
            then timezones are compared (+01:00 being "smaller" than -01:00).
            </summary>
            <param name="other">the <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTimeTZ"/> to compare with.</param>
            <returns>An integer which is 0 if they are equal, &lt; 0 if this is the smaller and &gt; 0 if this is the larger.</returns>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTimeTZ.Microseconds">
            <summary>
            Gets the number of whole microseconds held in the instance.
            <returns>An integer in the range [0, 999999].</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTimeTZ.Milliseconds">
            <summary>
            Gets the number of whole milliseconds held in the instance.
            <returns>An integer in the range [0, 999].</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTimeTZ.Seconds">
            <summary>
            Gets the number of whole seconds held in the instance.
            <returns>An interger in the range [0, 59].</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTimeTZ.Minutes">
            <summary>
            Gets the number of whole minutes held in the instance.
            <returns>An integer in the range [0, 59].</returns>
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlTimeTZ.Hours">
            <summary>
            Gets the number of whole hours held in the instance.
            <remarks>Note that the time 24:00:00 can be stored for roundtrip compatibility. Any calculations on such a
            value will normalised it to 00:00:00.</remarks>
            </summary>
        </member>
        <member name="T:Revenj.Utility.TemporaryResources">
            <summary>
            Access to temporary files.
            Default temporary folder is created at Revenj/Temp subfolder in system temporary folder
            Can be overridden with configuration settings: TemporaryPath
            </summary>
        </member>
        <member name="M:Revenj.Utility.TemporaryResources.CreateFile(System.String)">
            <summary>
            Create file with specified extension.
            File will be created in configured temporary folder.
            </summary>
            <param name="extension">created file extension</param>
            <returns>path to created file</returns>
        </member>
        <member name="M:Revenj.Utility.TemporaryResources.TempFile(System.String)">
            <summary>
            Create file in temporary folder with specified name.
            </summary>
            <param name="name">file name</param>
            <returns>full path to created file</returns>
        </member>
        <member name="M:Revenj.Utility.TemporaryResources.LoadAssembly(System.IO.Stream)">
            <summary>
            Load assembly from provided stream. Assembly will be loaded into current AppDomain.
            Assembly will be saved to temporary folder and loaded from there.
            </summary>
            <param name="content">assembly content</param>
            <returns>loaded assembly</returns>
        </member>
        <member name="M:Revenj.Utility.TemporaryResources.LoadDynamicAssembly(System.Byte[])">
            <summary>
            Load assembly from provided content. Assembly will be loaded into current AppDomain.
            Assembly will be saved to dynamic temporary folder and loaded from there.
            </summary>
            <param name="content">assembly content</param>
            <returns>loaded assembly</returns>
        </member>
        <member name="M:Revenj.Utility.TemporaryResources.CloneFile(System.String)">
            <summary>
            Create copy of the file in the temporary folder.
            </summary>
            <param name="file">original file</param>
            <returns>path to copied file</returns>
        </member>
        <member name="M:Revenj.Utility.TemporaryResources.CreateRandomObject(System.Type)">
            <summary>
            Create instance of specified type and populate it with
            random values.
            </summary>
            <param name="target">object type</param>
            <returns>object instance</returns>
        </member>
        <member name="T:Mono.Math.Prime.ConfidenceFactor">
            <summary>
            A factor of confidence.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.ExtraLow">
            <summary>
            Only suitable for development use, probability of failure may be greater than 1/2^20.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.Low">
            <summary>
            Suitable only for transactions which do not require forward secrecy.  Probability of failure about 1/2^40
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.Medium">
            <summary>
            Designed for production use. Probability of failure about 1/2^80.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.High">
            <summary>
            Suitable for sensitive data. Probability of failure about 1/2^160.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.ExtraHigh">
            <summary>
            Use only if you have lots of time! Probability of failure about 1/2^320.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.Provable">
            <summary>
            Only use methods which generate provable primes. Not yet implemented.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.Collections.CollectionRegistrationSource.RegistrationsFor(Revenj.Extensibility.Autofac.Core.Service,System.Func{Revenj.Extensibility.Autofac.Core.Service,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.IComponentRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.Collections.CollectionRegistrationExtensions">
            <summary>
            Internal implementation of the RegisterCollection/MemberOf-style collection feature.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.PreparingEventArgs">
            <summary>
            Fired before the activation process to allow parameters to be changed or an alternative
            instance to be provided.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.PreparingEventArgs.#ctor(Revenj.Extensibility.Autofac.Core.Service,Revenj.Extensibility.Autofac.IComponentContext,Revenj.Extensibility.Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.PreparingEventArgs"/> class.
            </summary>
            <param name="service">Service which is preparing</param>
            <param name="context">The context.</param>
            <param name="component">The component.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.PreparingEventArgs.Service">
            <summary>
            The service on which the activation is occuring.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.PreparingEventArgs.Context">
            <summary>
            The context in which the activation is occurring.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.PreparingEventArgs.Component">
            <summary>
            The component providing the instance being activated.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.PreparingEventArgs.Parameters">
            <summary>
            The parameters supplied to the activator.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.InstanceSharing">
            <summary>
            Determines whether instances are shared within a lifetime scope.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Core.InstanceSharing.None">
            <summary>
            Each request for an instance will return a new object.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Core.InstanceSharing.Shared">
            <summary>
            Each request for an instance will return the same object.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.InstanceOwnership">
            <summary>
            Determines when instances supporting IDisposable are disposed.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Core.InstanceOwnership.ExternallyOwned">
            <summary>
            The lifetime scope does not dispose the instances.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Core.InstanceOwnership.OwnedByLifetimeScope">
            <summary>
            The instances are disposed when the lifetime scope is disposed.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.ModuleElement">
            <summary>
            Element describing a module registration.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ModuleElement.Type">
            <summary>
            Gets the type of the module. Must expose <see cref="!:IModule"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ModuleElement.Parameters">
            <summary>
            Gets the parameters used to construct the component.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ModuleElement.Properties">
            <summary>
            Gets the properties to be explicitly set on the component.
            </summary>
            <value>The explicit properties.</value>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider">
            <summary>
            Implements <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider"/> by storing a list of inner <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider"/> instances.
            The <see cref="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider.IsRegistered(System.Reflection.MethodInfo)"/> and <see cref="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.CompoundNodeTypeProvider.GetNodeType(System.Reflection.MethodInfo)"/> methods delegate to these inner instances. This is an
            implementation of the Composite Pattern.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.GroupByWithResultSelectorExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for the different <see cref="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> 
            overloads that do take a result selector. The overloads without a result selector are represented by 
            <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.GroupByExpressionNode"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            </summary>
            <remarks>
            The GroupBy overloads with result selector are parsed as if they were a <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectExpressionNode"/> following a 
            <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.GroupByExpressionNode"/>:
            <code>
            x.GroupBy (k =&gt; key, e =&gt; element, (k, g) =&gt; result)
            </code>
            is therefore equivalent to:
            <code>
            c.GroupBy (k =&gt; key, e =&gt; element).Select (grouping =&gt; resultSub)
            </code>
            where resultSub is the same as result with k and g substituted with grouping.Key and grouping, respectively.
            </remarks>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor">
            <summary>
            Applies a given set of transformations to an <see cref="T:System.Linq.Expressions.Expression"/> tree. The transformations are provided by an instance of
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTranformationProvider"/> (eg., <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry"/>).
            </summary>
            <remarks>
            The <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor"/> uses the <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.TransformingExpressionTreeVisitor"/> to apply the transformations.
            It performs a single visiting run over the <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </remarks>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor.#ctor(Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTranformationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor"/> class.
            </summary>
            <param name="provider">A class providing the transformations to apply to the tree, eg., an instance of 
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.ExpressionTransformerRegistry"/>.</param>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.MethodCallExpressionTransformerAttribute">
            <summary>
            Chooses a given <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> for a specific method (or property get accessor).
            </summary>
            <remarks>
            The <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.IExpressionTransformer`1"/> must have a default constructor. To choose a transformer that does not have a default constructor,
            create your own custom attribute class implementing 
            <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations.AttributeEvaluatingExpressionTransformer.IMethodCallExpressionTransformerAttribute"/>.
            </remarks>
        </member>
        <member name="T:Remotion.Linq.Clauses.StreamedData.StreamedValue">
            <summary>
            Holds the data needed to represent the output or input of a part of a query in memory. This is mainly used for 
            <see cref="M:Remotion.Linq.Clauses.ResultOperatorBase.ExecuteInMemory(Remotion.Linq.Clauses.StreamedData.IStreamedData)"/>.  The data is a single, non-sequence value and can only be consumed by result operators 
            working with single values.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.StreamedValue.#ctor(System.Object,Remotion.Linq.Clauses.StreamedData.StreamedValueInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedValue"/> class, setting the <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedValue.Value"/> and <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedValue.DataInfo"/> properties.
            </summary>
            <param name="value">The value.</param>
            <param name="streamedValueInfo">A <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedValueInfo"/> describing the value.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.StreamedData.StreamedValue.GetTypedValue``1">
            <summary>
            Gets the value held by <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedValue.Value"/>, throwing an exception if the value is not of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type of the value.</typeparam>
            <returns><see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedValue.Value"/>, cast to <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:Remotion.Linq.Clauses.StreamedData.StreamedValue.Value"/> if not of the expected type.</exception>
        </member>
        <member name="P:Remotion.Linq.Clauses.StreamedData.StreamedValue.DataInfo">
            <summary>
            Gets an object describing the data held by this <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedValue"/> instance.
            </summary>
            <value>
            An <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedValueInfo"/> object describing the data held by this <see cref="T:Remotion.Linq.Clauses.StreamedData.StreamedValue"/> instance.
            </value>
        </member>
        <member name="P:Remotion.Linq.Clauses.StreamedData.StreamedValue.Value">
            <summary>
            Gets the current value for the <see cref="M:Remotion.Linq.Clauses.ResultOperatorBase.ExecuteInMemory(Remotion.Linq.Clauses.StreamedData.IStreamedData)"/> operation. If the object is used as input, this 
            holds the input value for the operation. If the object is used as output, this holds the result of the operation.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.DefaultIfEmptyResultOperator">
            <summary>
            Represents a guard clause yielding a singleton sequence with a default value if no items are returned by a query.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Defaultifempty" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.DefaultIfEmptyResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).DefaultIfEmpty ("student");
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.DefaultIfEmptyResultOperator.GetConstantOptionalDefaultValue">
            <summary>
            Gets the constant <see cref="T:System.Object"/> value of the <see cref="P:Remotion.Linq.Clauses.ResultOperators.DefaultIfEmptyResultOperator.OptionalDefaultValue"/> property, assuming it is a <see cref="T:System.Linq.Expressions.ConstantExpression"/>. If it is
            not, an expression is thrown. If it is <see langword="null"/>, <see langword="null"/> is returned.
            </summary>
            <returns>The constant <see cref="T:System.Object"/> value of the <see cref="P:Remotion.Linq.Clauses.ResultOperators.DefaultIfEmptyResultOperator.OptionalDefaultValue"/> property.</returns>
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.DefaultIfEmptyResultOperator.OptionalDefaultValue">
            <summary>
            Gets or sets the optional default value.
            </summary>
            <value>The optional default value.</value>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.CastResultOperator">
            <summary>
            Represents a cast of the items returned by a query to a different type.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, "Cast" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.CastResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s.ID).Cast&lt;int&gt;();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.CastResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Remotion.Linq.Clauses.MainFromClause">
            <summary>
            Represents the main data source in a query, producing data items that are filtered, aggregated, projected, or otherwise processed by
            subsequent clauses.
            </summary>
            <example>
            In C#, the first "from" clause in the following sample corresponds to the <see cref="T:Remotion.Linq.Clauses.MainFromClause"/>:
            <ode>
            var query = from s in Students
                        from f in s.Friends
                        select f;
            </ode>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.MainFromClause.#ctor(System.String,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.MainFromClause"/> class.
            </summary>
            <param name="itemName">A name describing the items generated by the from clause.</param>
            <param name="itemType">The type of the items generated by the from clause.</param>
            <param name="fromExpression">The <see cref="T:System.Linq.Expressions.Expression"/> generating data items for this from clause.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.MainFromClause.Accept(Remotion.Linq.IQueryModelVisitor,Remotion.Linq.QueryModel)">
            <summary>
            Accepts the specified visitor by calling its <see cref="M:Remotion.Linq.IQueryModelVisitor.VisitMainFromClause(Remotion.Linq.Clauses.MainFromClause,Remotion.Linq.QueryModel)"/> method.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="queryModel">The query model in whose context this clause is visited.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.MainFromClause.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
            Clones this clause, registering its clone with the <paramref name="cloneContext"/>.
            </summary>
            <param name="cloneContext">The clones of all query source clauses are registered with this <see cref="T:Remotion.Linq.Clauses.CloneContext"/>.</param>
            <returns>A clone of this clause.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlClosedState.ResolveIPHost(System.String)">
            <summary>
            Resolve a host name or IP address.
            This is needed because if you call Dns.Resolve() with an IP address, it will attempt
            to resolve it as a host name, when it should just convert it to an IP address.
            </summary>
            <param name="HostName"></param>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlRow">
            <summary>
            This is the abstract base class for NpgsqlAsciiRow and NpgsqlBinaryRow.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.RowReader">
            <summary>
            Reads a row, field by field, allowing a DataRow to be built appropriately.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.RowReader.Streamer">
            <summary>
            Reads part of a field, as needed (for <see cref="!:System.Data.IDataRecord.GetChars()"/>
            and <see cref="!:System.Data.IDataRecord.GetBytes()"/>
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.RowReader.Streamer`1">
            <summary>
            Adds further functionality to stream that is dependant upon the type of data read.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.RowReader.CharStreamer">
            <summary>
            Completes the implementation of Streamer for char data.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.RowReader.ByteStreamer">
            <summary>
            Completes the implementation of Streamer for byte data.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool">
            <summary>
            This class manages all connector objects, pooled AND non-pooled.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.ConnectorPoolMgr">
            <value>Unique static instance of the connector pool
            mamager.</value>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.PooledConnectors">
            <value>Map of index to unused pooled connectors, avaliable to the
            next RequestConnector() call.</value>
            <remarks>This hashmap will be indexed by connection string.
            This key will hold a list of queues of pooled connectors available to be used.</remarks>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.Timer">
            <value>Timer for tracking unused connections in pools.</value>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.RequestConnector(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection)">
            <summary>
            Searches the shared and pooled connector lists for a
            matching connector object or creates a new one.
            </summary>
            <param name="Connection">The NpgsqlConnection that is requesting
            the connector. Its ConnectionString will be used to search the
            pool for available connectors.</param>
            <returns>A connector object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.RequestPooledConnectorInternal(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection)">
            <summary>
            Find a pooled connector.  Handle shared/non-shared here.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.ReleaseConnector(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector)">
            <summary>
            Releases a connector, possibly back to the pool for future use.
            </summary>
            <remarks>
            Pooled connectors will be put back into the pool if there is room.
            Shared connectors should just have their use count decremented
            since they always stay in the shared pool.
            </remarks>
            <param name="Connector">The connector to release.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.ReleaseConnectorInternal(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector)">
            <summary>
            Release a pooled connector.  Handle shared/non-shared here.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.GetPooledConnector(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection)">
            <summary>
            Find an available pooled connector in the non-shared pool, or create
            a new one if none found.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.FixPoolCountBecauseOfConnectionDisposeFalse(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection)">
            <summary>
            This method is only called when NpgsqlConnection.Dispose(false) is called which means a
            finalization. This also means, an NpgsqlConnection was leak. We clear pool count so that
            client doesn't end running out of connections from pool. When the connection is finalized, its underlying
            socket is closed.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.UngetConnector(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnection,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnector)">
            <summary>
            Put a pooled connector into the pool queue.
            </summary>
            <param name="Connector">Connector to pool</param>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.ConnectorQueue">
            <summary>
            A queue with an extra Int32 for keeping track of busy connections.
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.ConnectorQueue.Available">
            <summary>
            Connections available to the end user
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlConnectorPool.ConnectorQueue.Busy">
            <summary>
            Connections currently in use
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlBufferedStream" -->
        <member name="F:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlBufferedStream.MaxShadowBufferSize">
            <summary><code>MaxShadowBufferSize</code> is chosed such that shadow buffers are not allocated on the Large Object Heap.
            Currently, an object is allocated on the LOH if it is larger than 85000 bytes. See LARGE_OBJECT_SIZE in ndp\clr\src\vm\gc.h
            We will go with exactly 80 KBytes, although this is somewhat arbitrary.</summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlSync">
             <summary>
             This class represents the Parse message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCancelRequest">
             <summary>
             This class represents the CancelRequest message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="F:Mono.Security.Cryptography.MD2Managed.PI_SUBST">
            <summary>
            Permutation of 0..255 constructed from the digits of pi. It gives a
            "random" nonlinear byte substitution operation.
            </summary>
        </member>
        <member name="M:Mono.Security.Cryptography.MD2Managed.MD2Transform(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            MD2 basic transformation. Transforms state and updates checksum
            based on block. 
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.IStartable">
            <summary>
            When implemented by a component, an instance of the component will be resolved
            and started as soon as the container is built. Autofac will not call the Start()
            method when subsequent instances are resolved. If this behaviour is required, use
            an <code>OnActivated()</code> event handler instead.
            </summary>
            <remarks>
            For equivalent "Stop" functionality, implement <see cref="T:System.IDisposable"/>. Autofac
            will always dispose a component before any of its dependencies (except in the presence
            of circular dependencies, in which case the components in the cycle are disposed in
            reverse-construction order.)
            </remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.IStartable.Start">
            <summary>
            Perform once-off startup processing.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.NamedPropertyParameter">
            <summary>
            A property identified by name. When applied to a reflection-based
            component, the name will be matched against property names.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.NamedPropertyParameter.#ctor(System.String,System.Object)">
            <summary>
            Create a <see cref="T:Revenj.Extensibility.Autofac.Core.NamedPropertyParameter"/> with the specified constant value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.NamedPropertyParameter.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Disposer">
            <summary>
            Maintains a set of objects to dispose, and disposes them in the reverse order
            from which they were added when the Disposer is itself disposed.
            </summary>
        </member>
        <member name="F:Revenj.Extensibility.Autofac.Core.Disposer._items">
            <summary>
            Contents all implement IDisposable.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Disposer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Disposer.AddInstanceForDisposal(System.IDisposable)">
            <summary>
            Adds an object to the disposer. When the disposer is
            disposed, so will the object be.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Activators.Reflection.ReflectionActivator">
            <summary>
            Uses reflection to activate instances of a type.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.ReflectionActivator.#ctor(System.Type,Revenj.Extensibility.Autofac.Core.Activators.Reflection.IConstructorFinder,Revenj.Extensibility.Autofac.Core.Activators.Reflection.IConstructorSelector,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter},System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Create an activator for the provided type.
            </summary>
            <param name="implementationType">Type to activate.</param>
            <param name="constructorFinder">Constructor finder.</param>
            <param name="constructorSelector">Constructor selector.</param>
            <param name="configuredParameters">Parameters configured explicitly for this instance.</param>
            <param name="configuredProperties">Properties configured explicitly for this instance.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.ReflectionActivator.GetFactory(Revenj.Extensibility.Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.Parameter})">
            <summary>
            Activate an instance in the provided context.
            </summary>
            <param name="context">Context in which to activate instances.</param>
            <param name="parameters">Parameters to the instance.</param>
            <returns>The activated instance.</returns>
            <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Activators.Reflection.ReflectionActivator.ConstructorSelector">
            <summary>
            The constructor selector.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector">
            <summary>
            Selects a constructor based on its signature.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector.#ctor(System.Type[])">
            <summary>
            Match constructors with the provided signature.
            </summary>
            <param name="signature">Signature to match.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector.SelectConstructorBinding(Revenj.Extensibility.Autofac.Core.Activators.Reflection.ConstructorParameterBinding[])">
            <summary>
            Selects the best constructor from the available constructors.
            </summary>
            <param name="constructorBindings">Available constructors.</param>
            <returns>The best constructor.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinder">
            <summary>
            Finds constructors based on their binding flags.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinder.#ctor(System.Reflection.BindingFlags)">
            <summary>
            Create an instance matching constructors with the supplied binding flags.
            </summary>
            <param name="bindingFlags">Binding flags to match.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinder.FindConstructors(System.Type)">
            <summary>
            Finds suitable constructors on the target type.
            </summary>
            <param name="targetType">Type to search for constructors.</param>
            <returns>Suitable constructors.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Remotion.Linq.QueryModel">
            <summary>
            Provides an abstraction of an expression tree created for a LINQ query. <see cref="T:Remotion.Linq.QueryModel"/> instances are passed to LINQ providers based
            on re-linq via <see cref="T:Remotion.Linq.IQueryExecutor"/>, but you can also use <see cref="T:Remotion.Linq.Parsing.Structure.QueryParser"/> to parse an expression tree by hand or construct
            a <see cref="T:Remotion.Linq.QueryModel"/> manually via its constructor.
            </summary>
            <remarks>
            The different parts of the query are mapped to clauses, see <see cref="P:Remotion.Linq.QueryModel.MainFromClause"/>, <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/>, and 
            <see cref="P:Remotion.Linq.QueryModel.SelectClause"/>. The simplest way to process all the clauses belonging to a <see cref="T:Remotion.Linq.QueryModel"/> is by implementing
            <see cref="T:Remotion.Linq.IQueryModelVisitor"/> (or deriving from <see cref="T:Remotion.Linq.QueryModelVisitorBase"/>) and calling <see cref="M:Remotion.Linq.QueryModel.Accept(Remotion.Linq.IQueryModelVisitor)"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Linq.QueryModel.#ctor(Remotion.Linq.Clauses.MainFromClause,Remotion.Linq.Clauses.SelectClause)">
            <summary>
            Initializes a new instance of <see cref="T:Remotion.Linq.QueryModel"/>
            </summary>
            <param name="mainFromClause">The <see cref="T:Remotion.Linq.Clauses.MainFromClause"/> of the query. This is the starting point of the query, generating items 
            that are filtered and projected by the query.</param>
            <param name="selectClause">The <see cref="P:Remotion.Linq.QueryModel.SelectClause"/> of the query. This is the end point of
            the query, it defines what is actually returned for each of the items coming from the <see cref="P:Remotion.Linq.QueryModel.MainFromClause"/> and passing the 
            <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/>. After it, only the <see cref="P:Remotion.Linq.QueryModel.ResultOperators"/> modify the result of the query.</param>
        </member>
        <member name="M:Remotion.Linq.QueryModel.GetOutputDataInfo">
            <summary>
            Gets an <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo"/> object describing the data streaming out of this <see cref="T:Remotion.Linq.QueryModel"/>. If a query ends with
            the <see cref="P:Remotion.Linq.QueryModel.SelectClause"/>, this corresponds to <see cref="M:Remotion.Linq.Clauses.SelectClause.GetOutputDataInfo"/>. If a query has 
            <see cref="P:Remotion.Linq.QueryModel.ResultOperators"/>, the data is further modified by those operators.
            </summary>
            <returns>Gets a <see cref="T:Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo"/> object describing the data streaming out of this <see cref="T:Remotion.Linq.QueryModel"/>.</returns>
            <remarks>
            The data streamed from a <see cref="T:Remotion.Linq.QueryModel"/> is often of type <see cref="T:System.Linq.IQueryable`1"/> instantiated
            with a specific item type, unless the
            query ends with a <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase"/>. For example, if the query ends with a <see cref="T:Remotion.Linq.Clauses.ResultOperators.CountResultOperator"/>, the
            result type will be <see cref="T:System.Int32"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Linq.QueryModel.GetUniqueIdentfierGenerator">
            <summary>
            Gets the <see cref="T:Remotion.Linq.UniqueIdentifierGenerator"/> which is used by the <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Remotion.Linq.QueryModel.Accept(Remotion.Linq.IQueryModelVisitor)">
            <summary>
            Accepts an implementation of <see cref="T:Remotion.Linq.IQueryModelVisitor"/> or <see cref="T:Remotion.Linq.QueryModelVisitorBase"/>, as defined by the Visitor pattern.
            </summary>
        </member>
        <member name="M:Remotion.Linq.QueryModel.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.QueryModel.Clone">
            <summary>
            Clones this <see cref="T:Remotion.Linq.QueryModel"/>, returning a new <see cref="T:Remotion.Linq.QueryModel"/> equivalent to this instance, but with its clauses being
            clones of this instance's clauses. Any <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> in the cloned clauses that points back to another clause 
            in this <see cref="T:Remotion.Linq.QueryModel"/> (including its subqueries) is adjusted to point to the respective clones in the cloned 
            <see cref="T:Remotion.Linq.QueryModel"/>. Any subquery nested in the <see cref="T:Remotion.Linq.QueryModel"/> is also cloned.
            </summary>
        </member>
        <member name="M:Remotion.Linq.QueryModel.Clone(Remotion.Linq.Clauses.QuerySourceMapping)">
            <summary>
            Clones this <see cref="T:Remotion.Linq.QueryModel"/>, returning a new <see cref="T:Remotion.Linq.QueryModel"/> equivalent to this instance, but with its clauses being
            clones of this instance's clauses. Any <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> in the cloned clauses that points back to another clause 
            in  this <see cref="T:Remotion.Linq.QueryModel"/> (including its subqueries) is adjusted to point to the respective clones in the cloned 
            <see cref="T:Remotion.Linq.QueryModel"/>. Any subquery nested in the <see cref="T:Remotion.Linq.QueryModel"/> is also cloned.
            </summary>
            <param name="querySourceMapping">The <see cref="T:Remotion.Linq.Clauses.QuerySourceMapping"/> defining how to adjust instances of 
            <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> in the cloned <see cref="T:Remotion.Linq.QueryModel"/>. If there is a <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/>
            that points out of the <see cref="T:Remotion.Linq.QueryModel"/> being cloned, specify its replacement via this parameter. At the end of the cloning process,
            this object maps all the clauses in this original <see cref="T:Remotion.Linq.QueryModel"/> to the clones created in the process.
            </param>
        </member>
        <member name="M:Remotion.Linq.QueryModel.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Transforms all the expressions in this <see cref="T:Remotion.Linq.QueryModel"/>'s clauses via the given <paramref name="transformation"/> delegate.
            </summary>
            <param name="transformation">The transformation object. This delegate is called for each <see cref="T:System.Linq.Expressions.Expression"/> within this 
            <see cref="T:Remotion.Linq.QueryModel"/>, and those expressions will be replaced with what the delegate returns.</param>
        </member>
        <member name="M:Remotion.Linq.QueryModel.GetNewName(System.String)">
            <summary>
            Returns a new name with the given prefix. The name is different from that of any <see cref="T:Remotion.Linq.Clauses.FromClauseBase"/> added
            in the <see cref="T:Remotion.Linq.QueryModel"/>. Note that clause names that are changed after the clause is added as well as names of other clauses
            than from clauses are not considered when determining "unique" names. Use names only for readability and debugging, not
            for uniquely identifying clauses.
            </summary>
        </member>
        <member name="M:Remotion.Linq.QueryModel.Execute(Remotion.Linq.IQueryExecutor)">
            <summary>
            Executes this <see cref="T:Remotion.Linq.QueryModel"/> via the given <see cref="T:Remotion.Linq.IQueryExecutor"/>. By default, this indirectly calls 
            <see cref="M:Remotion.Linq.IQueryExecutor.ExecuteCollection``1(Remotion.Linq.QueryModel)"/>, but this can be modified by the <see cref="P:Remotion.Linq.QueryModel.ResultOperators"/>.
            </summary>
            <param name="executor">The <see cref="T:Remotion.Linq.IQueryExecutor"/> to use for executing this query.</param>
        </member>
        <member name="M:Remotion.Linq.QueryModel.IsIdentityQuery">
            <summary>
            Determines whether this <see cref="T:Remotion.Linq.QueryModel"/> represents an identity query. An identity query is a query without any body clauses
            whose <see cref="P:Remotion.Linq.QueryModel.SelectClause"/> selects exactly the items produced by its <see cref="P:Remotion.Linq.QueryModel.MainFromClause"/>. An identity query can have
            <see cref="P:Remotion.Linq.QueryModel.ResultOperators"/>.
            </summary>
            <returns>
            	<see langword="true"/> if this <see cref="T:Remotion.Linq.QueryModel"/> represents an identity query; otherwise, <see langword="false"/>.
            </returns>
            <example>
            An example for an identity query is the subquery in that is produced for the <see cref="P:Remotion.Linq.Clauses.SelectClause.Selector"/> in the following 
            query:
            <code>
            from order in ...
            select order.OrderItems.Count()
            </code>
            In this query, the <see cref="P:Remotion.Linq.Clauses.SelectClause.Selector"/> will become a <see cref="T:Remotion.Linq.Clauses.Expressions.SubQueryExpression"/> because 
            <see cref="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})"/> is treated as a query operator. The 
            <see cref="T:Remotion.Linq.QueryModel"/> in that <see cref="T:Remotion.Linq.Clauses.Expressions.SubQueryExpression"/> has no <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/> and a trivial <see cref="P:Remotion.Linq.QueryModel.SelectClause"/>,
            so its <see cref="M:Remotion.Linq.QueryModel.IsIdentityQuery"/> method returns <see langword="true"/>. The outer <see cref="T:Remotion.Linq.QueryModel"/>, on the other hand, does not
            have a trivial <see cref="P:Remotion.Linq.QueryModel.SelectClause"/>, so its <see cref="M:Remotion.Linq.QueryModel.IsIdentityQuery"/> method returns <see langword="false"/>.
            </example>
        </member>
        <member name="M:Remotion.Linq.QueryModel.ConvertToSubQuery(System.String)">
            <summary>
            Creates a new <see cref="T:Remotion.Linq.QueryModel"/> that has this <see cref="T:Remotion.Linq.QueryModel"/> as a sub-query in its <see cref="P:Remotion.Linq.QueryModel.MainFromClause"/>.
            </summary>
            <param name="itemName">The name of the new <see cref="T:Remotion.Linq.QueryModel"/>'s <see cref="P:Remotion.Linq.Clauses.FromClauseBase.ItemName"/>.</param>
            <returns>A new <see cref="T:Remotion.Linq.QueryModel"/> whose <see cref="P:Remotion.Linq.QueryModel.MainFromClause"/>'s <see cref="P:Remotion.Linq.Clauses.FromClauseBase.FromExpression"/> is a 
            <see cref="T:Remotion.Linq.Clauses.Expressions.SubQueryExpression"/> that holds this <see cref="T:Remotion.Linq.QueryModel"/> instance.</returns>
        </member>
        <member name="P:Remotion.Linq.QueryModel.MainFromClause">
            <summary>
            Gets or sets the query's <see cref="T:Remotion.Linq.Clauses.MainFromClause"/>. This is the starting point of the query, generating items that are processed by 
            the <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/> and projected or grouped by the <see cref="P:Remotion.Linq.QueryModel.SelectClause"/>.
            </summary>
        </member>
        <member name="P:Remotion.Linq.QueryModel.SelectClause">
            <summary>
            Gets or sets the query's select clause. This is the end point of the query, it defines what is actually returned for each of the 
            items coming from the <see cref="P:Remotion.Linq.QueryModel.MainFromClause"/> and passing the <see cref="P:Remotion.Linq.QueryModel.BodyClauses"/>. After it, only the <see cref="P:Remotion.Linq.QueryModel.ResultOperators"/>
            modify the result of the query.
            </summary>
        </member>
        <member name="P:Remotion.Linq.QueryModel.BodyClauses">
            <summary>
            Gets a collection representing the query's body clauses. Body clauses take the items generated by the <see cref="P:Remotion.Linq.QueryModel.MainFromClause"/>,
            filtering (<see cref="T:Remotion.Linq.Clauses.WhereClause"/>), ordering (<see cref="T:Remotion.Linq.Clauses.OrderByClause"/>), augmenting (<see cref="T:Remotion.Linq.Clauses.AdditionalFromClause"/>), or otherwise
            processing them before they are passed to the <see cref="P:Remotion.Linq.QueryModel.SelectClause"/>.
            </summary>
        </member>
        <member name="P:Remotion.Linq.QueryModel.ResultOperators">
            <summary>
            Gets the result operators attached to this <see cref="P:Remotion.Linq.QueryModel.SelectClause"/>. Result operators modify the query's result set, aggregating,
            filtering, or otherwise processing the result before it is returned.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.MinExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})"/> or <see cref="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.PartialEvaluatingExpressionTreeVisitor">
            <summary>
            Takes an expression tree and first analyzes it for evaluatable subtrees (using <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.TreeEvaluation.EvaluatableTreeFindingExpressionTreeVisitor"/>), i.e.
            subtrees that can be pre-evaluated before actually generating the query. Examples for evaluatable subtrees are operations on constant
            values (constant folding), access to closure variables (variables used by the LINQ query that are defined in an outer scope), or method
            calls on known objects or their members. In a second step, it replaces all of the evaluatable subtrees (top-down and non-recursive) by 
            their evaluated counterparts.
            </summary>
            <remarks>
            This visitor visits each tree node at most twice: once via the <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.TreeEvaluation.EvaluatableTreeFindingExpressionTreeVisitor"/> for analysis and once
            again to replace nodes if possible (unless the parent node has already been replaced).
            </remarks>
        </member>
        <member name="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.PartialEvaluatingExpressionTreeVisitor.EvaluateIndependentSubtrees(System.Linq.Expressions.Expression)">
            <summary>
            Takes an expression tree and finds and evaluates all its evaluatable subtrees.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.ExpressionTreeVisitors.PartialEvaluatingExpressionTreeVisitor.EvaluateSubtree(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates an evaluatable <see cref="T:System.Linq.Expressions.Expression"/> subtree, i.e. an independent expression tree that is compilable and executable
            without any data being passed in. The result of the evaluation is returned as a <see cref="T:System.Linq.Expressions.ConstantExpression"/>; if the subtree
            is already a <see cref="T:System.Linq.Expressions.ConstantExpression"/>, no evaluation is performed.
            </summary>
            <param name="subtree">The subtree to be evaluated.</param>
            <returns>A <see cref="T:System.Linq.Expressions.ConstantExpression"/> holding the result of the evaluation.</returns>
        </member>
        <member name="T:Remotion.Linq.Collections.MultiDictionaryExtensions">
            <summary>
            Defines extension methods that simplify working with a dictionary that has a collection-values item-type.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.MaxResultOperator">
            <summary>
            Represents taking only the greatest one of the items returned by a query.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
            The semantics of "greatest" are defined by the query provider. "Max" query methods taking a selector are represented as a combination
            of a <see cref="T:Remotion.Linq.Clauses.SelectClause"/> and a <see cref="T:Remotion.Linq.Clauses.ResultOperators.MaxResultOperator"/>.
            </remarks>
            <example>
            In C#, the "Max" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.MaxResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s.ID).Max();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.MaxResultOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.ResultOperators.MaxResultOperator"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.MaxResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.IntersectResultOperator">
            <summary>
            Represents taking the mathematical intersection of a given set of items and the items returned by a query. 
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Intersect" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.IntersectResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).Intersect(students2);
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.IntersectResultOperator.GetConstantSource2``1">
            <summary>
            Gets the value of <see cref="P:Remotion.Linq.Clauses.ResultOperators.IntersectResultOperator.Source2"/>, assuming <see cref="P:Remotion.Linq.Clauses.ResultOperators.IntersectResultOperator.Source2"/> holds a <see cref="T:System.Linq.Expressions.ConstantExpression"/>. If it doesn't,
            an Intersection is thrown.
            </summary>
            <returns>The constant value of <see cref="P:Remotion.Linq.Clauses.ResultOperators.IntersectResultOperator.Source2"/>.</returns>
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.IntersectResultOperator.Source2">
            <summary>
            Gets or sets the second source of this result operator, that is, an enumerable containing the items intersected with the input sequence.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ExpressionTreeVisitors.FormattingExpressionTreeVisitor">
            <summary>
            Transforms an expression tree into a human-readable string, taking all the custom expression nodes into account.
            It does so by replacing all instances of custom expression nodes by parameters that have the desired string as their names. This is done
            to circumvent a limitation in the <see cref="T:System.Linq.Expressions.Expression"/> class, where overriding <see cref="M:System.Linq.Expressions.Expression.ToString"/> in custom expressions
            will not work.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlFactory">
            <summary>
            A factory to create instances of various Npgsql objects.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlFactory.CreateCommand">
            <summary>
            Creates an NpgsqlCommand object.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.Cache`1.CacheSize">
            <summary>
            Set Cache Size. The default value is 20.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.Cache`1.Item(System.String)">
            <summary>
            Lookup cached entity. null will returned if not match.
            For both get{} and set{} apply LRU rule.
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ArrayNativeToBackendTypeConverter">
            <summary>
            Handles serialisation of .NET array or IEnumeration to pg format.
            Arrays of arrays, enumerations of enumerations, arrays of enumerations etc.
            are treated as multi-dimensional arrays (in much the same manner as an array of arrays
            is used to emulate multi-dimensional arrays in languages that lack native support for them).
            If such an enumeration of enumerations is "jagged" (as opposed to rectangular, cuboid,
            hypercuboid, hyperhypercuboid, etc) then this class will "correctly" serialise it, but pg
            will raise an error as it doesn't allow jagged arrays.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ArrayNativeToBackendTypeConverter.#ctor(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo)">
            <summary>
            Create an ArrayNativeToBackendTypeConverter with the element converter passed
            </summary>
            <param name="elementConverter">The <see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo"/> that would be used to serialise the element type.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ArrayNativeToBackendTypeConverter.FromArray(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean)">
            <summary>
            Serialise the enumeration or array.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ArrayBackendToNativeTypeConverter">
            <summary>
            Handles parsing of pg arrays into .NET arrays.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ArrayBackendToNativeTypeConverter.TokenEnumeration(System.String)">
            <summary>
            Takes a string representation of a pg 1-dimensional array
            (or a 1-dimensional row within an n-dimensional array)
            and allows enumeration of the string represenations of each items.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ArrayBackendToNativeTypeConverter.ArrayChunkEnumeration(System.String)">
            <summary>
            Takes a string representation of a pg n-dimensional array
            and allows enumeration of the string represenations of the next
            lower level of rows (which in turn can be taken as (n-1)-dimensional arrays.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ArrayBackendToNativeTypeConverter.RecursiveArrayListEnumeration(System.Collections.ArrayList)">
            <summary>
            Takes an ArrayList which may be an ArrayList of ArrayLists, an ArrayList of ArrayLists of ArrayLists
            and so on and enumerates the items that aren't ArrayLists (the leaf nodes if we think of the ArrayList
            passed as a tree). Simply uses the ArrayLists' own IEnumerators to get that of the next,
            pushing them onto a stack until we hit something that isn't an ArrayList.
            <param name="list"><see cref="T:System.Collections.ArrayList">ArrayList</see> to enumerate</param>
            <returns><see cref="T:System.Collections.IEnumerable">IEnumerable</see></returns>
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ArrayBackendToNativeTypeConverter.#ctor(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo)">
            <summary>
            Create a new ArrayBackendToNativeTypeConverter
            </summary>
            <param name="elementConverter"><see cref="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo"/> for the element type.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ArrayBackendToNativeTypeConverter.ToArray(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Creates an array from pg representation.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ArrayBackendToNativeTypeConverter.ToArrayList(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Creates an array list from pg represenation of an array.
            Multidimensional arrays are treated as ArrayLists of ArrayLists
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ArrayBackendToNativeTypeConverter.ToArray(System.Collections.ArrayList,System.Type)">
            <summary>
            Creates an n-dimensional array from an ArrayList of ArrayLists or
            a 1-dimensional array from something else. 
            </summary>
            <param name="list"><see cref="T:System.Collections.ArrayList"/> to convert</param>
            <returns><see cref="T:System.Array"/> produced.</returns>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.ArrayBackendToNativeTypeConverter.IntSetIterator">
            <summary>
            Takes an array of ints and treats them like the limits of a set of counters.
            Retains a matching set of ints that is set to all zeros on the first ++
            On a ++ it increments the "right-most" int. If that int reaches it's 
            limit it is set to zero and the one before it is incremented, and so on.
            
            Making this a more general purpose class is pretty straight-forward, but we'll just put what we need here.
            </summary>
        </member>
        <member name="T:Revenj.Utility.BufferedTextReader">
            <summary>
            Performant text reader.
            Should be reused whenever possible.
            </summary>
        </member>
        <member name="F:Revenj.Utility.BufferedTextReader.SmallBuffer">
            <summary>
            Temporary small char buffer for reuse
            </summary>
        </member>
        <member name="F:Revenj.Utility.BufferedTextReader.CharBuffer">
            <summary>
            Temporary char buffer for reuse
            </summary>
        </member>
        <member name="F:Revenj.Utility.BufferedTextReader.ByteBuffer">
            <summary>
            Temporary byte buffer for reuse (1024 bytes total)
            </summary>
        </member>
        <member name="F:Revenj.Utility.BufferedTextReader.LargeTempBuffer">
            <summary>
            Temporary large temp buffer for reuse (32768 chars total)
            </summary>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.#ctor(System.IO.TextReader,System.Char[],System.Char[])">
            <summary>
            Allocate reader by reusing part of the buffers and providing original reader object.
            </summary>
            <param name="reader"></param>
            <param name="smallBuffer"></param>
            <param name="tempBuffer"></param>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.#ctor(System.String,System.Char[],System.Char[])">
            <summary>
            Allocate reader by reusing part of the buffers and providing original string object
            </summary>
            <param name="value"></param>
            <param name="smallBuffer"></param>
            <param name="tempBuffer"></param>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.Reuse(System.IO.TextReader)">
            <summary>
            Reuse existing instance with a new reader
            </summary>
            <param name="reader">new reader to process</param>
            <returns>itself</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.Reuse(System.String)">
            <summary>
            Reuse existing instance with a new string
            </summary>
            <param name="value">new string to process</param>
            <returns>itself</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.Peek">
            <summary>
            Read next char without changing position.
            Will return -1 on end of input
            </summary>
            <returns>next char</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.Read">
            <summary>
            Read next char and move a single position
            Will return -1 on end of input
            </summary>
            <returns>next char</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.Read(System.Int32)">
            <summary>
            Skip several chars and read only the last one.
            Don't use return value if total == 0
            Moves position by specified argument
            </summary>
            <param name="total">total chars to read</param>
            <returns>last char read</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.InitBuffer">
            <summary>
            Reset buffer to starting position. 
            Buffer should be used to fill in small values which will be reconstructed after
            </summary>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.InitBuffer(System.Char)">
            <summary>
            Reset buffer to starting position and specify initial value.
            Buffer should be used to fill in small values which will be reconstructed after
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.FillUntil(System.Char)">
            <summary>
            Fill buffer until specified char is found.
            If end of input is detected, but char is not found, SerializationException will be thrown.
            </summary>
            <param name="match">char to found</param>
            <returns>how many chars were processed</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.FillUntil(System.Char,System.Char)">
            <summary>
            Fill buffer until any of the specified chars is found.
            If end of input is detected, but chars are not found, SerializationException will be thrown.
            </summary>
            <param name="match1">char to found</param>
            <param name="match2">char to found</param>
            <returns>how many chars were processed</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.FillUntil(System.IO.TextWriter,System.Char,System.Char)">
            <summary>
            Fill provided writer until any of the specified chars is found.
            If end of input is detected, but chars are not found, SerializationException will be thrown.
            </summary>
            <param name="writer">text writer to populate</param>
            <param name="match1">char to found</param>
            <param name="match2">char to found</param>
            <returns>how many chars were processed</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.AddToBuffer(System.Char)">
            <summary>
            Append char to internal buffer.
            </summary>
            <param name="ch">char to add</param>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.BufferMatches(System.String)">
            <summary>
            Check if buffer matches provided string.
            Used as string comparison without new string allocation.
            </summary>
            <param name="reference">compare to</param>
            <returns>buffer matches string</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.BufferHash">
            <summary>
            Current buffer hash.
            Used as string hashcode without allocating new string.
            Doesn't match string hashcode algorithm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.BufferToString">
            <summary>
            Convert buffer to new string
            </summary>
            <returns>new string from populated buffer</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.BufferToValue``1(System.Func{System.Char[],System.Int32,``0})">
            <summary>
            Convert buffer to an instance
            </summary>
            <param name="factory">converter</param>
            <returns>instance</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.BufferToValue``1(System.Func{System.Char[],System.Int32,Revenj.Utility.BufferedTextReader,``0})">
            <summary>
            Convert buffer to an instance
            </summary>
            <param name="factory">converter</param>
            <returns>instance</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.ReadUntil(System.Char[],System.Int32,System.Char)">
            <summary>
            Fill target char[] until specified char is found.
            If end of input is detected, but char is not found, SerializationException will be thrown.
            </summary>
            <param name="target">target array to fill</param>
            <param name="from">fill target array starting from specified position</param>
            <param name="match">char to found</param>
            <returns>how many chars were processed</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.ReadUntil(System.Char[],System.Int32,System.Char,System.Char)">
            <summary>
            Fill target char[] until any of the specified chars is found.
            If end of input is detected, but chars are not found, SerializationException will be thrown.
            </summary>
            <param name="target">target array to fill</param>
            <param name="from">fill target array starting from specified position</param>
            <param name="match1">char to found</param>
            <param name="match2">char to found</param>
            <returns>how many chars were processed</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.ReadNumber(System.Char[],System.Int32)">
            <summary>
            Fill target char[] while number chars are found.
            If end of input is detected, but chars are not found, SerializationException will be thrown.
            </summary>
            <param name="target">target array to fill</param>
            <param name="from">fill target array starting from specified position</param>
            <returns>how many chars were processed</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Fill target char[] starting at specified index and up to specified count.
            Returns how many chars were copied or -1 on end of input.
            Method is allowed to stop early if current buffer end is encountered.
            </summary>
            <param name="buffer">target array to fill</param>
            <param name="index">fill target array starting from specified position</param>
            <param name="count">maximum number</param>
            <returns>how many chars were copied or -1 for immediate end of input</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            Fill target char[] starting at specified index and up to specified count.
            Returns how many chars were copied or -1 on end of input.
            Method is not allowed to stop early if current buffer end is encountered.
            Must read all available chars up to specified count
            </summary>
            <param name="buffer">target array to fill</param>
            <param name="index">fill target array starting from specified position</param>
            <param name="count">maximum number</param>
            <returns>how many chars were copied or -1 for immediate end of input</returns>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.ReadLine">
            <summary>
            Read a single line from input.
            </summary>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.ReadToEnd">
            <summary>
            Read input to end and convert to string
            </summary>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.Close">
            <summary>
            Close provided reader
            </summary>
        </member>
        <member name="M:Revenj.Utility.BufferedTextReader.Dispose(System.Boolean)">
            <summary>
            Dispose provided reader
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Revenj.Utility.BufferedTextReader.Position">
            <summary>
            Current position.
            Sum of total processed buffers and position in the current buffer.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.Indexed.KeyedServiceIndex`2.#ctor(Revenj.Extensibility.Autofac.IComponentContext)">
            <summary></summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.Indexed.KeyedServiceIndex`2.TryGetValue(`0,`1@)">
            <summary></summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.Indexed.KeyedServiceIndex`2.Item(`0)">
            <summary></summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.ListElementCollection">
            <summary>
            Holds a list of values for those properties/parameters that are enumerable
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.ListElementCollection.ListElementTypeConverter">
            <summary>
            Helps convert the configuration element into an actuall generic list
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.ComponentElement">
            <summary>
            Element describing a component registration.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ComponentElement.Type">
            <summary>
            Gets the type of the component.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ComponentElement.Service">
            <summary>
            Gets the service exposed by the component. For multiple-service components,
            use the services element instead.
            </summary>
            <value>The service.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ComponentElement.MemberOf">
            <summary>
            Allows the component to be added to another composite component.
            </summary>
            <value>The name of the composite component.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ComponentElement.Name">
            <summary>
            Allows the component to be added to another composite component.
            </summary>
            <value>The name of the composite component.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ComponentElement.InstanceScope">
            <summary>
            Sets the scope of the component instances.
            </summary>
            <value>singleton (default,) factory or container.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ComponentElement.Ownership">
            <summary>
            Sets the ownership over the component instances.
            </summary>
            <value>container (default) or external.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ComponentElement.InjectProperties">
            <summary>
            Sets up property injection for the component instances. This uses the
            OnActivated event so that circular dependencies can be handled.
            </summary>
            <value>never (default,) all, unset.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ComponentElement.Services">
            <summary>
            Gets the services exposed by the component.
            </summary>
            <value>The services.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ComponentElement.Parameters">
            <summary>
            Gets the parameters used to construct the component.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ComponentElement.Properties">
            <summary>
            Gets the properties to be explicitly set on the component.
            </summary>
            <value>The explicit properties.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.ComponentElement.Metadata">
            <summary>
            Gets the extended properties associated with the registration.
            </summary>
            <value>The extended properties.</value>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.RegistrationExtensions">
            <summary>
            Adds registration syntax for less commonly-used features.
            </summary>
            <remarks>
            These features are in this namespace because they will remain accessible to
            applications originally written against Autofac 1.4. In Autofac 2, this functionality
            is implicitly provided and thus making explicit registrations is rarely necessary.
            </remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory(Revenj.Extensibility.Autofac.ContainerBuilder,System.Type)">
            <summary>
            Registers a factory delegate.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="delegateType">Factory type to generate.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>Factory delegates are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory(Revenj.Extensibility.Autofac.ContainerBuilder,System.Type,Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Registers a factory delegate.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="delegateType">Factory type to generate.</param>
            <param name="service">The service that the delegate will return instances of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>Factory delegates are provided automatically in Autofac 2, and
            this method is generally not required.</remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory``1(Revenj.Extensibility.Autofac.ContainerBuilder,Revenj.Extensibility.Autofac.Core.Service)">
            <summary>
            Registers a factory delegate.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="service">The service that the delegate will return instances of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>Factory delegates are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory``1(Revenj.Extensibility.Autofac.ContainerBuilder)">
            <summary>
            Registers a factory delegate.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="builder">Container builder.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>Factory delegates are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationExtensions.NamedParameterMapping``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by name.
            </summary>
            <typeparam name="TDelegate">Factory delegate type</typeparam>
            <typeparam name="TGeneratedFactoryActivatorData">Activator data type</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
            <param name="registration">Registration to change parameter mapping mode of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationExtensions.PositionalParameterMapping``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by position.
            </summary>
            <typeparam name="TDelegate">Factory delegate type</typeparam>
            <typeparam name="TGeneratedFactoryActivatorData">Activator data type</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
            <param name="registration">Registration to change parameter mapping mode of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationExtensions.TypedParameterMapping``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by type.
            </summary>
            <typeparam name="TDelegate">Factory delegate type</typeparam>
            <typeparam name="TGeneratedFactoryActivatorData">Activator data type</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
            <param name="registration">Registration to change parameter mapping mode of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationExtensions.RegisterCollection(Revenj.Extensibility.Autofac.ContainerBuilder,System.String,System.Type)">
            <summary>
            Registers the type as a collection. If no services or names are specified, the
            default services will be IList&lt;T&gt;, ICollection&lt;T&gt;, and IEnumerable&lt;T&gt;        
            </summary>
            <param name="elementType">The type of the collection elements.</param>
            <param name="builder">Container builder.</param>
            <param name="collectionName">A unique name for the collection that can be passed to MemberOf().</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>Collections are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationExtensions.RegisterCollection``1(Revenj.Extensibility.Autofac.ContainerBuilder,System.String)">
            <summary>
            Registers the type as a collection. If no services or names are specified, the
            default services will be IList&lt;T&gt;, ICollection&lt;T&gt;, and IEnumerable&lt;T&gt;        
            </summary>
            <typeparam name="T">The type of the collection elements.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="collectionName">A unique name for the collection that can be passed to MemberOf().</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>Collections are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.RegistrationExtensions.MemberOf``3(Revenj.Extensibility.Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String)">
            <summary>
            Include the element explicitly in a collection configured using RegisterCollection.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to export.</param>
            <param name="collectionName">The collection name, as passed to RegisterCollection.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Builder.ConcreteReflectionActivatorData">
            <summary>
            Reflection activator data for concrete types.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Builder.ConcreteReflectionActivatorData.#ctor(System.Type)">
            <summary>
            Specify a reflection activator for the given type.
            </summary>
            <param name="implementor">Type that will be activated.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Builder.ConcreteReflectionActivatorData.Activator">
            <summary>
            The instance activator based on the provided data.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry">
            <summary>
            Maps the <see cref="T:System.Reflection.MethodInfo"/> objects used in <see cref="T:System.Linq.Expressions.MethodCallExpression"/> objects to the respective <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/>
            types. This is used by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> is encountered to instantiate the
            right <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> for the given method.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.CreateFromTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry"/> and automatically registers all types implementing <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> 
            from a given type sequence that offer a public static <c>SupportedMethods</c> field.
            </summary>
            <returns>A <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry"/> with all <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> types with a <c>SupportedMethods</c>
            field registered.</returns>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.GetRegisterableMethodDefinition(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Gets the registerable method definition from a given <see cref="T:System.Reflection.MethodInfo"/>. A registerable method is a <see cref="T:System.Reflection.MethodInfo"/> object
            that can be registered via a call to <see cref="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.Register(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type)"/>. When the given <paramref name="method"/> is passed to 
            <see cref="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.GetNodeType(System.Reflection.MethodInfo)"/> and its corresponding registerable method was registered, the correct node type is returned.
            </summary>
            <param name="method">The method for which the registerable method should be retrieved. Must not be <see langword="null"/>.</param>
            <param name="throwOnAmbiguousMatch">
              <see langword="true"/> to throw a <see cref="T:System.NotSupportedException"/> if the method cannot be matched to a distinct generic method definition, 
              <see langword="false"/> to return <see langword="null"/> if an unambiguous match is not possible.
            </param>
            <returns>
            <para>
              <paramref name="method"/> itself, unless it is a closed generic method or declared in a closed generic type. In the latter cases,
              the corresponding generic method definition respectively the method declared in a generic type definition is returned.
            </para><para>
              If no generic method definition could be matched and <paramref name="throwOnAmbiguousMatch"/> was set to <see langword="false"/>, 
              <see langword="null"/> is returned.
            </para>
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown if <paramref name="throwOnAmbiguousMatch"/> is set to <see langword="true"/> and no distinct generic method definition could be resolved.
            </exception>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.Register(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type)">
            <summary>
            Registers the specific <paramref name="methods"/> with the given <paramref name="nodeType"/>. The given methods must either be non-generic
            or open generic method definitions. If a method has already been registered before, the later registration overwrites the earlier one.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.IsRegistered(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method was registered with this <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.GetNodeType(System.Reflection.MethodInfo)">
            <summary>
            Gets the type of <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> registered with this <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry"/> instance that
            matches the given <paramref name="method"/>, returning <see langword="null"/> if none can be found.
            </summary>
        </member>
        <member name="P:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry.RegisteredMethodInfoCount">
            <summary>
            Returns the count of the registered <see cref="T:System.Reflection.MethodInfo"/>s.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.TransparentIdentifierRemovingExpressionTreeVisitor">
            <summary>
            Replaces expression patterns of the form <c>new T { x = 1, y = 2 }.x</c> (<see cref="T:System.Linq.Expressions.MemberInitExpression"/>) or 
            <c>new T ( x = 1, y = 2 ).x</c> (<see cref="T:System.Linq.Expressions.NewExpression"/>) to <c>1</c> (or <c>2</c> if <c>y</c> is accessed instead of <c>x</c>).
            Expressions are also replaced within subqueries; the <see cref="T:Remotion.Linq.QueryModel"/> is changed by the replacement operations, it is not copied. 
            </summary>
        </member>
        <member name="T:Remotion.Linq.Collections.ChangeResistantObservableCollectionEnumerator`1">
            <summary>
            Provides a way to enumerate an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> while items are inserted, removed, or cleared in a consistent fashion.
            </summary>
            <typeparam name="T">The element type of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</typeparam>
            <remarks>
            This class subscribes to the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event exposed by <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> 
            and reacts on changes to the collection. If an item is inserted or removed before the current element, the enumerator will continue after 
            the current element without regarding the new or removed item. If the current item is removed, the enumerator will continue with the item that 
            previously followed the current item. If an item is inserted or removed after the current element, the enumerator will simply continue, 
            including the newly inserted item and not including the removed item. If an item is moved or replaced, the enumeration will also continue 
            with the item located at the next position in the sequence.
            </remarks>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.AggregateResultOperator">
            <summary>
            Represents aggregating the items returned by a query into a single value. The first item is used as the seeding value for the aggregating 
            function.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Aggregate" call in the following example corresponds to an <see cref="T:Remotion.Linq.Clauses.ResultOperators.AggregateResultOperator"/>.
            <code>
            var result = (from s in Students
                         select s.Name).Aggregate((allNames, name) =&gt; allNames + " " + name);
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AggregateResultOperator.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.ResultOperators.AggregateResultOperator"/> class.
            </summary>
            <param name="func">The aggregating function. This is a <see cref="T:System.Linq.Expressions.LambdaExpression"/> taking a parameter that represents the value accumulated so 
            far and returns a new accumulated value. This is a resolved expression, i.e. items streaming in from prior clauses and result operators
            are represented as expressions containing <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> nodes.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AggregateResultOperator.ExecuteInMemory``1(Remotion.Linq.Clauses.StreamedData.StreamedSequence)">
            <inheritdoc cref="M:Remotion.Linq.Clauses.ResultOperatorBase.ExecuteInMemory(Remotion.Linq.Clauses.StreamedData.IStreamedData)"/>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AggregateResultOperator.Clone(Remotion.Linq.Clauses.CloneContext)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AggregateResultOperator.GetOutputDataInfo(Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.AggregateResultOperator.ToString">
            <inheritdoc />
        </member>
        <member name="P:Remotion.Linq.Clauses.ResultOperators.AggregateResultOperator.Func">
            <summary>
            Gets or sets the aggregating function. This is a <see cref="T:System.Linq.Expressions.LambdaExpression"/> taking a parameter that represents the value accumulated so 
            far and returns a new accumulated value. This is a resolved expression, i.e. items streaming in from prior clauses and result operators
            are represented as expressions containing <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> nodes.
            </summary>
            <value>The aggregating function.</value>
        </member>
        <member name="T:Remotion.Linq.Clauses.ExpressionTreeVisitors.CloningExpressionTreeVisitor">
            <summary>
            Visits an <see cref="T:System.Linq.Expressions.Expression"/> tree, replacing all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> instances with references to cloned clauses,
            as defined by a <see cref="T:Remotion.Linq.Clauses.QuerySourceMapping"/>. In addition, all <see cref="T:Remotion.Linq.QueryModel"/> instances in 
            <see cref="T:Remotion.Linq.Clauses.Expressions.SubQueryExpression">SubQueryExpressions</see> are cloned, and their references also replaces. All referenced clauses must be mapped
            to cloned clauses in the given <see cref="T:Remotion.Linq.Clauses.QuerySourceMapping"/>, otherwise an expression is thrown. This is used by <see cref="M:Remotion.Linq.QueryModel.Clone"/>
            to adjust references to the old <see cref="T:Remotion.Linq.QueryModel"/> with references to the new <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
        </member>
        <member name="M:Remotion.Linq.Clauses.ExpressionTreeVisitors.CloningExpressionTreeVisitor.AdjustExpressionAfterCloning(System.Linq.Expressions.Expression,Remotion.Linq.Clauses.QuerySourceMapping)">
            <summary>
            Adjusts the given expression for cloning, that is replaces <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> and <see cref="T:Remotion.Linq.Clauses.Expressions.SubQueryExpression"/> 
            instances. All referenced clauses must be mapped to clones in the given <paramref name="querySourceMapping"/>, otherwise an exception is thrown.
            </summary>
            <param name="expression">The expression to be adjusted.</param>
            <param name="querySourceMapping">The clause mapping to be used for replacing <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> instances.</param>
            <returns>An expression with all <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/> and <see cref="T:Remotion.Linq.Clauses.Expressions.SubQueryExpression"/> instances replaced
            as required by a <see cref="M:Remotion.Linq.QueryModel.Clone"/> operation.</returns>
        </member>
        <member name="T:Remotion.Linq.Clauses.Expressions.VBStringComparisonExpression">
            <summary>
            Represents a VB-specific comparison expression.
            </summary>
            <remarks>
            <para>
            To explicitly support this expression type, implement <see cref="T:Remotion.Linq.Clauses.Expressions.IVBSpecificExpressionVisitor"/>.
            To treat this expression as if it were an ordinary <see cref="T:System.Linq.Expressions.BinaryExpression"/>, call its <see cref="M:Remotion.Linq.Clauses.Expressions.VBStringComparisonExpression.Reduce"/> method and visit the result.
            </para>
            <para>
            Subclasses of <see cref="T:Remotion.Linq.Parsing.ThrowingExpressionTreeVisitor"/> that do not implement <see cref="T:Remotion.Linq.Clauses.Expressions.IVBSpecificExpressionVisitor"/> will, by default, 
            automatically reduce this expression type to <see cref="T:System.Linq.Expressions.BinaryExpression"/> in the 
            <see cref="M:Remotion.Linq.Parsing.ThrowingExpressionTreeVisitor.VisitExtensionExpression(Remotion.Linq.Clauses.Expressions.ExtensionExpression)"/> method.
            </para>
            <para>
            Subclasses of <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitor"/> that do not implement <see cref="T:Remotion.Linq.Clauses.Expressions.IVBSpecificExpressionVisitor"/> will, by default, 
            ignore this expression and visit its child expressions via the <see cref="M:Remotion.Linq.Parsing.ExpressionTreeVisitor.VisitExtensionExpression(Remotion.Linq.Clauses.Expressions.ExtensionExpression)"/> and 
            <see cref="M:Remotion.Linq.Clauses.Expressions.VBStringComparisonExpression.VisitChildren(Remotion.Linq.Parsing.ExpressionTreeVisitor)"/> methods.
            </para>
            </remarks>
        </member>
        <member name="T:Mono.Security.Interface.ICertificateValidator">
            Internal interface - do not implement
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.Variance.ContravariantRegistrationSource">
            <summary>
            Enables contravariant <code>Resolve()</code> for interfaces that have a single contravariant ('in') parameter.
            </summary>
            <example>
            interface IHandler&lt;in TCommand&gt;
            {
                void Handle(TCommand command);
            }
            
            class Command { }
            
            class DerivedCommand : Command { }
            
            class CommandHandler : IHandler&lt;Command&gt; { ... }
            
            var builder = new ContainerBuilder();
            builder.RegisterSource(new ContravariantRegistrationSource());
            builder.RegisterType&lt;CommandHandler&gt;();
            var container = builder.Build();
            // Source enables this line, even though IHandler&lt;Command&gt; is the
            // actual registered type.
            var handler = container.Resolve&lt;IHandler&lt;DerivedCommand&gt;&gt;();
            handler.Handle(new DerivedCommand());
            </example>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Features.Variance.ContravariantRegistrationSource.RegistrationsFor(Revenj.Extensibility.Autofac.Core.Service,System.Func{Revenj.Extensibility.Autofac.Core.Service,System.Collections.Generic.IEnumerable{Revenj.Extensibility.Autofac.Core.IComponentRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
            <remarks>
            If the source is queried for service s, and it returns a component that implements both s and s', then it
            will not be queried again for either s or s'. This means that if the source can return other implementations
            of s', it should return these, plus the transitive closure of other components implementing their 
            additional services, along with the implementation of s. It is not an error to return components
            that do not implement <paramref name="service"/>.
            </remarks>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Features.Variance.ContravariantRegistrationSource.IsAdapterForIndividualComponents">
            <summary>
            Gets whether the registrations provided by this source are 1:1 adapters on top
            of other components (I.e. like Meta, Func or Owned.)
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Features.Metadata.MetaRegistrationSource">
            <summary>
            Support the <see cref="T:Revenj.Extensibility.Autofac.Features.Metadata.Meta`1"/>
            types automatically whenever type T is registered with the container.
            Metadata values come from the component registration's metadata.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.UniqueService">
            <summary>
            A handy unique service identifier type - all instances will be regarded as unequal.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.UniqueService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.UniqueService"/> class.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.UniqueService.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.UniqueService"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.UniqueService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.UniqueService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.UniqueService.Description">
            <summary>
            Provides a programmer-readable description of the identifying feature of the service.
            </summary>
            <value></value>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.ResolvedParameter">
            <summary>
            Flexible parameter type allows arbitrary values to be retrieved
            from the resolution context.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.ResolvedParameter.#ctor(System.Func{System.Reflection.ParameterInfo,Revenj.Extensibility.Autofac.IComponentContext,System.Boolean},System.Func{System.Reflection.ParameterInfo,Revenj.Extensibility.Autofac.IComponentContext,System.Object})">
            <summary>
            Create an instance of the ResolvedParameter class.
            </summary>
            <param name="predicate">A predicate that determines which parameters on a constructor will be supplied by this instance.</param>
            <param name="valueAccessor">A function that supplies the parameter value given the context.</param>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.ResolvedParameter.CanSupplyValue(System.Reflection.ParameterInfo,Revenj.Extensibility.Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.ResolvedParameter.ForNamed``1(System.String)">
            <summary>
            Construct a <see cref="T:Revenj.Extensibility.Autofac.Core.ResolvedParameter"/> that will match parameters of type
            <typeparamref name="TService"/> and resolve for those parameters an implementation
            registered with the name <paramref name="serviceName"/>.
            </summary>
            <typeparam name="TService">The type of the parameter to match.</typeparam>
            <param name="serviceName">The name of the matching service to resolve.</param>
            <returns>A configured <see cref="T:Revenj.Extensibility.Autofac.Core.ResolvedParameter"/> instance.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.ResolvedParameter.ForKeyed``1(System.Object)">
            <summary>
            Construct a <see cref="T:Revenj.Extensibility.Autofac.Core.ResolvedParameter"/> that will match parameters of type
            <typeparamref name="TService"/> and resolve for those parameters an implementation
            registered with the key <paramref name="serviceKey"/>.
            </summary>
            <typeparam name="TService">The type of the parameter to match.</typeparam>
            <param name="serviceKey">The key of the matching service to resolve.</param>
            <returns>A configured <see cref="T:Revenj.Extensibility.Autofac.Core.ResolvedParameter"/> instance.</returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs">
            <summary>
            Describes when a lifetime scope is ending.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs.#ctor(Revenj.Extensibility.Autofac.ILifetimeScope)">
            <summary>
            Create an instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs"/> class.
            </summary>
            <param name="lifetimeScope">The lifetime scope that is ending.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs.LifetimeScope">
            <summary>
            The lifetime scope that is ending.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs">
            <summary>
            Describes when a lifetime scope is beginning.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs.#ctor(Revenj.Extensibility.Autofac.ILifetimeScope)">
            <summary>
            Create an instance of the <see cref="T:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs"/> class.
            </summary>
            <param name="lifetimeScope">The lifetime scope that is beginning.</param>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs.LifetimeScope">
            <summary>
            The lifetime scope that is beginning.
            </summary>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Core.Diagnostics.IContainerAwareComponent">
            <summary>
            Marks a module as container-aware (for the purposes of attaching to diagnostic events.)
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Core.Diagnostics.IContainerAwareComponent.SetContainer(Revenj.Extensibility.Autofac.IContainer)">
            <summary>
            Initialise the module with the container into which it is being registered.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.Util.Enforce">
            <summary>
            Helper methods used throughout the codebase.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.Util.Enforce.ArgumentNotNull``1(``0,System.String)">
            <summary>
            Enforce that an argument is not null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="name"></param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.MetadataElement">
            <summary>
            Element describing a component property.
            </summary>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.MetadataElement.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.MetadataElement.Value">
            <summary>
            Gets the value to be set (will be converted.)
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Revenj.Extensibility.Autofac.Configuration.MetadataElement.Type">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value. Defaults to string if not specified.</value>
        </member>
        <member name="T:Revenj.Extensibility.Autofac.Configuration.AssemblyElementCollection">
            <summary>
            A collection of assembly elements.
            </summary>
        </member>
        <member name="M:Revenj.Extensibility.Autofac.Configuration.AssemblyElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Revenj.Extensibility.Autofac.Configuration.AssemblyElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.MaxExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})"/> or <see cref="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.LastExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for <see cref="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})"/>,
            <see cref="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/>,
            <see cref="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})"/> or
            <see cref="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/>.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.ExpressionResolver">
            <summary>
            Resolves an expression using <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/>, removing transparent identifiers and detecting subqueries
            in the process. This is used by methods such as <see cref="M:Remotion.Linq.Parsing.Structure.IntermediateModel.SelectExpressionNode.GetResolvedSelector(Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)"/>, which are
            used when a clause is created from an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/>.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Parsing.Structure.IntermediateModel.AggregateFromSeedExpressionNode">
            <summary>
            Represents a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for the 
            <see cref="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})"/>, <see cref="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})"/>,
            <see cref="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})"/>, and <see cref="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})"/>
            methods.
            It is generated by <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeParser"/> when an <see cref="T:System.Linq.Expressions.Expression"/> tree is parsed.
            When this node is used, it marks the beginning (i.e. the last node) of an <see cref="T:Remotion.Linq.Parsing.Structure.IntermediateModel.IExpressionNode"/> chain that represents a query.
            </summary>
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.SingleResultOperator">
            <summary>
            Represents taking the single item returned by a query.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <example>
            In C#, the "Single" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.SingleResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).Single();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.SingleResultOperator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.ResultOperators.SingleResultOperator"/>.
            </summary>
            <param name="returnDefaultWhenEmpty">The flag defines if a default expression should be regarded.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.SingleResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Remotion.Linq.Clauses.ResultOperators.FirstResultOperator">
            <summary>
            Represents taking only the first of the items returned by a query.
            This is a result operator, operating on the whole result set of a query.
            </summary>
            <remarks>
            "First" query methods taking a predicate are represented as a combination of a <see cref="T:Remotion.Linq.Clauses.WhereClause"/> and a <see cref="T:Remotion.Linq.Clauses.ResultOperators.FirstResultOperator"/>.
            </remarks>
            <example>
            In C#, the "First" call in the following example corresponds to a <see cref="T:Remotion.Linq.Clauses.ResultOperators.FirstResultOperator"/>.
            <code>
            var query = (from s in Students
                         select s).First();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.FirstResultOperator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Linq.Clauses.ResultOperators.DistinctResultOperator"/>.
            </summary>
            <param name="returnDefaultWhenEmpty">The flag defines if a default expression should be regarded.</param>
        </member>
        <member name="M:Remotion.Linq.Clauses.ResultOperators.FirstResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection">
            <summary>
            Represents a collection of parameters relevant to a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlCommand">NpgsqlCommand</see>
            as well as their respective mappings to columns in a <see cref="T:System.Data.DataSet">DataSet</see>.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the NpgsqlParameterCollection class.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Add(Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter)">
            <summary>
            Adds the specified <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
            <returns>The index of the new <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Add(System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Adds a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> given the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">One of the DbType values.</param>
            <returns>The index of the new <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Add(System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType,System.Int32)">
            <summary>
            Adds a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> with the parameter name, the data type, and the column length.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">One of the DbType values.</param>
            <param name="size">The length of the column.</param>
            <returns>The index of the new <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Add(System.String,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.NpgsqlDbType,System.Int32,System.String)">
            <summary>
            Adds a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> with the parameter name, the data type, the column length, and the source column name.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">One of the DbType values.</param>
            <param name="size">The length of the column.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <returns>The index of the new <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the specified <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> from the collection using the parameter name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to retrieve.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Contains(System.String)">
            <summary>
            Gets a value indicating whether a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> with the specified parameter name exists in the collection.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <returns><b>true</b> if the collection contains the parameter; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> in the collection with a specific parameter name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <returns>The zero-based location of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> in the collection.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> from the collection using a specific index.
            </summary>
            <param name="index">The zero-based index of the parameter.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index where the parameter is to be inserted within the collection.</param>
            <param name="value">The <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> from the collection.
            </summary>
            <param name="value">The <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> to remove from the collection.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Contains(System.Object)">
            <summary>
            Gets a value indicating whether a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> exists in the collection.
            </summary>
            <param name="value">The value of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <returns>true if the collection contains the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object; otherwise, false.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.TryGetValue(System.String,Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter@)">
            <summary>
            Gets a value indicating whether a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> with the specified parameter name exists in the collection.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <param name="parameter">A reference to the requested parameter is returned in this out param if it is found in the list.  This value is null if the parameter is not found.</param>
            <returns><b>true</b> if the collection contains the parameter and param will contain the parameter; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.IndexOf(System.Object)">
            <summary>
            Gets the location of a <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> in the collection.
            </summary>
            <param name="value">The value of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <returns>The zero-based index of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object in the collection.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Add(System.Object)">
            <summary>
            Adds the specified <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
            <returns>The zero-based index of the new <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> objects from the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> to the specified array.
            </summary>
            <param name="array">An <see cref="T:System.Array">Array</see> to which to copy the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> objects in the collection.</param>
            <param name="index">The starting index of the array.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator">IEnumerator</see> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.CheckType(System.Object)">
            <summary>
            In methods taking an object as argument this method is used to verify
            that the argument has the type <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            </summary>
            <param name="Object">The object to verify</param>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> with the specified name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> to retrieve.</param>
            <value>The <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> with the specified name, or a null reference if the parameter is not found.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> to retrieve.</param>
            <value>The <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> at the specified index.</value>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameterCollection.Count">
            <summary>
            Gets the number of <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> objects in the collection.
            </summary>
            <value>The number of <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlParameter">NpgsqlParameter</see> objects in the collection.</value>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.StringRowReader">
            <summary>
            Implements <see cref="T:Revenj.DatabasePersistence.Postgres.Npgsql.RowReader"/> for version 3 of the protocol.
            </summary>
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.Npgsql.NpgsqlBind">
             <summary>
             This class represents the Bind message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString">
            <summary>
            <para>Implements a bit string; a collection of zero or more bits which can each be 1 or 0.</para>
            <para>BitString's behave as a list of bools, though like most strings and unlike most collections the position
            tends to be of as much significance as the value.</para>
            <para>BitStrings are often used as masks, and are commonly cast to and from other values.</para>
            </summary>
        </member>
        <member name="F:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Empty">
            <summary>
            Represents the empty string.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.#ctor(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Create a BitString from an enumeration of boolean values. The BitString will contain
            those booleans in the order they came in.
            </summary>
            <param name="bits">The boolean values.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.#ctor(System.Boolean,System.Int32)">
            <summary>
            Creates a BitString filled with a given number of true or false values.
            </summary>
            <param name="value">The value to fill the string with.</param>
            <param name="count">The number of bits to fill.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.#ctor(System.String)">
            <summary>
            Creats a bitstring from a <see cref="T:System.String">string</see>.
            <param name="str">The <see cref="T:System.String">string to copy from</see>.</param>
            <seealso cref="!:Npgsql.BitString.Parse(System.String)"/>
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.#ctor(System.Boolean)">
            <summary>
            Creates a single-bit element from a boolean value.
            </summary>
            <param name="boolean">The <see cref="T:System.Boolean">bool</see> value which determines whether
            the bit is 1 or 0.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.#ctor(System.UInt32)">
            <summary>
            Creates a bitstring from an unsigned integer value. The string will be the shortest required to
            contain the integer (e.g. 1 bit for 0 or 1, 2 for 2 or 3, 3 for 4-7, and so on).
            </summary>
            <param name="integer">The <see cref="T:System.UInt32">integer</see>.</param>
            <remarks>This method is not CLS Compliant, and may not be available to some languages.</remarks>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.#ctor(System.Int32)">
            <summary>
            Creates a bitstring from an integer value. The string will be the shortest required to
            contain the integer (e.g. 1 bit for 0 or 1, 2 for 2 or 3, 3 for 4-7, and so on).
            </summary>
            <param name="integer">The <see cref="T:System.Int32">integer</see>.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.IndexOf(System.Boolean)">
            <summary>
            Finds the first instance of a given value
            </summary>
            <param name="item">The value - whether true or false - to search for.</param>
            <returns>The index of the value found, or -1 if none are present.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Contains(System.Boolean)">
            <summary>
            True if there is at least one bit with the value looked for.
            </summary>
            <param name="item">The value - true or false - to detect.</param>
            <returns>True if at least one bit was the same as item, false otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.CopyTo(System.Boolean[],System.Int32)">
            <summary>
            Copies the bitstring to an array of bools.
            </summary>
            <param name="array">The <see cref="T:System.Boolean">boolean</see> array to copy to.</param>
            <param name="arrayIndex">The index in the array to start copying from.</param>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates through the string.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Concat(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Creats a bitstring by concatenating another onto this one.
            </summary>
            <param name="append">The string to append to this one.</param>
            <returns>The combined strings.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Substring(System.Int32,System.Int32)">
            <summary>
            Returns a substring of this string.
            </summary>
            <param name="start">The position to start from, must be between 0 and the length of the string.</param>
            <param name="length">The length of the string to return, must be greater than zero, and may not be
            so large that the start + length exceeds the bounds of this instance.</param>
            <returns>The Bitstring identified</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Substring(System.Int32)">
            <summary>
            Returns a substring of this string.
            </summary>
            <param name="start">The position to start from, must be between 0 and the length of the string,
            the rest of the string is returned.</param>
            <returns>The Bitstring identified</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.And(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            A logical and between this string and another. The two strings must be the same length.
            </summary>
            <param name="operand">Another BitString to AND with this one.</param>
            <returns>A bitstring with 1 where both BitStrings had 1 and 0 otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Or(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            A logical or between this string and another. The two strings must be the same length.
            </summary>
            <param name="operand">Another BitString to OR with this one.</param>
            <returns>A bitstring with 1 where either BitString had 1 and 0 otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Xor(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            A logical xor between this string and another. The two strings must be the same length.
            </summary>
            <param name="operand">Another BitString to XOR with this one.</param>
            <returns>A bitstring with 1 where one BitStrings and the other had 0,
            and 0 where they both had 1 or both had 0.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Not">
            <summary>
            A bitstring that is the logical inverse of this one.
            </summary>
            <returns>A bitstring of the same length as this with 1 where this has 0 and vice-versa.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.LShift(System.Int32)">
            <summary>
            Shifts the string operand bits to the left, filling with zeros to produce a
            string of the same length.
            </summary>
            <param name="operand">The number of bits to shift to the left.</param>
            <returns>A left-shifted bitstring.</returns>
            <remarks><para>The behaviour of LShift is closer to what one would expect from dealing
            with PostgreSQL bit-strings than in using the same operations on integers in .NET</para>
            <para>In particular, negative operands result in a right-shift, and operands greater than
            the length of the string will shift it entirely, resulting in a zero-filled string.</para>
            </remarks>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.RShift(System.Int32)">
            <summary>
            Shifts the string operand bits to the right, filling with zeros to produce a
            string of the same length.
            </summary>
            <param name="operand">The number of bits to shift to the right.</param>
            <returns>A right-shifted bitstring.</returns>
            <remarks><para>The behaviour of RShift is closer to what one would expect from dealing
            with PostgreSQL bit-strings than in using the same operations on integers in .NET</para>
            <para>In particular, negative operands result in a left-shift, and operands greater than
            the length of the string will shift it entirely, resulting in a zero-filled string. It also performs
            a logical shift, rather than an arithmetic shift, so it always sets the vacated bit positions to zero
            (like PostgreSQL and like .NET for unsigned integers but not for signed integers).</para>
            </remarks>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Equals(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Returns true if the this string is identical to the argument passed.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.CompareTo(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Compares two strings. Strings are compared as strings, so while 0 being less than 1 will
            mean a comparison between two strings of the same size is the same as treating them as numbers,
            in the case of two strings of differing lengths the comparison starts at the right-most (most significant)
            bit, and if all bits of the shorter string are exhausted without finding a comparison, then the larger
            string is deemed to be greater than the shorter (0010 is greater than 0001 but less than 00100).
            </summary>
            <param name="other">Another string to compare with this one.</param>
            <returns>A value if the two strings are identical, an integer less
            than zero if this is less than the argument, and an integer greater
            than zero otherwise.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.CompareTo(System.Object)">
            <summary>
            Compares the string with another object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>If the object is null then this string is considered greater. If the object is another BitString
            then they are compared as in <see cref="!:CompareTo(Npgsql.BitString)">the explicit comparison for BitStrings</see>
            in any other case a <see cref="T:System.ArgumentException"/> is thrown.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Equals(System.Object)">
            <summary>
            Compares this BitString with an object for equality.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.GetHashCode">
            <summary>
            Returns a code for use in hashing operations.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToString(System.String)">
            <summary>
            Returns a string representation of the BitString.
            </summary>
            <param name="format">
            A string which can contain a letter and optionally a number which sets a minimum size for the string
            returned. In each case using the lower-case form of the letter will result in a lower-case string
            being returned.
            <list type="table">
            <item>
            <term>B</term>
            <description>A string of 1s and 0s.</description>
            </item>
            <item>
            <term>X</term>
            <description>An hexadecimal string (will result in an error unless the string's length is divisible by 4).</description>
            </item>
            <item>
            <term>G</term>
            <description>A string of 1s and 0s in single-quotes preceded by 'B' (Postgres bit string literal syntax).</description>
            </item>
            <term>Y</term>
            <description>An hexadecimal string in single-quotes preceded by 'X' (Postgres bit literal syntax, will result in an error unless the string's length is divisible by 4.</description>
            </list>
            <term>C</term>
            <description>The format produced by format-string "Y" if legal, otherwise that produced by format-string "G".</description>
            <term>E</term>
            <description>The most compact safe representation for Postgres. If single bit will be either a 0 or a 1. Otherwise if it
            can be that produce by format string "Y" it will, otherwise if there are less than 9bits in length it will be that
            produced by format-string "G". For longer strings that cannot be represented in hexadecimal it will be a string
            representing the first part of the string in format "Y" followed by the PostgreSQL concatenation operator, followed
            by the final bits in the format "G". E.g. "X'13DCE'||B'110'"</description>
            If format is empty or null, it is treated as if "B" had been passed (the default repreesentation, and that
            generally used by PostgreSQL for display).
            </param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToString">
            <summary>
            Returns a string representation for the Bitstring
            </summary>
            <returns>A string containing '0' and '1' characters.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the same string as <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToString(System.String)"/>. formatProvider is ignored.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Parse(System.String)">
            <summary>
            Parses a string to produce a BitString. Most formats that can be produced by
            <see cref="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToString(System.String)"/> can be accepted, but hexadecimal
            can be interpreted with the preceding X' to mark the following characters as
            being hexadecimal rather than binary.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_BitwiseAnd(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Performs a logical AND on the two operands.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_BitwiseOr(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Performs a logcial OR on the two operands.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_ExclusiveOr(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Perofrms a logical EXCLUSIVE-OR on the two operands
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_OnesComplement(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Performs a logical NOT on the operand.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_Addition(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Concatenates the operands.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_LeftShift(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString,System.Int32)">
            <summary>
            Left-shifts the string BitString.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_RightShift(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString,System.Int32)">
            <summary>
            Right-shifts the string BitString.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_Equality(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Compares the two operands.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_Inequality(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Compares the two operands.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_LessThan(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Compares the two operands.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_GreaterThan(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Compares the two operands.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_LessThanOrEqual(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Compares the two operands.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.op_GreaterThanOrEqual(Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString,Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString)">
            <summary>
            Compares the two operands.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToString(System.Text.Encoding)">
            <summary>
            Interprets the bitstring as a series of bits in an encoded character string,
            encoded according to the Encoding passed, and returns that string.
            The bitstring must contain a whole number of octets(bytes) and also be
            valid according to the Encoding passed.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use in producing the string.</param>
            <returns>The string that was encoded in the BitString.</returns>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToByteEnumerable">
            <summary>
            Interprets the bitstring as a series of octets (bytes) and returns those octets. Fails
            if the Bitstring does not contain a whole number of octets (its length is not evenly
            divisible by 8).
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToSByteEnumerable">
            <summary>
            Interprets the bitstring as a series of signed octets (bytes) and returns those octets. Fails
            if the Bitstring does not contain a whole number of octets (its length is not evenly
            divisible by 8).
            <remarks>This method is not CLS-Compliant and may not be available to languages that cannot
            handle signed bytes.</remarks>
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToUInt16Enumerable">
            <summary>
            Interprets the bitstring as a series of unsigned 16-bit integers and returns those integers.
            Fails if the Bitstring's length is not evenly divisible by 16.
            <remarks>This method is not CLS-Compliant and may not be available to languages that cannot
            handle unsigned integers.</remarks>
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToInt16Enumerable">
            <summary>
            Interprets the bitstring as a series of 16-bit integers and returns those integers.
            Fails if the Bitstring's length is not evenly divisible by 16.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToUInt32Enumerable">
            <summary>
            Interprets the bitstring as a series of unsigned 32-bit integers and returns those integers.
            Fails if the Bitstring's length is not evenly divisible by 32.
            <remarks>This method is not CLS-Compliant and may not be available to languages that cannot
            handle unsigned integers.</remarks>
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToInt32Enumerable">
            <summary>
            Interprets the bitstring as a series of signed 32-bit integers and returns those integers.
            Fails if the Bitstring's length is not evenly divisible by 32.
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToUInt64Enumerable">
            <summary>
            Interprets the bitstring as a series of unsigned 64-bit integers and returns those integers.
            Fails if the Bitstring's length is not evenly divisible by 64.
            <remarks>This method is not CLS-Compliant and may not be available to languages that cannot
            handle unsigned integers.</remarks>
            </summary>
        </member>
        <member name="M:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.ToInt64Enumerable">
            <summary>
            Interprets the bitstring as a series of signed 64-bit integers and returns those integers.
            Fails if the Bitstring's length is not evenly divisible by 64.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Length">
            <summary>
            The length of the string.
            </summary>
        </member>
        <member name="P:Revenj.DatabasePersistence.Postgres.NpgsqlTypes.BitString.Item(System.Int32)">
            <summary>
            Retrieves the value of the bit at the given index.
            </summary>
        </member>
    </members>
</doc>
